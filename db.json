{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/maupassant/source/donate/index.html","path":"donate/index.html","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/BTCQR.png","path":"img/BTCQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/AliPayQR.png","path":"img/AliPayQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/alipay.svg","path":"img/alipay.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/WeChatQR.png","path":"img/WeChatQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/like.svg","path":"img/like.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/bitcoin.svg","path":"img/bitcoin.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/paypal.svg","path":"img/paypal.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/default.css","path":"css/default.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/wechat.svg","path":"img/wechat.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/donate.css","path":"css/donate.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/donate.js","path":"js/donate.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/gitment.browser.js","path":"js/gitment.browser.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/github.svg","path":"img/github.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/maupassant/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1557971248311},{"_id":"source/favicon.ico","hash":"343c2101eb8c008c0abce21a2a7f6cc6e28853ed","modified":1557976014669},{"_id":"themes/maupassant/LICENSE","hash":"f0ac2f92770650c9835183f79010c0d307b34acd","modified":1557971248311},{"_id":"themes/maupassant/_config.yml","hash":"a685d7b6eeca6609eda5385d5a52a03c7b73a689","modified":1557995108839},{"_id":"source/about/index.md","hash":"c8937b02a1960ae96506bab36c81f4fec6e65150","modified":1557984667499},{"_id":"themes/maupassant/README.md","hash":"90032cb3a46f741a3d6198de9f83ce384505519e","modified":1557971248311},{"_id":"themes/maupassant/.gitignore","hash":"16945417d10c15c950306794dbb0d970b5a199fe","modified":1557971248311},{"_id":"themes/maupassant/package.json","hash":"f092433469eb87362e831326425a6a5c3c9fea0d","modified":1557971248311},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"5d3556a885e355a8c2da65ef3e7b3ee36a628bfa","modified":1557971248311},{"_id":"source/timeline/index.md","hash":"fb3fe5298245c1588c8010cc783232c61ae8b970","modified":1557977576058},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1557971248311},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"b47906ec0abf867fb3e3360bc046b7afb68aee25","modified":1557971248311},{"_id":"themes/maupassant/languages/ru.yml","hash":"2476a631f4d3c668de04af85a6c2c97ba2a57e96","modified":1557971248311},{"_id":"themes/maupassant/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1557971248311},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"bf3ab970f2ab3f29ddeb9f59bf98163be635e284","modified":1557971248311},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"1299e6fc6d86e0970d3cb31acce6e7e223cf764c","modified":1557976579358},{"_id":"themes/maupassant/languages/en.yml","hash":"c3fb5c155560a00889a75882c680afe1197ebf1a","modified":1557971248311},{"_id":"themes/maupassant/.git/config","hash":"776ed8041073d1bb2a234fa37a0d49bad1f0c5f4","modified":1557971248259},{"_id":"themes/maupassant/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1557971243453},{"_id":"themes/maupassant/.git/packed-refs","hash":"f3ea86c529ec4a7bcddfb89aeac8e4e6100aa5f3","modified":1557971248259},{"_id":"themes/maupassant/layout/archive.pug","hash":"2fe2cff144c9b7b509b7b6cb1b3acba27aa1d132","modified":1557971248311},{"_id":"themes/maupassant/layout/base-without-sidebar.pug","hash":"16c4d1079450f801b5ac079d3cc101856d8f387c","modified":1557971248311},{"_id":"themes/maupassant/layout/base.pug","hash":"a4e32bcb580b76af9ad0582d9d3f0107e34509ed","modified":1557971248311},{"_id":"themes/maupassant/layout/index.pug","hash":"0435a4e5f5c6976e05b3079d335453c246f5ba6e","modified":1557971248311},{"_id":"themes/maupassant/layout/page.pug","hash":"8cfd307b13cad8be34a1e75c4566f96c1722e08e","modified":1557971248311},{"_id":"themes/maupassant/layout/post.pug","hash":"f4d17b1b2a590cc076e80d912591648f9e99aeaf","modified":1557971248311},{"_id":"themes/maupassant/layout/single-column.pug","hash":"0593f261dc208bb0b5c4232eb41eff597a291bd9","modified":1557971248311},{"_id":"themes/maupassant/layout/timeline.pug","hash":"84fbfc92ccdf291b491140d89557553141a5d3f9","modified":1557971248311},{"_id":"source/_posts/深度探索c++对象模型/《深度探索c++对象模型》（一）.md","hash":"c41153880a9484ed7a67d63632c94d6302afa9aa","modified":1557999113767},{"_id":"source/_posts/深度探索c++对象模型/《深度探索c++对象模型》（七）.md","hash":"4894fd5dfd222c8d0c8a8473bc254a64849aa91e","modified":1557999127819},{"_id":"source/_posts/深度探索c++对象模型/《深度探索c++对象模型》（三）.md","hash":"c9aea85266de2ebab96736daeaea57da957f16b7","modified":1557999162031},{"_id":"source/_posts/深度探索c++对象模型/《深度探索c++对象模型》（二）.md","hash":"0a1e754155c47fd26e407c4c7094dc5dacfc5413","modified":1557999169935},{"_id":"source/_posts/深度探索c++对象模型/《深度探索c++对象模型》（五）.md","hash":"4ef53001c01eef93350b700aa9b07f1c1c4f02f0","modified":1557999193934},{"_id":"source/_posts/深度探索c++对象模型/《深度探索c++对象模型》（六）.md","hash":"16c6fad2e6bde3c3086e1e4843bae07db55fc4da","modified":1557999204301},{"_id":"source/_posts/深度探索c++对象模型/《深度探索c++对象模型》（四）.md","hash":"18c9bb8501dc1713ead4785410c2c0d32a1b535c","modified":1557999231139},{"_id":"source/_posts/算法与数据结构/1.保卫方案.md","hash":"3d6ddfbde20d2e79ebc53cd69e97d93771b1b700","modified":1557999266626},{"_id":"source/_posts/算法与数据结构/2.异或.md","hash":"63fd6926773ba2c7ff3ed3cbbeb95d8808f5d177","modified":1557999273671},{"_id":"source/_posts/算法与数据结构/3.字典序.md","hash":"d01b42514cc2063173c6d209a452e0daf14aa575","modified":1557999280128},{"_id":"source/_posts/网络协议/深入理解netfilter的核心原理与实现.md","hash":"457b46cf881a43a91b047353b3cd7fbc476d210a","modified":1557997934550},{"_id":"source/_posts/项目工具/git中的仓库崩溃后的如何恢复.md","hash":"6674502442e07a268ac84190b11e8c42bda2f40a","modified":1557998455998},{"_id":"source/_posts/项目工具/git之生成ssh key.md","hash":"beb5d7f057cc73e8bbae2a3f3f5a1f4efaa25b0e","modified":1557998485938},{"_id":"source/_posts/项目工具/git基本命令详解.md","hash":"110cc50d10966a2f6536527e44501b29bdc3d33a","modified":1557998519278},{"_id":"themes/maupassant/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1557971248259},{"_id":"themes/maupassant/.git/index","hash":"4e0863e3fea337db28a323058f2192c2d912f6e4","modified":1558003850135},{"_id":"themes/maupassant/.git/FETCH_HEAD","hash":"fe0a4155757e6bd24a94815ef1987a4676a95c7f","modified":1557998738457},{"_id":"themes/maupassant/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1557971243457},{"_id":"themes/maupassant/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1557971243457},{"_id":"themes/maupassant/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1557971243461},{"_id":"themes/maupassant/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1557971243457},{"_id":"themes/maupassant/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1557971243461},{"_id":"themes/maupassant/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1557971243461},{"_id":"themes/maupassant/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1557971243457},{"_id":"themes/maupassant/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1557971243457},{"_id":"themes/maupassant/.git/logs/HEAD","hash":"053f798ade2355cee6725a9871b20351cddba41a","modified":1557971248259},{"_id":"themes/maupassant/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1557971243453},{"_id":"themes/maupassant/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1557971243461},{"_id":"themes/maupassant/layout/_widget/category.pug","hash":"7c6aed762934ca51aa2669b886254da24b77bc14","modified":1557971248311},{"_id":"themes/maupassant/layout/_widget/links.pug","hash":"c45aa7ec00158579e58f1f8dfd890447bb5e5e54","modified":1557971248311},{"_id":"themes/maupassant/layout/_widget/recent_comments.pug","hash":"4102d446f13b02ff617f055c2a8f726bca12744a","modified":1557971248311},{"_id":"themes/maupassant/layout/_widget/recent_posts.pug","hash":"19431336d724d2118e46da43683bce9063176541","modified":1557971248311},{"_id":"themes/maupassant/layout/_widget/search.pug","hash":"6e8e4123cca38840c4607c1a056205972b82bb7b","modified":1557971248311},{"_id":"themes/maupassant/layout/_partial/after_footer.pug","hash":"31bf35a57634ff8a796c71dd5246eba3a3db10ee","modified":1557971248311},{"_id":"themes/maupassant/layout/_widget/tag.pug","hash":"132f049ce677d0e38f50073174c4ee4b825d4a06","modified":1557971248311},{"_id":"themes/maupassant/layout/_partial/comments.pug","hash":"ff14baa25f6db34dedfb5e029c25687a335ad430","modified":1557971248311},{"_id":"themes/maupassant/layout/_partial/head.pug","hash":"8af6e452ea2a56b110b5079f79bf743b643f7d6c","modified":1557971248311},{"_id":"themes/maupassant/layout/_partial/footer.pug","hash":"650781b5bc8c632658ad6880ba663b1e3bfb5798","modified":1557971248311},{"_id":"themes/maupassant/layout/_partial/helpers.pug","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1557971248311},{"_id":"themes/maupassant/layout/_partial/mathjax.pug","hash":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1557971248311},{"_id":"themes/maupassant/layout/_partial/paginator.pug","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1557971248311},{"_id":"themes/maupassant/layout/_partial/mathjax2.pug","hash":"d6ac5dc4e9c7a1b866f1f92d88988cfb35aded4c","modified":1557971248311},{"_id":"themes/maupassant/layout/_partial/post_nav.pug","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1557971248311},{"_id":"themes/maupassant/layout/_partial/tag.pug","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1557971248311},{"_id":"themes/maupassant/layout/_partial/totop.pug","hash":"8225bbc3cdb9648bc2e6872e5c616a9a1e4def4f","modified":1557971248311},{"_id":"themes/maupassant/layout/_partial/wordcount.pug","hash":"004c8a3edc19d428179b83a0f97eae3c1a6d3cfa","modified":1557971248311},{"_id":"themes/maupassant/source/donate/index.html","hash":"c42428765d48c8674ce28100ad95fdf4c7806a85","modified":1557971248311},{"_id":"themes/maupassant/source/img/BTCQR.png","hash":"7d1c80f953bfb6f0a37d432b04c936ea165bfd97","modified":1557971248311},{"_id":"themes/maupassant/source/img/AliPayQR.png","hash":"7787b5d91cbf0e19a1260df24f7d949771c7d45b","modified":1557971248311},{"_id":"themes/maupassant/source/img/alipay.svg","hash":"46cc0552a9f6d700d618db3fcad25e1b8e697e36","modified":1557971248315},{"_id":"themes/maupassant/source/img/WeChatQR.png","hash":"8c41aca7883e5ff714c56556f5fff8e7e7c38093","modified":1557971248315},{"_id":"themes/maupassant/source/img/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1557971248315},{"_id":"themes/maupassant/source/img/bitcoin.svg","hash":"635f7cca5e675d192be2717788175c7a2146013a","modified":1557971248315},{"_id":"themes/maupassant/source/img/paypal.svg","hash":"92f3bc495f20a0190d3041be03345c46d6238c25","modified":1557971248315},{"_id":"themes/maupassant/source/css/default.css","hash":"7fbb18b73b44ed11193739c55fce53a6f173cf68","modified":1557971248311},{"_id":"themes/maupassant/source/img/wechat.svg","hash":"330496ad42446a29f37a2b97fc388ebd77a8cb9f","modified":1557971248315},{"_id":"themes/maupassant/source/css/donate.css","hash":"f019876946aeb80e567ece250d54c1327c794583","modified":1557971248311},{"_id":"themes/maupassant/source/css/style.scss","hash":"b1b3582dadbe1a4758395d7977d257e3b5b565c0","modified":1557994539781},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1557971248315},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1557971248315},{"_id":"themes/maupassant/source/js/donate.js","hash":"780beaaf44b1e6c057752bdbc085b1048937e5e7","modified":1557971248315},{"_id":"themes/maupassant/source/js/search.js","hash":"0c0630e2ef213701d393b041f10572e951a27985","modified":1557971248315},{"_id":"themes/maupassant/source/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1557971248315},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1557971248315},{"_id":"themes/maupassant/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1557971248315},{"_id":"themes/maupassant/.git/refs/heads/master","hash":"166458305b16424499927a509c874860afee76b4","modified":1557971248259},{"_id":"themes/maupassant/.git/objects/pack/pack-d6d735f0327fa7bec5685c4ccb64e06f869425df.idx","hash":"dfd841b2de857996a9fe1a62d9df94b223651ee8","modified":1557971248223},{"_id":"themes/maupassant/source/js/gitment.browser.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1557971248315},{"_id":"themes/maupassant/source/img/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1557971248315},{"_id":"themes/maupassant/.git/logs/refs/heads/master","hash":"053f798ade2355cee6725a9871b20351cddba41a","modified":1557971248259},{"_id":"themes/maupassant/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1557971248259},{"_id":"themes/maupassant/.git/logs/refs/remotes/origin/HEAD","hash":"053f798ade2355cee6725a9871b20351cddba41a","modified":1557971248259},{"_id":"themes/maupassant/.git/objects/pack/pack-d6d735f0327fa7bec5685c4ccb64e06f869425df.pack","hash":"ee9133222da45c7432142edd65f44d027555fd3a","modified":1557971248223},{"_id":"public/search.xml","hash":"dd0e969ec5c1230d497168f96b613eb5e17f61b1","modified":1558006869231},{"_id":"public/sitemap.xml","hash":"dae7acc66b840aeae17090dc44a13dc9d330a0da","modified":1558006869216},{"_id":"public/atom.xml","hash":"78a7e301d5dbc77469423eeb81771170372fb7f9","modified":1558006869216},{"_id":"public/about/index.html","hash":"23a29668c13d3a97ea0ee68fd93d694e751131bd","modified":1558006869238},{"_id":"public/timeline/index.html","hash":"700ffbdcf1479012ac596c2df052fd185264ef09","modified":1558006869239},{"_id":"public/2019/05/16/项目工具/git之生成ssh key/index.html","hash":"6f0025425b535d81e816fad98acc202ad01390d1","modified":1558006869239},{"_id":"public/archives/index.html","hash":"3e5a2662f5550f67da2af4d25afef75eaa5d0106","modified":1558006869239},{"_id":"public/archives/page/2/index.html","hash":"0707d3766eecbcaea3d977fc471c4f4ab3b3204d","modified":1558006869239},{"_id":"public/archives/2019/index.html","hash":"afd155def8bddfbe04ead94ee3584f03d389a2f7","modified":1558006869239},{"_id":"public/archives/2019/page/2/index.html","hash":"6f27f7fdc1c86a41cca1819644f0ddf3bd8bbfd0","modified":1558006869239},{"_id":"public/archives/2019/05/index.html","hash":"80198acf3e1b005fef4417e66a98aa1bd8b8351b","modified":1558006869239},{"_id":"public/archives/2019/05/page/2/index.html","hash":"e5a1b59452d1f109f8c2d1fd967bb7be233454ac","modified":1558006869240},{"_id":"public/index.html","hash":"953d12939339a0521cfb4990f550425044a505bf","modified":1558006869239},{"_id":"public/page/2/index.html","hash":"550a1b06ed42824fd58e2a96162f9f1a3f1ad374","modified":1558006869239},{"_id":"public/categories/C-基础/index.html","hash":"e2daaa06a497fd1f9149aeb09deb5ca8474ae88b","modified":1558006869240},{"_id":"public/categories/算法与数据结构/index.html","hash":"b33b48121c6f7a8cc34155b253eb9983decb682b","modified":1558006869240},{"_id":"public/categories/网络协议/index.html","hash":"0c559475b07b89aec589191443c9f4d205a94ed9","modified":1558006869242},{"_id":"public/categories/项目工具/index.html","hash":"c59ad9cca7dc753380dbe7fb4926673954888aac","modified":1558006869243},{"_id":"public/tags/C-基础/index.html","hash":"e2daaa06a497fd1f9149aeb09deb5ca8474ae88b","modified":1558006869243},{"_id":"public/tags/动态规划/index.html","hash":"3adda035ffa74f3d247a7e5c81193962e5013908","modified":1558006869243},{"_id":"public/tags/字典树/index.html","hash":"3eb7c7ce1c9f6c35d4cc40c607e7f8c539960d0e","modified":1558006869243},{"_id":"public/tags/trie树/index.html","hash":"19f29d4df9943e430b44f89a7ffc702fef347563","modified":1558006869243},{"_id":"public/tags/Iptabls/index.html","hash":"de7f111254ffcb7221f7b991c4077752f1764b10","modified":1558006869244},{"_id":"public/tags/Netfilter/index.html","hash":"4f64d916f1e57bb70f8a21e736ca79e5085350cc","modified":1558006869244},{"_id":"public/tags/git使用/index.html","hash":"7a36f454ab01aa37e99224c141583055b50404cf","modified":1558006869244},{"_id":"public/2019/05/16/算法与数据结构/1.保卫方案/index.html","hash":"5300d730b3b3dd8b8ef004f3c1aeac6ba546a1fa","modified":1558006869244},{"_id":"public/2019/05/16/深度探索c++对象模型/《深度探索c++对象模型》（一）/index.html","hash":"2413f92683e1ee1357c928951a1e8387a8d908ca","modified":1558006869244},{"_id":"public/2019/05/16/深度探索c++对象模型/《深度探索c++对象模型》（三）/index.html","hash":"a10e9ef65eb6f32eb7c89166e3eb1280a5c5080f","modified":1558006869244},{"_id":"public/2019/05/16/深度探索c++对象模型/《深度探索c++对象模型》（二）/index.html","hash":"cfc1b093e79606a3ed76eca7022b92e691f5931c","modified":1558006869244},{"_id":"public/2019/05/16/深度探索c++对象模型/《深度探索c++对象模型》（五）/index.html","hash":"8141538d8776033c0c8d099efddbaef9e995025d","modified":1558006869244},{"_id":"public/2019/05/16/深度探索c++对象模型/《深度探索c++对象模型》（六）/index.html","hash":"de3bf74651fcdaf100efeb980989bcc1ce9c38ee","modified":1558006869244},{"_id":"public/2019/05/16/深度探索c++对象模型/《深度探索c++对象模型》（四）/index.html","hash":"4a6fe0ad2e6d83cac42056a4610ae440f7456963","modified":1558006869248},{"_id":"public/2019/05/16/深度探索c++对象模型/《深度探索c++对象模型》（七）/index.html","hash":"dda011ee627ff75b7aa1d0b5b81b7b7bf2bd39cd","modified":1558006869248},{"_id":"public/2019/05/16/算法与数据结构/2.异或/index.html","hash":"71e670f36794001441e9321a81f41bd4b5e151fa","modified":1558006869248},{"_id":"public/2019/05/16/算法与数据结构/3.字典序/index.html","hash":"480c3a0c09461c3b2f013f09d52622a2138d3ebc","modified":1558006869248},{"_id":"public/2019/05/16/网络协议/深入理解netfilter的核心原理与实现/index.html","hash":"3910210099333e28cd617b619b656b60dfd9c9d0","modified":1558006869248},{"_id":"public/2019/05/16/项目工具/git中的仓库崩溃后的如何恢复/index.html","hash":"cc0d419d348c8dc362d42082905869973ddf00f1","modified":1558006869248},{"_id":"public/2019/05/16/项目工具/git基本命令详解/index.html","hash":"5cee5191ef12967f4ad973b05c3748e8c735d0c3","modified":1558006869248},{"_id":"public/favicon.ico","hash":"343c2101eb8c008c0abce21a2a7f6cc6e28853ed","modified":1557998834922},{"_id":"public/img/BTCQR.png","hash":"7d1c80f953bfb6f0a37d432b04c936ea165bfd97","modified":1557998834922},{"_id":"public/img/AliPayQR.png","hash":"7787b5d91cbf0e19a1260df24f7d949771c7d45b","modified":1557998834922},{"_id":"public/img/alipay.svg","hash":"46cc0552a9f6d700d618db3fcad25e1b8e697e36","modified":1557998834922},{"_id":"public/img/WeChatQR.png","hash":"8c41aca7883e5ff714c56556f5fff8e7e7c38093","modified":1557998834922},{"_id":"public/img/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1557998834922},{"_id":"public/img/bitcoin.svg","hash":"635f7cca5e675d192be2717788175c7a2146013a","modified":1557998834922},{"_id":"public/img/paypal.svg","hash":"92f3bc495f20a0190d3041be03345c46d6238c25","modified":1557998834922},{"_id":"public/img/wechat.svg","hash":"330496ad42446a29f37a2b97fc388ebd77a8cb9f","modified":1557998834922},{"_id":"public/img/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1557998834922},{"_id":"public/css/donate.css","hash":"f019876946aeb80e567ece250d54c1327c794583","modified":1557998834982},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1557998834982},{"_id":"public/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1557998834982},{"_id":"public/js/donate.js","hash":"89f0b9d9d0c4fce183161d29c2a44aef750efb27","modified":1557998834983},{"_id":"public/js/search.js","hash":"0c0630e2ef213701d393b041f10572e951a27985","modified":1557998834983},{"_id":"public/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1557998834983},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1557998834983},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1557998834984},{"_id":"public/donate/index.html","hash":"1845c6744cc8359df77beacff8d5bd9ce4425807","modified":1557998834984},{"_id":"public/css/default.css","hash":"7fbb18b73b44ed11193739c55fce53a6f173cf68","modified":1557998834984},{"_id":"public/css/style.css","hash":"6c9eb759cf057359ea85244105a8f8b6eb6226bf","modified":1557998834984},{"_id":"public/js/gitment.browser.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1557998834985}],"Category":[{"name":"C++基础","_id":"cjvqga0qd000479jxrp0brmc1"},{"name":"算法与数据结构","_id":"cjvqga0qs000o79jxc7w08edc"},{"name":"网络协议","_id":"cjvqga0qz001879jxgrh1zwni"},{"name":"项目工具","_id":"cjvqga0r0001d79jxilfk2y62"}],"Data":[],"Page":[{"title":"关于我","layout":"page","_content":"我是一名后端开发工程师，专注高性能服务器、分布式服务器等的研发工作。     \n热爱生活，热爱自己。\n","source":"about/index.md","raw":"---\ntitle: 关于我\nlayout: page\n---\n我是一名后端开发工程师，专注高性能服务器、分布式服务器等的研发工作。     \n热爱生活，热爱自己。\n","date":"2019-05-16T05:31:07.499Z","updated":"2019-05-16T05:31:07.499Z","path":"about/index.html","comments":1,"_id":"cjvqg9zzv000079jxvwya4nrh","content":"<p>我是一名后端开发工程师，专注高性能服务器、分布式服务器等的研发工作。<br>热爱生活，热爱自己。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我是一名后端开发工程师，专注高性能服务器、分布式服务器等的研发工作。<br>热爱生活，热爱自己。</p>\n"},{"title":"timeline","date":"2019-05-16T03:20:58.000Z","layout":"timeline","_content":"","source":"timeline/index.md","raw":"---\ntitle: timeline\ndate: 2019-05-16 11:20:58\nlayout: timeline\n---\n","updated":"2019-05-16T03:32:56.058Z","path":"timeline/index.html","comments":1,"_id":"cjvqg9zzw000179jxgw4lobh9","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"《深度探索c++对象模型》（一）关于对象","date":"2019-05-16T08:44:12.000Z","toc":true,"comments":1,"_content":"\n看完《深度探索c\\++对象模型》，心中对c\\++编译器在编译期间所做的处理有了更深入的认识，我想，除了对编译器本身有深入认识的作者之外，应该很少有人对c\\++的对象模型有这么深的认识。能接触了这本书，是我们的幸运，是作者让我们有机会能一窥其貌，感谢作者。\n<!--more-->\n\n### 前述\n> 看完《深度探索c\\++对象模型》，心中对c\\++编译器在编译期间所做的处理有了更深入的认识，我想，除了对编译器本身有深入认识的作者之外，应该很少有人对c\\++的对象模型有这么深的认识。能接触了这本书，是我们的幸运，是作者让我们有机会能一窥其貌，感谢作者。\n\n> 其实第一遍读这本书，我的收获还不算多，这可能是我对c++的使用还不够多的缘故，但通过这本书，我以后使用c\\++的时候，就会心里有更多的底气，也会有更多需要注意的地方，在经过更多的实践之后，我一定还会回来拜读这本书的。\n\n> 现在，我想就本书所学到的的知识做一些总结。   \n\n------------------------------------\n参考书籍及链接：     《深度探索c\\+\\+对象模型》    \n\n------------------------------------\n## 一、关于对象\n#### 1. C++在加入封装后(只含有数据成员和普通成员函数）的布局成本增加了多少？  \n答案是并没有增加布局成本。就像C struct一样，memeber functions虽然含在class的声明之内，却不出现在object中。每一个non-inline member function只会诞生一个函数实体。至于每一个“拥有零个或一个定义的” inline function则会在其每一个使用者(模块)身上产生一个函数实体。\n\n#### 2. C++在布局以及存取时间上主要的额外负担是由virtual引起的，包括： \n   * virtual funciton机制，用以支持一个有效率的“执行期绑定”\n   * virtual base class，用以实现“多次出现在继承体系中的base class，有一个单一而被共享的实体”\n\n\n\n## 二、C++ 对象模式(The C++ Object Model)\n#### 1. 在C++中，有两种class data members：static 和 nonstatic，以及三种class member functions：static、nonstatic和virtual。\n\n#### 2. C++对象模型中，nonstatic data members被配置于每一个class object之内。\nstatic data members则被存放在所有的class object之外。static和nonstatic function members也被放在所有的class object之外。virtual function则以两个步骤支持之：\n   * 1. 每个class产生出一堆指向virtual functions的指针，放在表格之中。这个表格被称为virtual table(vtbl)\n   * 2. 每一个class object被安插一个指针，指向相关的virtual table。通常这个指针被称为vptr。vptr的设定和重置都由每一个class的constructor、destructor和copy assignment运算符自动完成。每一个class所关联的type_info object(用以支持runtime type identification, RTTI)也经由virtual table被指出来，通常放在表格的第一个slot处。  \n \n这个模型的主要优点在于它的空间和存取时间的效率。  \n主要缺点是：如果应用程序代码未曾改变，但所用到的class objects的nonstatic data members有所修改(有可能是增加、移除或更改)，那么应用程序代码同样得重新编译。\n\n#### 3.继承关系可以指定为虚拟(virtual，也就是共享的意思)：\n在虚拟继承的情况下，base class不管在继承链中被派生(derived)多少次，永远只会存在一个实例(称为subobject)。\n\n\n\n## 三、关键词带来的差异\n#### 1.什么时候一个人应该在c++程序中以struct取代class?\n答案之一是当他让人感觉比较好的时候。单独来看，关键词本身并不提供任何差异，c\\+\\+编译器对二者都提供了相同支持，我们可以认为支持struct只是为了方便将c程序迁移到c\\+\\+中。\n88\n#### 2.那为什么我们要引入class关键词？\n这是因为引入的不只是class这个关键词，更多的是它所支持的封装和继承的哲学。\n\n#### 3.怎么在c++中用好struct？\n将struct和class组合起来，组合，而非继承，才是把c和c++结合在一起的唯一可行的方法。另外，当你要传递“一个复杂的class object的全部或部分”到某个c函数去时，struct声明可以将数据封装起来，并保证拥有与c兼容的空间布局。\n\n## 四、对象的差异\n#### 1. C++程序设计模型直接支持三种程序设计典范（programming paradigms）：\n* 程序模型：数据和函数分开。 \n* 抽象数据类型模型：数据和函数一起封装以来提供。\n* 面向对象模型：可通过一个抽象的base class封装起来，用以提供共同接口，需要付出的就是额外的间接性。\n> 虽然你可以直接或间接处理继承体系中的一个base class object,但只有通过pointer或reference的间接处理，才支持OO程序设计所需的多态性质。**c\\+\\+通过class的pointers和reference来支持多态，这种程序设计风格就称为面向对象**\n```\nLiberary_materials thing1;//基类\nBook book;//派生类\nthing1=book;\nthing1.check_in();//这种情况下，调用的是基类的check_in()\n```\n```\nLiberary_materials &thing2=book\nthing2.check_in();//这种情况下调用的才是book的check_in()\n```\n#### 2. C++以下列方法支持多态：\n* 1. 经由一组隐式的转化操作。例如把一个derived class指针转化为一个指向其public base type的指针\n```\n         shape *ps=new circle();\n```\n* 2. 经由virtual function机制\n```\n         ps->rotate();\n```\n* 3. 经由dynamic_cast和typeid运算符\n```\n         if(circle *pc=dynamic_cast<circle *>(ps))...\n```\n> **多态的主要用途是经由一个共同的接口来影响类型的封装**，这个接口通常被定义在一个抽象的base class中。这个共享接口是以virtual function机制引发的，它可以在执行期根据object的真正类型解析出到底是哪一个函数实体被调用。\n\n\n#### 3. 需要多少内存才能表现一个class object?\n* 其nonstatic data members的总和大小\n* 加上任何由于aliginment的需求而填补上去的空间(可能存在于members之间，也可能存在于集合体边界),aliginement就是将数值调整到某数的倍数，如在32位的计算机上为4。\n* 加上为了支持virtual而由内部产生的任何额外负担\n\n#### 4. 一个指针(引用)，不管它指向哪一种数据结构，指针本身所需的内存大小是固定的(一个机器字)。\n例如：一个指向ZooAnimal的指针是如何地与一个指向整数得指针或一个指向template Array的指针有所不同的呢？\n```\nZooAnimal *px;\nint *pi;\nArray<string> *pta;\n```\n以内存需求的观点来说，没有什么不同！它们三个都需要足够的内存来放置一个机器地址(通常是个word)。**“指向不同类型的各指针”间的差异，既不在其指针表示法不同，也不在其内容(代表一个地址)不同，而是在其所寻址出来的object类型不同**，也就是说，“指针类型”会教导编译器如何解释某个特定地址中的内存内容及其大小。\n\n#### 5.转型(cast)其实是一种编译器指令。\n大部分情况下它并不改变一个指针所含的真正地址，它只影响“被指出之内存大大小和其内容”的**解释方式**。\n> 如一个类型为void *的指针只能够持有一个地址，但不能 通过它操作所指object。\n\n#### 6.一个基类指针和其派生类指针有什么不同？（单一一层继承，且其都指向派生类对象）\n二者都指向基类对象的第一个byte,其间的差别是，派生类指针涵盖的地址包含整个派生类对象，而一个基类指针所涵盖的地址只包含派生类对象的基类子对象部分。\n> 但基类指针可以通过virtual机制访问派生类对象的函数。\n\n#### 7.当一个base class object被直接初始化为(或被指定为)一个derived class object时。 \nderived object就会被切割(sliced)以塞入较小的base type内存中，derived type将没有留下任何蛛丝马迹。多态于是不再呈现，而一个严格的编译器可以在编译器解析一个“通过此object而触发的virtual function调用操作”，因而回避virtual机制。如果virtual function被定义为inline，则更有效率上的大收获。\n\n#### 8.C++也支持具体的ADT程序风格，如今被称为object-based(OB)。\n一个OB设计可能比一个对等的OO设计速度更快而且空间更紧凑。速度快是因为所有的函数调用操作都在编译时期解析完成，对象构建起来时不需要设置virtual机制。空间紧凑是因为每一个class object不需要负担传统上为了支持virtual机制儿需要的额外负荷。不过，**OB设计比较没有弹性。**     \n在弹性（OO）和（OB）之间常常存在着取舍。一个人能够有效选择其一之前，必须先清楚了解两者的行为和应用领域的需求。","source":"_posts/深度探索c++对象模型/《深度探索c++对象模型》（一）.md","raw":"---\ntitle: 《深度探索c++对象模型》（一）关于对象\ndate: 2019-05-16 16:44:12\ntoc: true\ncomments: true\ntags:\n  - C++基础\ncategories:\n  - C++基础\n---\n\n看完《深度探索c\\++对象模型》，心中对c\\++编译器在编译期间所做的处理有了更深入的认识，我想，除了对编译器本身有深入认识的作者之外，应该很少有人对c\\++的对象模型有这么深的认识。能接触了这本书，是我们的幸运，是作者让我们有机会能一窥其貌，感谢作者。\n<!--more-->\n\n### 前述\n> 看完《深度探索c\\++对象模型》，心中对c\\++编译器在编译期间所做的处理有了更深入的认识，我想，除了对编译器本身有深入认识的作者之外，应该很少有人对c\\++的对象模型有这么深的认识。能接触了这本书，是我们的幸运，是作者让我们有机会能一窥其貌，感谢作者。\n\n> 其实第一遍读这本书，我的收获还不算多，这可能是我对c++的使用还不够多的缘故，但通过这本书，我以后使用c\\++的时候，就会心里有更多的底气，也会有更多需要注意的地方，在经过更多的实践之后，我一定还会回来拜读这本书的。\n\n> 现在，我想就本书所学到的的知识做一些总结。   \n\n------------------------------------\n参考书籍及链接：     《深度探索c\\+\\+对象模型》    \n\n------------------------------------\n## 一、关于对象\n#### 1. C++在加入封装后(只含有数据成员和普通成员函数）的布局成本增加了多少？  \n答案是并没有增加布局成本。就像C struct一样，memeber functions虽然含在class的声明之内，却不出现在object中。每一个non-inline member function只会诞生一个函数实体。至于每一个“拥有零个或一个定义的” inline function则会在其每一个使用者(模块)身上产生一个函数实体。\n\n#### 2. C++在布局以及存取时间上主要的额外负担是由virtual引起的，包括： \n   * virtual funciton机制，用以支持一个有效率的“执行期绑定”\n   * virtual base class，用以实现“多次出现在继承体系中的base class，有一个单一而被共享的实体”\n\n\n\n## 二、C++ 对象模式(The C++ Object Model)\n#### 1. 在C++中，有两种class data members：static 和 nonstatic，以及三种class member functions：static、nonstatic和virtual。\n\n#### 2. C++对象模型中，nonstatic data members被配置于每一个class object之内。\nstatic data members则被存放在所有的class object之外。static和nonstatic function members也被放在所有的class object之外。virtual function则以两个步骤支持之：\n   * 1. 每个class产生出一堆指向virtual functions的指针，放在表格之中。这个表格被称为virtual table(vtbl)\n   * 2. 每一个class object被安插一个指针，指向相关的virtual table。通常这个指针被称为vptr。vptr的设定和重置都由每一个class的constructor、destructor和copy assignment运算符自动完成。每一个class所关联的type_info object(用以支持runtime type identification, RTTI)也经由virtual table被指出来，通常放在表格的第一个slot处。  \n \n这个模型的主要优点在于它的空间和存取时间的效率。  \n主要缺点是：如果应用程序代码未曾改变，但所用到的class objects的nonstatic data members有所修改(有可能是增加、移除或更改)，那么应用程序代码同样得重新编译。\n\n#### 3.继承关系可以指定为虚拟(virtual，也就是共享的意思)：\n在虚拟继承的情况下，base class不管在继承链中被派生(derived)多少次，永远只会存在一个实例(称为subobject)。\n\n\n\n## 三、关键词带来的差异\n#### 1.什么时候一个人应该在c++程序中以struct取代class?\n答案之一是当他让人感觉比较好的时候。单独来看，关键词本身并不提供任何差异，c\\+\\+编译器对二者都提供了相同支持，我们可以认为支持struct只是为了方便将c程序迁移到c\\+\\+中。\n88\n#### 2.那为什么我们要引入class关键词？\n这是因为引入的不只是class这个关键词，更多的是它所支持的封装和继承的哲学。\n\n#### 3.怎么在c++中用好struct？\n将struct和class组合起来，组合，而非继承，才是把c和c++结合在一起的唯一可行的方法。另外，当你要传递“一个复杂的class object的全部或部分”到某个c函数去时，struct声明可以将数据封装起来，并保证拥有与c兼容的空间布局。\n\n## 四、对象的差异\n#### 1. C++程序设计模型直接支持三种程序设计典范（programming paradigms）：\n* 程序模型：数据和函数分开。 \n* 抽象数据类型模型：数据和函数一起封装以来提供。\n* 面向对象模型：可通过一个抽象的base class封装起来，用以提供共同接口，需要付出的就是额外的间接性。\n> 虽然你可以直接或间接处理继承体系中的一个base class object,但只有通过pointer或reference的间接处理，才支持OO程序设计所需的多态性质。**c\\+\\+通过class的pointers和reference来支持多态，这种程序设计风格就称为面向对象**\n```\nLiberary_materials thing1;//基类\nBook book;//派生类\nthing1=book;\nthing1.check_in();//这种情况下，调用的是基类的check_in()\n```\n```\nLiberary_materials &thing2=book\nthing2.check_in();//这种情况下调用的才是book的check_in()\n```\n#### 2. C++以下列方法支持多态：\n* 1. 经由一组隐式的转化操作。例如把一个derived class指针转化为一个指向其public base type的指针\n```\n         shape *ps=new circle();\n```\n* 2. 经由virtual function机制\n```\n         ps->rotate();\n```\n* 3. 经由dynamic_cast和typeid运算符\n```\n         if(circle *pc=dynamic_cast<circle *>(ps))...\n```\n> **多态的主要用途是经由一个共同的接口来影响类型的封装**，这个接口通常被定义在一个抽象的base class中。这个共享接口是以virtual function机制引发的，它可以在执行期根据object的真正类型解析出到底是哪一个函数实体被调用。\n\n\n#### 3. 需要多少内存才能表现一个class object?\n* 其nonstatic data members的总和大小\n* 加上任何由于aliginment的需求而填补上去的空间(可能存在于members之间，也可能存在于集合体边界),aliginement就是将数值调整到某数的倍数，如在32位的计算机上为4。\n* 加上为了支持virtual而由内部产生的任何额外负担\n\n#### 4. 一个指针(引用)，不管它指向哪一种数据结构，指针本身所需的内存大小是固定的(一个机器字)。\n例如：一个指向ZooAnimal的指针是如何地与一个指向整数得指针或一个指向template Array的指针有所不同的呢？\n```\nZooAnimal *px;\nint *pi;\nArray<string> *pta;\n```\n以内存需求的观点来说，没有什么不同！它们三个都需要足够的内存来放置一个机器地址(通常是个word)。**“指向不同类型的各指针”间的差异，既不在其指针表示法不同，也不在其内容(代表一个地址)不同，而是在其所寻址出来的object类型不同**，也就是说，“指针类型”会教导编译器如何解释某个特定地址中的内存内容及其大小。\n\n#### 5.转型(cast)其实是一种编译器指令。\n大部分情况下它并不改变一个指针所含的真正地址，它只影响“被指出之内存大大小和其内容”的**解释方式**。\n> 如一个类型为void *的指针只能够持有一个地址，但不能 通过它操作所指object。\n\n#### 6.一个基类指针和其派生类指针有什么不同？（单一一层继承，且其都指向派生类对象）\n二者都指向基类对象的第一个byte,其间的差别是，派生类指针涵盖的地址包含整个派生类对象，而一个基类指针所涵盖的地址只包含派生类对象的基类子对象部分。\n> 但基类指针可以通过virtual机制访问派生类对象的函数。\n\n#### 7.当一个base class object被直接初始化为(或被指定为)一个derived class object时。 \nderived object就会被切割(sliced)以塞入较小的base type内存中，derived type将没有留下任何蛛丝马迹。多态于是不再呈现，而一个严格的编译器可以在编译器解析一个“通过此object而触发的virtual function调用操作”，因而回避virtual机制。如果virtual function被定义为inline，则更有效率上的大收获。\n\n#### 8.C++也支持具体的ADT程序风格，如今被称为object-based(OB)。\n一个OB设计可能比一个对等的OO设计速度更快而且空间更紧凑。速度快是因为所有的函数调用操作都在编译时期解析完成，对象构建起来时不需要设置virtual机制。空间紧凑是因为每一个class object不需要负担传统上为了支持virtual机制儿需要的额外负荷。不过，**OB设计比较没有弹性。**     \n在弹性（OO）和（OB）之间常常存在着取舍。一个人能够有效选择其一之前，必须先清楚了解两者的行为和应用领域的需求。","slug":"深度探索c++对象模型/《深度探索c++对象模型》（一）","published":1,"updated":"2019-05-16T09:31:53.767Z","_id":"cjvqga0q7000279jx476yv24s","layout":"post","photos":[],"link":"","content":"<p>看完《深度探索c++对象模型》，心中对c++编译器在编译期间所做的处理有了更深入的认识，我想，除了对编译器本身有深入认识的作者之外，应该很少有人对c++的对象模型有这么深的认识。能接触了这本书，是我们的幸运，是作者让我们有机会能一窥其貌，感谢作者。<br><a id=\"more\"></a></p>\n<h3 id=\"前述\"><a href=\"#前述\" class=\"headerlink\" title=\"前述\"></a>前述</h3><blockquote>\n<p>看完《深度探索c++对象模型》，心中对c++编译器在编译期间所做的处理有了更深入的认识，我想，除了对编译器本身有深入认识的作者之外，应该很少有人对c++的对象模型有这么深的认识。能接触了这本书，是我们的幸运，是作者让我们有机会能一窥其貌，感谢作者。</p>\n</blockquote>\n<blockquote>\n<p>其实第一遍读这本书，我的收获还不算多，这可能是我对c++的使用还不够多的缘故，但通过这本书，我以后使用c++的时候，就会心里有更多的底气，也会有更多需要注意的地方，在经过更多的实践之后，我一定还会回来拜读这本书的。</p>\n</blockquote>\n<blockquote>\n<p>现在，我想就本书所学到的的知识做一些总结。   </p>\n</blockquote>\n<hr>\n<p>参考书籍及链接：     《深度探索c++对象模型》    </p>\n<hr>\n<h2 id=\"一、关于对象\"><a href=\"#一、关于对象\" class=\"headerlink\" title=\"一、关于对象\"></a>一、关于对象</h2><h4 id=\"1-C-在加入封装后-只含有数据成员和普通成员函数）的布局成本增加了多少？\"><a href=\"#1-C-在加入封装后-只含有数据成员和普通成员函数）的布局成本增加了多少？\" class=\"headerlink\" title=\"1. C++在加入封装后(只含有数据成员和普通成员函数）的布局成本增加了多少？\"></a>1. C++在加入封装后(只含有数据成员和普通成员函数）的布局成本增加了多少？</h4><p>答案是并没有增加布局成本。就像C struct一样，memeber functions虽然含在class的声明之内，却不出现在object中。每一个non-inline member function只会诞生一个函数实体。至于每一个“拥有零个或一个定义的” inline function则会在其每一个使用者(模块)身上产生一个函数实体。</p>\n<h4 id=\"2-C-在布局以及存取时间上主要的额外负担是由virtual引起的，包括：\"><a href=\"#2-C-在布局以及存取时间上主要的额外负担是由virtual引起的，包括：\" class=\"headerlink\" title=\"2. C++在布局以及存取时间上主要的额外负担是由virtual引起的，包括：\"></a>2. C++在布局以及存取时间上主要的额外负担是由virtual引起的，包括：</h4><ul>\n<li>virtual funciton机制，用以支持一个有效率的“执行期绑定”</li>\n<li>virtual base class，用以实现“多次出现在继承体系中的base class，有一个单一而被共享的实体”</li>\n</ul>\n<h2 id=\"二、C-对象模式-The-C-Object-Model\"><a href=\"#二、C-对象模式-The-C-Object-Model\" class=\"headerlink\" title=\"二、C++ 对象模式(The C++ Object Model)\"></a>二、C++ 对象模式(The C++ Object Model)</h2><h4 id=\"1-在C-中，有两种class-data-members：static-和-nonstatic，以及三种class-member-functions：static、nonstatic和virtual。\"><a href=\"#1-在C-中，有两种class-data-members：static-和-nonstatic，以及三种class-member-functions：static、nonstatic和virtual。\" class=\"headerlink\" title=\"1. 在C++中，有两种class data members：static 和 nonstatic，以及三种class member functions：static、nonstatic和virtual。\"></a>1. 在C++中，有两种class data members：static 和 nonstatic，以及三种class member functions：static、nonstatic和virtual。</h4><h4 id=\"2-C-对象模型中，nonstatic-data-members被配置于每一个class-object之内。\"><a href=\"#2-C-对象模型中，nonstatic-data-members被配置于每一个class-object之内。\" class=\"headerlink\" title=\"2. C++对象模型中，nonstatic data members被配置于每一个class object之内。\"></a>2. C++对象模型中，nonstatic data members被配置于每一个class object之内。</h4><p>static data members则被存放在所有的class object之外。static和nonstatic function members也被放在所有的class object之外。virtual function则以两个步骤支持之：</p>\n<ul>\n<li><ol>\n<li>每个class产生出一堆指向virtual functions的指针，放在表格之中。这个表格被称为virtual table(vtbl)</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>每一个class object被安插一个指针，指向相关的virtual table。通常这个指针被称为vptr。vptr的设定和重置都由每一个class的constructor、destructor和copy assignment运算符自动完成。每一个class所关联的type_info object(用以支持runtime type identification, RTTI)也经由virtual table被指出来，通常放在表格的第一个slot处。  </li>\n</ol>\n</li>\n</ul>\n<p>这个模型的主要优点在于它的空间和存取时间的效率。<br>主要缺点是：如果应用程序代码未曾改变，但所用到的class objects的nonstatic data members有所修改(有可能是增加、移除或更改)，那么应用程序代码同样得重新编译。</p>\n<h4 id=\"3-继承关系可以指定为虚拟-virtual，也就是共享的意思-：\"><a href=\"#3-继承关系可以指定为虚拟-virtual，也就是共享的意思-：\" class=\"headerlink\" title=\"3.继承关系可以指定为虚拟(virtual，也就是共享的意思)：\"></a>3.继承关系可以指定为虚拟(virtual，也就是共享的意思)：</h4><p>在虚拟继承的情况下，base class不管在继承链中被派生(derived)多少次，永远只会存在一个实例(称为subobject)。</p>\n<h2 id=\"三、关键词带来的差异\"><a href=\"#三、关键词带来的差异\" class=\"headerlink\" title=\"三、关键词带来的差异\"></a>三、关键词带来的差异</h2><h4 id=\"1-什么时候一个人应该在c-程序中以struct取代class\"><a href=\"#1-什么时候一个人应该在c-程序中以struct取代class\" class=\"headerlink\" title=\"1.什么时候一个人应该在c++程序中以struct取代class?\"></a>1.什么时候一个人应该在c++程序中以struct取代class?</h4><p>答案之一是当他让人感觉比较好的时候。单独来看，关键词本身并不提供任何差异，c++编译器对二者都提供了相同支持，我们可以认为支持struct只是为了方便将c程序迁移到c++中。<br>88</p>\n<h4 id=\"2-那为什么我们要引入class关键词？\"><a href=\"#2-那为什么我们要引入class关键词？\" class=\"headerlink\" title=\"2.那为什么我们要引入class关键词？\"></a>2.那为什么我们要引入class关键词？</h4><p>这是因为引入的不只是class这个关键词，更多的是它所支持的封装和继承的哲学。</p>\n<h4 id=\"3-怎么在c-中用好struct？\"><a href=\"#3-怎么在c-中用好struct？\" class=\"headerlink\" title=\"3.怎么在c++中用好struct？\"></a>3.怎么在c++中用好struct？</h4><p>将struct和class组合起来，组合，而非继承，才是把c和c++结合在一起的唯一可行的方法。另外，当你要传递“一个复杂的class object的全部或部分”到某个c函数去时，struct声明可以将数据封装起来，并保证拥有与c兼容的空间布局。</p>\n<h2 id=\"四、对象的差异\"><a href=\"#四、对象的差异\" class=\"headerlink\" title=\"四、对象的差异\"></a>四、对象的差异</h2><h4 id=\"1-C-程序设计模型直接支持三种程序设计典范（programming-paradigms）：\"><a href=\"#1-C-程序设计模型直接支持三种程序设计典范（programming-paradigms）：\" class=\"headerlink\" title=\"1. C++程序设计模型直接支持三种程序设计典范（programming paradigms）：\"></a>1. C++程序设计模型直接支持三种程序设计典范（programming paradigms）：</h4><ul>\n<li>程序模型：数据和函数分开。 </li>\n<li>抽象数据类型模型：数据和函数一起封装以来提供。</li>\n<li>面向对象模型：可通过一个抽象的base class封装起来，用以提供共同接口，需要付出的就是额外的间接性。<blockquote>\n<p>虽然你可以直接或间接处理继承体系中的一个base class object,但只有通过pointer或reference的间接处理，才支持OO程序设计所需的多态性质。<strong>c++通过class的pointers和reference来支持多态，这种程序设计风格就称为面向对象</strong></p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Liberary_materials thing1<span class=\"comment\">;//基类</span></span><br><span class=\"line\">Book book<span class=\"comment\">;//派生类</span></span><br><span class=\"line\"><span class=\"attribute\">thing1</span>=book<span class=\"comment\">;</span></span><br><span class=\"line\">thing1.check_in()<span class=\"comment\">;//这种情况下，调用的是基类的check_in()</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Liberary_materials <span class=\"meta\">&amp;thing2=book</span></span><br><span class=\"line\">thing2.check_in();<span class=\"comment\">//这种情况下调用的才是book的check_in()</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-C-以下列方法支持多态：\"><a href=\"#2-C-以下列方法支持多态：\" class=\"headerlink\" title=\"2. C++以下列方法支持多态：\"></a>2. C++以下列方法支持多态：</h4><ul>\n<li><ol>\n<li>经由一组隐式的转化操作。例如把一个derived class指针转化为一个指向其public base type的指针<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shape *ps=<span class=\"keyword\">new</span> <span class=\"built_in\">circle</span>();</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>经由virtual function机制<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">ps</span>-&gt;</span>rotate();</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>经由dynamic_cast和typeid运算符<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">if</span>(<span class=\"built_in\">circle</span> *pc=<span class=\"keyword\">dynamic_cast</span>&lt;<span class=\"built_in\">circle</span> *&gt;(ps))...</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p><strong>多态的主要用途是经由一个共同的接口来影响类型的封装</strong>，这个接口通常被定义在一个抽象的base class中。这个共享接口是以virtual function机制引发的，它可以在执行期根据object的真正类型解析出到底是哪一个函数实体被调用。</p>\n</blockquote>\n<h4 id=\"3-需要多少内存才能表现一个class-object\"><a href=\"#3-需要多少内存才能表现一个class-object\" class=\"headerlink\" title=\"3. 需要多少内存才能表现一个class object?\"></a>3. 需要多少内存才能表现一个class object?</h4><ul>\n<li>其nonstatic data members的总和大小</li>\n<li>加上任何由于aliginment的需求而填补上去的空间(可能存在于members之间，也可能存在于集合体边界),aliginement就是将数值调整到某数的倍数，如在32位的计算机上为4。</li>\n<li>加上为了支持virtual而由内部产生的任何额外负担</li>\n</ul>\n<h4 id=\"4-一个指针-引用-，不管它指向哪一种数据结构，指针本身所需的内存大小是固定的-一个机器字-。\"><a href=\"#4-一个指针-引用-，不管它指向哪一种数据结构，指针本身所需的内存大小是固定的-一个机器字-。\" class=\"headerlink\" title=\"4. 一个指针(引用)，不管它指向哪一种数据结构，指针本身所需的内存大小是固定的(一个机器字)。\"></a>4. 一个指针(引用)，不管它指向哪一种数据结构，指针本身所需的内存大小是固定的(一个机器字)。</h4><p>例如：一个指向ZooAnimal的指针是如何地与一个指向整数得指针或一个指向template Array的指针有所不同的呢？<br><figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZooAnimal *px<span class=\"comment\">;</span></span><br><span class=\"line\">int *pi<span class=\"comment\">;</span></span><br><span class=\"line\">Array&lt;string&gt; *pta<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure></p>\n<p>以内存需求的观点来说，没有什么不同！它们三个都需要足够的内存来放置一个机器地址(通常是个word)。<strong>“指向不同类型的各指针”间的差异，既不在其指针表示法不同，也不在其内容(代表一个地址)不同，而是在其所寻址出来的object类型不同</strong>，也就是说，“指针类型”会教导编译器如何解释某个特定地址中的内存内容及其大小。</p>\n<h4 id=\"5-转型-cast-其实是一种编译器指令。\"><a href=\"#5-转型-cast-其实是一种编译器指令。\" class=\"headerlink\" title=\"5.转型(cast)其实是一种编译器指令。\"></a>5.转型(cast)其实是一种编译器指令。</h4><p>大部分情况下它并不改变一个指针所含的真正地址，它只影响“被指出之内存大大小和其内容”的<strong>解释方式</strong>。</p>\n<blockquote>\n<p>如一个类型为void *的指针只能够持有一个地址，但不能 通过它操作所指object。</p>\n</blockquote>\n<h4 id=\"6-一个基类指针和其派生类指针有什么不同？（单一一层继承，且其都指向派生类对象）\"><a href=\"#6-一个基类指针和其派生类指针有什么不同？（单一一层继承，且其都指向派生类对象）\" class=\"headerlink\" title=\"6.一个基类指针和其派生类指针有什么不同？（单一一层继承，且其都指向派生类对象）\"></a>6.一个基类指针和其派生类指针有什么不同？（单一一层继承，且其都指向派生类对象）</h4><p>二者都指向基类对象的第一个byte,其间的差别是，派生类指针涵盖的地址包含整个派生类对象，而一个基类指针所涵盖的地址只包含派生类对象的基类子对象部分。</p>\n<blockquote>\n<p>但基类指针可以通过virtual机制访问派生类对象的函数。</p>\n</blockquote>\n<h4 id=\"7-当一个base-class-object被直接初始化为-或被指定为-一个derived-class-object时。\"><a href=\"#7-当一个base-class-object被直接初始化为-或被指定为-一个derived-class-object时。\" class=\"headerlink\" title=\"7.当一个base class object被直接初始化为(或被指定为)一个derived class object时。\"></a>7.当一个base class object被直接初始化为(或被指定为)一个derived class object时。</h4><p>derived object就会被切割(sliced)以塞入较小的base type内存中，derived type将没有留下任何蛛丝马迹。多态于是不再呈现，而一个严格的编译器可以在编译器解析一个“通过此object而触发的virtual function调用操作”，因而回避virtual机制。如果virtual function被定义为inline，则更有效率上的大收获。</p>\n<h4 id=\"8-C-也支持具体的ADT程序风格，如今被称为object-based-OB-。\"><a href=\"#8-C-也支持具体的ADT程序风格，如今被称为object-based-OB-。\" class=\"headerlink\" title=\"8.C++也支持具体的ADT程序风格，如今被称为object-based(OB)。\"></a>8.C++也支持具体的ADT程序风格，如今被称为object-based(OB)。</h4><p>一个OB设计可能比一个对等的OO设计速度更快而且空间更紧凑。速度快是因为所有的函数调用操作都在编译时期解析完成，对象构建起来时不需要设置virtual机制。空间紧凑是因为每一个class object不需要负担传统上为了支持virtual机制儿需要的额外负荷。不过，<strong>OB设计比较没有弹性。</strong><br>在弹性（OO）和（OB）之间常常存在着取舍。一个人能够有效选择其一之前，必须先清楚了解两者的行为和应用领域的需求。</p>\n","site":{"data":{}},"excerpt":"<p>看完《深度探索c++对象模型》，心中对c++编译器在编译期间所做的处理有了更深入的认识，我想，除了对编译器本身有深入认识的作者之外，应该很少有人对c++的对象模型有这么深的认识。能接触了这本书，是我们的幸运，是作者让我们有机会能一窥其貌，感谢作者。<br>","more":"</p>\n<h3 id=\"前述\"><a href=\"#前述\" class=\"headerlink\" title=\"前述\"></a>前述</h3><blockquote>\n<p>看完《深度探索c++对象模型》，心中对c++编译器在编译期间所做的处理有了更深入的认识，我想，除了对编译器本身有深入认识的作者之外，应该很少有人对c++的对象模型有这么深的认识。能接触了这本书，是我们的幸运，是作者让我们有机会能一窥其貌，感谢作者。</p>\n</blockquote>\n<blockquote>\n<p>其实第一遍读这本书，我的收获还不算多，这可能是我对c++的使用还不够多的缘故，但通过这本书，我以后使用c++的时候，就会心里有更多的底气，也会有更多需要注意的地方，在经过更多的实践之后，我一定还会回来拜读这本书的。</p>\n</blockquote>\n<blockquote>\n<p>现在，我想就本书所学到的的知识做一些总结。   </p>\n</blockquote>\n<hr>\n<p>参考书籍及链接：     《深度探索c++对象模型》    </p>\n<hr>\n<h2 id=\"一、关于对象\"><a href=\"#一、关于对象\" class=\"headerlink\" title=\"一、关于对象\"></a>一、关于对象</h2><h4 id=\"1-C-在加入封装后-只含有数据成员和普通成员函数）的布局成本增加了多少？\"><a href=\"#1-C-在加入封装后-只含有数据成员和普通成员函数）的布局成本增加了多少？\" class=\"headerlink\" title=\"1. C++在加入封装后(只含有数据成员和普通成员函数）的布局成本增加了多少？\"></a>1. C++在加入封装后(只含有数据成员和普通成员函数）的布局成本增加了多少？</h4><p>答案是并没有增加布局成本。就像C struct一样，memeber functions虽然含在class的声明之内，却不出现在object中。每一个non-inline member function只会诞生一个函数实体。至于每一个“拥有零个或一个定义的” inline function则会在其每一个使用者(模块)身上产生一个函数实体。</p>\n<h4 id=\"2-C-在布局以及存取时间上主要的额外负担是由virtual引起的，包括：\"><a href=\"#2-C-在布局以及存取时间上主要的额外负担是由virtual引起的，包括：\" class=\"headerlink\" title=\"2. C++在布局以及存取时间上主要的额外负担是由virtual引起的，包括：\"></a>2. C++在布局以及存取时间上主要的额外负担是由virtual引起的，包括：</h4><ul>\n<li>virtual funciton机制，用以支持一个有效率的“执行期绑定”</li>\n<li>virtual base class，用以实现“多次出现在继承体系中的base class，有一个单一而被共享的实体”</li>\n</ul>\n<h2 id=\"二、C-对象模式-The-C-Object-Model\"><a href=\"#二、C-对象模式-The-C-Object-Model\" class=\"headerlink\" title=\"二、C++ 对象模式(The C++ Object Model)\"></a>二、C++ 对象模式(The C++ Object Model)</h2><h4 id=\"1-在C-中，有两种class-data-members：static-和-nonstatic，以及三种class-member-functions：static、nonstatic和virtual。\"><a href=\"#1-在C-中，有两种class-data-members：static-和-nonstatic，以及三种class-member-functions：static、nonstatic和virtual。\" class=\"headerlink\" title=\"1. 在C++中，有两种class data members：static 和 nonstatic，以及三种class member functions：static、nonstatic和virtual。\"></a>1. 在C++中，有两种class data members：static 和 nonstatic，以及三种class member functions：static、nonstatic和virtual。</h4><h4 id=\"2-C-对象模型中，nonstatic-data-members被配置于每一个class-object之内。\"><a href=\"#2-C-对象模型中，nonstatic-data-members被配置于每一个class-object之内。\" class=\"headerlink\" title=\"2. C++对象模型中，nonstatic data members被配置于每一个class object之内。\"></a>2. C++对象模型中，nonstatic data members被配置于每一个class object之内。</h4><p>static data members则被存放在所有的class object之外。static和nonstatic function members也被放在所有的class object之外。virtual function则以两个步骤支持之：</p>\n<ul>\n<li><ol>\n<li>每个class产生出一堆指向virtual functions的指针，放在表格之中。这个表格被称为virtual table(vtbl)</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>每一个class object被安插一个指针，指向相关的virtual table。通常这个指针被称为vptr。vptr的设定和重置都由每一个class的constructor、destructor和copy assignment运算符自动完成。每一个class所关联的type_info object(用以支持runtime type identification, RTTI)也经由virtual table被指出来，通常放在表格的第一个slot处。  </li>\n</ol>\n</li>\n</ul>\n<p>这个模型的主要优点在于它的空间和存取时间的效率。<br>主要缺点是：如果应用程序代码未曾改变，但所用到的class objects的nonstatic data members有所修改(有可能是增加、移除或更改)，那么应用程序代码同样得重新编译。</p>\n<h4 id=\"3-继承关系可以指定为虚拟-virtual，也就是共享的意思-：\"><a href=\"#3-继承关系可以指定为虚拟-virtual，也就是共享的意思-：\" class=\"headerlink\" title=\"3.继承关系可以指定为虚拟(virtual，也就是共享的意思)：\"></a>3.继承关系可以指定为虚拟(virtual，也就是共享的意思)：</h4><p>在虚拟继承的情况下，base class不管在继承链中被派生(derived)多少次，永远只会存在一个实例(称为subobject)。</p>\n<h2 id=\"三、关键词带来的差异\"><a href=\"#三、关键词带来的差异\" class=\"headerlink\" title=\"三、关键词带来的差异\"></a>三、关键词带来的差异</h2><h4 id=\"1-什么时候一个人应该在c-程序中以struct取代class\"><a href=\"#1-什么时候一个人应该在c-程序中以struct取代class\" class=\"headerlink\" title=\"1.什么时候一个人应该在c++程序中以struct取代class?\"></a>1.什么时候一个人应该在c++程序中以struct取代class?</h4><p>答案之一是当他让人感觉比较好的时候。单独来看，关键词本身并不提供任何差异，c++编译器对二者都提供了相同支持，我们可以认为支持struct只是为了方便将c程序迁移到c++中。<br>88</p>\n<h4 id=\"2-那为什么我们要引入class关键词？\"><a href=\"#2-那为什么我们要引入class关键词？\" class=\"headerlink\" title=\"2.那为什么我们要引入class关键词？\"></a>2.那为什么我们要引入class关键词？</h4><p>这是因为引入的不只是class这个关键词，更多的是它所支持的封装和继承的哲学。</p>\n<h4 id=\"3-怎么在c-中用好struct？\"><a href=\"#3-怎么在c-中用好struct？\" class=\"headerlink\" title=\"3.怎么在c++中用好struct？\"></a>3.怎么在c++中用好struct？</h4><p>将struct和class组合起来，组合，而非继承，才是把c和c++结合在一起的唯一可行的方法。另外，当你要传递“一个复杂的class object的全部或部分”到某个c函数去时，struct声明可以将数据封装起来，并保证拥有与c兼容的空间布局。</p>\n<h2 id=\"四、对象的差异\"><a href=\"#四、对象的差异\" class=\"headerlink\" title=\"四、对象的差异\"></a>四、对象的差异</h2><h4 id=\"1-C-程序设计模型直接支持三种程序设计典范（programming-paradigms）：\"><a href=\"#1-C-程序设计模型直接支持三种程序设计典范（programming-paradigms）：\" class=\"headerlink\" title=\"1. C++程序设计模型直接支持三种程序设计典范（programming paradigms）：\"></a>1. C++程序设计模型直接支持三种程序设计典范（programming paradigms）：</h4><ul>\n<li>程序模型：数据和函数分开。 </li>\n<li>抽象数据类型模型：数据和函数一起封装以来提供。</li>\n<li>面向对象模型：可通过一个抽象的base class封装起来，用以提供共同接口，需要付出的就是额外的间接性。<blockquote>\n<p>虽然你可以直接或间接处理继承体系中的一个base class object,但只有通过pointer或reference的间接处理，才支持OO程序设计所需的多态性质。<strong>c++通过class的pointers和reference来支持多态，这种程序设计风格就称为面向对象</strong></p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Liberary_materials thing1<span class=\"comment\">;//基类</span></span><br><span class=\"line\">Book book<span class=\"comment\">;//派生类</span></span><br><span class=\"line\"><span class=\"attribute\">thing1</span>=book<span class=\"comment\">;</span></span><br><span class=\"line\">thing1.check_in()<span class=\"comment\">;//这种情况下，调用的是基类的check_in()</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Liberary_materials <span class=\"meta\">&amp;thing2=book</span></span><br><span class=\"line\">thing2.check_in();<span class=\"comment\">//这种情况下调用的才是book的check_in()</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-C-以下列方法支持多态：\"><a href=\"#2-C-以下列方法支持多态：\" class=\"headerlink\" title=\"2. C++以下列方法支持多态：\"></a>2. C++以下列方法支持多态：</h4><ul>\n<li><ol>\n<li>经由一组隐式的转化操作。例如把一个derived class指针转化为一个指向其public base type的指针<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shape *ps=<span class=\"keyword\">new</span> <span class=\"built_in\">circle</span>();</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>经由virtual function机制<figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">ps</span>-&gt;</span>rotate();</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>经由dynamic_cast和typeid运算符<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">if</span>(<span class=\"built_in\">circle</span> *pc=<span class=\"keyword\">dynamic_cast</span>&lt;<span class=\"built_in\">circle</span> *&gt;(ps))...</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p><strong>多态的主要用途是经由一个共同的接口来影响类型的封装</strong>，这个接口通常被定义在一个抽象的base class中。这个共享接口是以virtual function机制引发的，它可以在执行期根据object的真正类型解析出到底是哪一个函数实体被调用。</p>\n</blockquote>\n<h4 id=\"3-需要多少内存才能表现一个class-object\"><a href=\"#3-需要多少内存才能表现一个class-object\" class=\"headerlink\" title=\"3. 需要多少内存才能表现一个class object?\"></a>3. 需要多少内存才能表现一个class object?</h4><ul>\n<li>其nonstatic data members的总和大小</li>\n<li>加上任何由于aliginment的需求而填补上去的空间(可能存在于members之间，也可能存在于集合体边界),aliginement就是将数值调整到某数的倍数，如在32位的计算机上为4。</li>\n<li>加上为了支持virtual而由内部产生的任何额外负担</li>\n</ul>\n<h4 id=\"4-一个指针-引用-，不管它指向哪一种数据结构，指针本身所需的内存大小是固定的-一个机器字-。\"><a href=\"#4-一个指针-引用-，不管它指向哪一种数据结构，指针本身所需的内存大小是固定的-一个机器字-。\" class=\"headerlink\" title=\"4. 一个指针(引用)，不管它指向哪一种数据结构，指针本身所需的内存大小是固定的(一个机器字)。\"></a>4. 一个指针(引用)，不管它指向哪一种数据结构，指针本身所需的内存大小是固定的(一个机器字)。</h4><p>例如：一个指向ZooAnimal的指针是如何地与一个指向整数得指针或一个指向template Array的指针有所不同的呢？<br><figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZooAnimal *px<span class=\"comment\">;</span></span><br><span class=\"line\">int *pi<span class=\"comment\">;</span></span><br><span class=\"line\">Array&lt;string&gt; *pta<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure></p>\n<p>以内存需求的观点来说，没有什么不同！它们三个都需要足够的内存来放置一个机器地址(通常是个word)。<strong>“指向不同类型的各指针”间的差异，既不在其指针表示法不同，也不在其内容(代表一个地址)不同，而是在其所寻址出来的object类型不同</strong>，也就是说，“指针类型”会教导编译器如何解释某个特定地址中的内存内容及其大小。</p>\n<h4 id=\"5-转型-cast-其实是一种编译器指令。\"><a href=\"#5-转型-cast-其实是一种编译器指令。\" class=\"headerlink\" title=\"5.转型(cast)其实是一种编译器指令。\"></a>5.转型(cast)其实是一种编译器指令。</h4><p>大部分情况下它并不改变一个指针所含的真正地址，它只影响“被指出之内存大大小和其内容”的<strong>解释方式</strong>。</p>\n<blockquote>\n<p>如一个类型为void *的指针只能够持有一个地址，但不能 通过它操作所指object。</p>\n</blockquote>\n<h4 id=\"6-一个基类指针和其派生类指针有什么不同？（单一一层继承，且其都指向派生类对象）\"><a href=\"#6-一个基类指针和其派生类指针有什么不同？（单一一层继承，且其都指向派生类对象）\" class=\"headerlink\" title=\"6.一个基类指针和其派生类指针有什么不同？（单一一层继承，且其都指向派生类对象）\"></a>6.一个基类指针和其派生类指针有什么不同？（单一一层继承，且其都指向派生类对象）</h4><p>二者都指向基类对象的第一个byte,其间的差别是，派生类指针涵盖的地址包含整个派生类对象，而一个基类指针所涵盖的地址只包含派生类对象的基类子对象部分。</p>\n<blockquote>\n<p>但基类指针可以通过virtual机制访问派生类对象的函数。</p>\n</blockquote>\n<h4 id=\"7-当一个base-class-object被直接初始化为-或被指定为-一个derived-class-object时。\"><a href=\"#7-当一个base-class-object被直接初始化为-或被指定为-一个derived-class-object时。\" class=\"headerlink\" title=\"7.当一个base class object被直接初始化为(或被指定为)一个derived class object时。\"></a>7.当一个base class object被直接初始化为(或被指定为)一个derived class object时。</h4><p>derived object就会被切割(sliced)以塞入较小的base type内存中，derived type将没有留下任何蛛丝马迹。多态于是不再呈现，而一个严格的编译器可以在编译器解析一个“通过此object而触发的virtual function调用操作”，因而回避virtual机制。如果virtual function被定义为inline，则更有效率上的大收获。</p>\n<h4 id=\"8-C-也支持具体的ADT程序风格，如今被称为object-based-OB-。\"><a href=\"#8-C-也支持具体的ADT程序风格，如今被称为object-based-OB-。\" class=\"headerlink\" title=\"8.C++也支持具体的ADT程序风格，如今被称为object-based(OB)。\"></a>8.C++也支持具体的ADT程序风格，如今被称为object-based(OB)。</h4><p>一个OB设计可能比一个对等的OO设计速度更快而且空间更紧凑。速度快是因为所有的函数调用操作都在编译时期解析完成，对象构建起来时不需要设置virtual机制。空间紧凑是因为每一个class object不需要负担传统上为了支持virtual机制儿需要的额外负荷。不过，<strong>OB设计比较没有弹性。</strong><br>在弹性（OO）和（OB）之间常常存在着取舍。一个人能够有效选择其一之前，必须先清楚了解两者的行为和应用领域的需求。</p>"},{"title":"《深度探索c++对象模型》（七）站在对象模型的顶端","date":"2019-05-16T08:44:12.000Z","toc":true,"comments":1,"_content":"\n本章的的主题是站在对象模型的尖端，套路哦三个著名的c\\+\\+语言扩充性质，它们都会影响c\\+\\+对象，他们分别是exception handling（EH）、template support、runtime type identification(RTTI)。\n<!--more-->\n\n\n### 前述\n> 本章的的主题是站在对象模型的尖端，套路哦三个著名的c\\+\\+语言扩充性质，它们都会影响c\\+\\+对象，他们分别是exception handling（EH）、template support、runtime type identification(RTTI)。\n------------------------------------\n## 一、Template\n这一节的焦点放在template的语意上面，我们将讨论templates在编译系统中“何时”，“为什么”以及“如何”发挥其功能。下面是有关template的三个主要讨论方向：\n* template的声明，基本上来说就是当你声明一个template class、template class member function等等，会发生什么事情。\n* 如何\"实例化\"class object、inline nonmember以及member template functions，这些是\"每一个编译单元都会拥有的一份实体\"的东西。\n* 如何“实例化”出nonmember、member templates functions以及static template class members，这些都是\"每一个可执行文件中只需要一份实体\"的东西，这也就是一般而言template所带来的问题。\n\n#### 1.template的“实例化”行为\n对于如下template class:\n```\ntemplate<class Type>\nclass Point\n{\npublic:\n    enum Status { unallocated, normalized };\n    \n    Point(Type x = 0.0, Type y = 0.0, Type z = 0.0);\n    ~Point();\n    \n    void *operator new(size_t );\n    void operator delete(void *, size_t );\n    //...\nprivate:\n    static Point<Type> *freeList;\n    static int chunkSize;\n    Type _x, _y, _z;\n};\n```\n编译器对于template class会根据type的不同而产生不同的实例class。\n* enum Status、freeList、chunkSize以及object都必须进行实例化，如```Point<double>::freeList; ```,而不能是```Point::freeList; ```。\n* 定义一个指针，指向特定的实例。例如``` Point<float> *ptr=0;```因为一个指向class object的指针，本身并不是一个class object，编译器不需要知道与该class有关的任何member的数据或object的布局数据。所以不需要实例化。\n* 定义一个reference,例如```Point<float> &refer=0; ```就需要产生一个Point的float实例。\n\n\n#### 2.member function需要实例化吗？\nmember functions(至少对于那些未被使用过的)不应该被“实体”化，只有在member functions被使用的时候，C++ Standard才要求它们被“实例化”。当前的编译器并不精 确遵循这项要求，之所以由使用者来主导“具现”规则，有两个主要原因：\n* 空间和时间效率的考虑。如果class中有100个member functions，但你的程序只针对某个类型使用其中两个，针对另一个类型使用其中5个，那么其他193个函数都“具现”将花费大量的时间和空间。\n* 尚未实现的功能，并不是一个template实例化的所有类型就一定能够支持一组member functions所需要的所有运算符。如果只“具现”那些真正用到的memeber functions，template就能够支持那些原本可能会造成编译时期错误的类型(types)。\n\n#### 3.template的错误报告。\n目前的编译器，面对一个template声明，在它被一组实际参数实例化之前，只能施行以有限的错误检查。template中那些与语法无关的错误，程序员可能认为十分明显，编译器却让它通过了，只有在特定实例被定义之后，才能发出抱怨。这是目前实现技术上的一个大问题。\n\n#### 4.Template中的名称决议法。\nTemplate有两种语境，一种是C++ Standard所谓的\"Scope of the template definition\"，也就是“定义出template”的程序。另一种是C++ Standard所谓的\"scope of the template instantiation\"，也就是说“具现出template”的程序。        \nTemplate之中，对于一个nonmember name的决议结果，是根据这个name的使用是否与“用以实例化该template的参数类型”有关而设定的。如果其使用互不相关，那么就以“scope of the template declaration”来决定name。如果其使用互有关联，那么就以“scope of template instantiation”来决定name。例如：\n```\n//scope of the template definition\nextern double foo(double); \n\ntemplate<class type>\nclass ScopeRules{\npublic:\n    void invariant() { _member = foo(val); }\n    type type_dependent() {return foo(_member);}\n    //...\nprivate:\n    int _val;\n    type _member;\n};\n\n//scope of the template instantiation\nextern int foo(int);\n//...\nScopeRultes<int> sr0;\n```\n* 对于```sr0.invariant(); ```由于被用来实例化这个template的真正类型，对于 \\_val的类型并没有影响。所以选中``` extern double foo(double); ```\n* 对于```sr0.type_dependent(); ```\\_member与template参数有关,所以选中的foo()跟参数有关,所以选中```extern int foo(int);```。\n\n#### 5.Member function的实例化行为。\n对于template的支持，最困难的莫过于template function的实例化，目前的编译器提供了 两个策略：一个是编译时期策略，程序代码必须在program text file中备妥可用；另一个是链接时期策略，程序代码必须在meta-compliation工具可以导引编译器的实例化行为(instantiation)。       \n下面是编译器设计者必须回答的三个主要问题：\n* （1）编译器如何找出函数的定义？     \n答案之一是包含template program text file，就好像它是个header文件一样，Borland编译器就是遵循这个策略。另一种方法是要求一个文件命名规则，例如，我们可以要求，在Point.h文件中发现的函数声明，其template program text一定要放置于文件Point.c或者Point.cpp中，以此类推。cfront就是遵循这个策略。Edison Desigin Group编译器对此两种策略都支持。\n* （2）编译器如何能够只实例化出程序中用到的member functions?     \n解决办法之一就是，根本忽略这项要求，把一个已经具现出来的class的所有member functions都产生出来。Borland就是这么做的——虽然它也提供#pragmas让你压制(或具现出)特定实体。另一种策略就是仿真链接操作，检测看看哪一个函数真正需要，然后只为它(们)产生实体。cfront就是这么做的，Edison Design Group编译器对此两种策略都支持。\n* （3）编译器如何阻止member definitions在多个.o文件中都被实例化呢?       \n解决办法之一是产生多个实体，然后从链接器中提供支持，只留下其中一个实体，其余都忽略。另外一个办法就是由使用者来导引“仿真链接阶段”的实例化策略，决定哪些实体(instances)才是所需求的。\n\n实际上，template instantiation似乎拒绝全面自动化，甚至居然没意见工作都对了，产生出来的object files的重新编译成本仍然可能很高。**以手动方式先在个别的object module中完成预先实例化操作，虽然沉闷，却是唯一有效率的方法。**\n\n## 二、异常处理\n#### 1.编译对异常处理的支持\n欲支持exception handling，编译器的主要工作就是找出catch子句，以处理被丢出来的exception。这多少需要追踪程序堆栈中的每一个函数当前作用区域(包括追踪函数中的local class objects当时的情况)。同时，编译器必须提供某种查询exception objects的方法，以知道其实际类型(这直接导致某种形式的执行期识别，也就是RTTI)。最后，还需要某种机制用以管理被丢出的object，包括它的产生、储存、可能的解构(如果有相关的destructor)、清理(clean up)以及一般存取，也可能有一个以上的objects同时起作用。      \n\n一般而言，exception handling机制需要与编译器所产生的数据结构以及执行期的一个exception library紧密合作，在程序大小和执行速度之间，编译器必须有所抉择：\n* 为了维持执行速度，编译器可以在编译时期建立起用于支持的数据结构，这会使程序大小膨胀，但编译器可以几乎忽略这些结构，直到有个exception被丢出来。\n* 为了维持程序大小，编译器可以在执行期建立起用于支持的数据结构。这会影响程序的执行速度，但意味着编译器只有在必要的时候才建立那些数据结构(并且可以抛弃之)。\n\n#### 2.Exception Handling 快速检阅\nC++的exception handing由三个主要的语汇组件构成：\n* 一个throw子句。它在程序某处发出一个exception。被抛出去的expection可以是內建类型，也可以是使用者自定类型。\n* 一个或多个catch子句。每一个catch子句都是一个exception handler。它用来表示说，这个子句准备处理某种类型的exception，并且在封闭的大括号区段中提供实际的处理程序\n* 一个try区段。它被围绕以一系列的叙述句(statements)，这些叙述句可能会引发catch子句起作用  \n\n当一个exception被丢出去时，控制权会从函数调用中被释放出来，并寻找一个吻合的catch子句。如果都没有吻合者，那么默认的处理例程terminate()会被调用。当控制权被抛弃后，堆栈中的每一个函数调用也就被推离(popped up)，这个程序称为unwinding the stack。**在每一个函数被推离堆栈之前，函数的local class objects的destructor会被调用。**\n\n#### 3.对Exception Handling的支持\n当一个exception发生时，编译系统必须完成以下事情：    \n（1）检验发生throw操作的函数；   \n（2）决定throw操场是否发生在try区段中；   \n（3）若是，编译系统必须把exception type拿来和每一个catch子句比较；   \n（4）如果比较吻合，流程控制应该交到catch子句手中；    \n（5）如果throw的发生并不在try区段中，并没有一个catch子句吻合，那么系统必须(a)摧毁所有active local objects，(b)从堆栈中将当前的函数\"unwind\"掉，(c)进行到程序堆栈中的下一个函数中去，然后重复上述步骤2~5\n\n\n#### 4.当一个实际对象在程序执行时被丢出，会发生什么事？\n当一个exception被丢出时，exception object会被产生出来并通常放置在相同形式的exception数据堆栈中，从throw端传染给catch子句的是exception object的地址、类型描述器(或是一个函数指针，该函数会传回与该exception type有关的类型描述器对象)，以及可能会有的exception object描述器(如果有人定义它的话)。\n\n\n## 三、执行器类型识别（RTTI）\nRTTI是用于支持EH而获得的副产品，主要目的是处理和识别throw的object类型。\n#### 1.Type-Safe Downcast(保证安全的向下转型操作)\n一个type\\-safe downcast(保证安全地向下转换操作)必须在执行期对指针有所查询，看看它是否指向它所展现(表达)之object的真正类型。因此，欲支持type-safe downcast在object空间和执行时间上都需要一些额外的负担：\n* 需要额外的空间以存储类型信息(type information)，通常是一个指针，指向某个类型信息节点\n* 需要额外的时间以决定执行期的类型(runtime type)，因为，正如其名所示，这需要再执行期才能决定。\n\nc\\+\\+的RTTI机制提供了一个安全的downcast设备,但只对那些展现“多态”的类型有效。c\\+\\+中，一个具备多态性质的class，正式内含着继承而来的virtual function。\n\n#### 2.Type-Safe Dynamic cast(保证安全的动态转型)\ndynamic\\_cast运算符可以在执行期决定真正的类型。如果downcast是安全的，这个运算符会传回被适当转换过的指针。如果downcast不是安全地，这个运算符会传回0.\n\n#### 3.References并不是Pointers\n程序中对一个class指针类型施以dynamic_cast运算符，会获得true或false：\n* 如果传回真正的地址，表示这个object的动态类型被确认了，一些与类型相关的操作现在可以施行于其上。\n* 如果传回0，表示没有指向任何object，意味应该以另一种逻辑施行于这个动态类型未确定的object身上。\n\ndynamic_cast运算符也适用于reference身上。然而对于一个non-type-safe cast，其结果不会与施行于指针的情况相同。为什么？      \n一个reference不可以像指针那样\"把自己设为0就代表了\"no object\"；若将一个reference 设为0，会引起一个临时性对象(拥有被参考到的类型)被产生出来，该临时对象的初值为0，这个reference然后被设定成为该临时性对象的一个别名。   \n因此当dynamic_cast运算符施行于一个reference时，不能够提供对等于指针情况下的那一组true/false。取而代之的是，会发生下列事情：\n* 如果reference真正参考到适当的derived class(包括下一层或下下一层或下下下一层或...)，downcast会被执行而程序可以继续执行。\n* 如果reference并不真正是某一种derived class，那么，由于不能传回0，遂丢出一个bad_cast exception.\n\n#### 4.Typeid运算符\ntypeid运算符传回一个const reference，类型为type_info。\ntype_info object由什么组成？ C++ Standard中对type_info的定义如下：\n```\nclass type_info{\npublic:\n    virtual ~type_info();\n    bool operator==(const type_info& ) const;\n    bool operator!=(const type_info& ) const;\n    bool before(const type_info&) const;\n    bool char* name() const;  //传回class原始名称\nprivate:\n    //prevent memberwise init and copy\n    type_info(const type_info& );\n    type_info& operator=(const type_info& );\n    //data members\n};\n```\n编译器必须提供的最小量信息是class的真实名称、以及在type_info objects之间的某些排序算法(这就是before()函数目的)、以及某些形式的描述器，用以表现explicit class type和这个class的任何subtype。\n\n## 四、效率有了，弹性呢？\n创痛的c\\+\\+对对象模型提供有效率的执行期支持。这份效率，再加上与c之间的兼容性，造成了C\\+\\+的广泛被接受。然而，在某些领域方面，像是动态共享库、共享内存以及分布式对象方面，这个对象模型的弹性还是不够。\n","source":"_posts/深度探索c++对象模型/《深度探索c++对象模型》（七）.md","raw":"---\ntitle: 《深度探索c++对象模型》（七）站在对象模型的顶端\ndate: 2019-05-16 16:44:12\ntoc: true\ncomments: true\ntags:\n  - C++基础\ncategories:\n  - C++基础\n---\n\n本章的的主题是站在对象模型的尖端，套路哦三个著名的c\\+\\+语言扩充性质，它们都会影响c\\+\\+对象，他们分别是exception handling（EH）、template support、runtime type identification(RTTI)。\n<!--more-->\n\n\n### 前述\n> 本章的的主题是站在对象模型的尖端，套路哦三个著名的c\\+\\+语言扩充性质，它们都会影响c\\+\\+对象，他们分别是exception handling（EH）、template support、runtime type identification(RTTI)。\n------------------------------------\n## 一、Template\n这一节的焦点放在template的语意上面，我们将讨论templates在编译系统中“何时”，“为什么”以及“如何”发挥其功能。下面是有关template的三个主要讨论方向：\n* template的声明，基本上来说就是当你声明一个template class、template class member function等等，会发生什么事情。\n* 如何\"实例化\"class object、inline nonmember以及member template functions，这些是\"每一个编译单元都会拥有的一份实体\"的东西。\n* 如何“实例化”出nonmember、member templates functions以及static template class members，这些都是\"每一个可执行文件中只需要一份实体\"的东西，这也就是一般而言template所带来的问题。\n\n#### 1.template的“实例化”行为\n对于如下template class:\n```\ntemplate<class Type>\nclass Point\n{\npublic:\n    enum Status { unallocated, normalized };\n    \n    Point(Type x = 0.0, Type y = 0.0, Type z = 0.0);\n    ~Point();\n    \n    void *operator new(size_t );\n    void operator delete(void *, size_t );\n    //...\nprivate:\n    static Point<Type> *freeList;\n    static int chunkSize;\n    Type _x, _y, _z;\n};\n```\n编译器对于template class会根据type的不同而产生不同的实例class。\n* enum Status、freeList、chunkSize以及object都必须进行实例化，如```Point<double>::freeList; ```,而不能是```Point::freeList; ```。\n* 定义一个指针，指向特定的实例。例如``` Point<float> *ptr=0;```因为一个指向class object的指针，本身并不是一个class object，编译器不需要知道与该class有关的任何member的数据或object的布局数据。所以不需要实例化。\n* 定义一个reference,例如```Point<float> &refer=0; ```就需要产生一个Point的float实例。\n\n\n#### 2.member function需要实例化吗？\nmember functions(至少对于那些未被使用过的)不应该被“实体”化，只有在member functions被使用的时候，C++ Standard才要求它们被“实例化”。当前的编译器并不精 确遵循这项要求，之所以由使用者来主导“具现”规则，有两个主要原因：\n* 空间和时间效率的考虑。如果class中有100个member functions，但你的程序只针对某个类型使用其中两个，针对另一个类型使用其中5个，那么其他193个函数都“具现”将花费大量的时间和空间。\n* 尚未实现的功能，并不是一个template实例化的所有类型就一定能够支持一组member functions所需要的所有运算符。如果只“具现”那些真正用到的memeber functions，template就能够支持那些原本可能会造成编译时期错误的类型(types)。\n\n#### 3.template的错误报告。\n目前的编译器，面对一个template声明，在它被一组实际参数实例化之前，只能施行以有限的错误检查。template中那些与语法无关的错误，程序员可能认为十分明显，编译器却让它通过了，只有在特定实例被定义之后，才能发出抱怨。这是目前实现技术上的一个大问题。\n\n#### 4.Template中的名称决议法。\nTemplate有两种语境，一种是C++ Standard所谓的\"Scope of the template definition\"，也就是“定义出template”的程序。另一种是C++ Standard所谓的\"scope of the template instantiation\"，也就是说“具现出template”的程序。        \nTemplate之中，对于一个nonmember name的决议结果，是根据这个name的使用是否与“用以实例化该template的参数类型”有关而设定的。如果其使用互不相关，那么就以“scope of the template declaration”来决定name。如果其使用互有关联，那么就以“scope of template instantiation”来决定name。例如：\n```\n//scope of the template definition\nextern double foo(double); \n\ntemplate<class type>\nclass ScopeRules{\npublic:\n    void invariant() { _member = foo(val); }\n    type type_dependent() {return foo(_member);}\n    //...\nprivate:\n    int _val;\n    type _member;\n};\n\n//scope of the template instantiation\nextern int foo(int);\n//...\nScopeRultes<int> sr0;\n```\n* 对于```sr0.invariant(); ```由于被用来实例化这个template的真正类型，对于 \\_val的类型并没有影响。所以选中``` extern double foo(double); ```\n* 对于```sr0.type_dependent(); ```\\_member与template参数有关,所以选中的foo()跟参数有关,所以选中```extern int foo(int);```。\n\n#### 5.Member function的实例化行为。\n对于template的支持，最困难的莫过于template function的实例化，目前的编译器提供了 两个策略：一个是编译时期策略，程序代码必须在program text file中备妥可用；另一个是链接时期策略，程序代码必须在meta-compliation工具可以导引编译器的实例化行为(instantiation)。       \n下面是编译器设计者必须回答的三个主要问题：\n* （1）编译器如何找出函数的定义？     \n答案之一是包含template program text file，就好像它是个header文件一样，Borland编译器就是遵循这个策略。另一种方法是要求一个文件命名规则，例如，我们可以要求，在Point.h文件中发现的函数声明，其template program text一定要放置于文件Point.c或者Point.cpp中，以此类推。cfront就是遵循这个策略。Edison Desigin Group编译器对此两种策略都支持。\n* （2）编译器如何能够只实例化出程序中用到的member functions?     \n解决办法之一就是，根本忽略这项要求，把一个已经具现出来的class的所有member functions都产生出来。Borland就是这么做的——虽然它也提供#pragmas让你压制(或具现出)特定实体。另一种策略就是仿真链接操作，检测看看哪一个函数真正需要，然后只为它(们)产生实体。cfront就是这么做的，Edison Design Group编译器对此两种策略都支持。\n* （3）编译器如何阻止member definitions在多个.o文件中都被实例化呢?       \n解决办法之一是产生多个实体，然后从链接器中提供支持，只留下其中一个实体，其余都忽略。另外一个办法就是由使用者来导引“仿真链接阶段”的实例化策略，决定哪些实体(instances)才是所需求的。\n\n实际上，template instantiation似乎拒绝全面自动化，甚至居然没意见工作都对了，产生出来的object files的重新编译成本仍然可能很高。**以手动方式先在个别的object module中完成预先实例化操作，虽然沉闷，却是唯一有效率的方法。**\n\n## 二、异常处理\n#### 1.编译对异常处理的支持\n欲支持exception handling，编译器的主要工作就是找出catch子句，以处理被丢出来的exception。这多少需要追踪程序堆栈中的每一个函数当前作用区域(包括追踪函数中的local class objects当时的情况)。同时，编译器必须提供某种查询exception objects的方法，以知道其实际类型(这直接导致某种形式的执行期识别，也就是RTTI)。最后，还需要某种机制用以管理被丢出的object，包括它的产生、储存、可能的解构(如果有相关的destructor)、清理(clean up)以及一般存取，也可能有一个以上的objects同时起作用。      \n\n一般而言，exception handling机制需要与编译器所产生的数据结构以及执行期的一个exception library紧密合作，在程序大小和执行速度之间，编译器必须有所抉择：\n* 为了维持执行速度，编译器可以在编译时期建立起用于支持的数据结构，这会使程序大小膨胀，但编译器可以几乎忽略这些结构，直到有个exception被丢出来。\n* 为了维持程序大小，编译器可以在执行期建立起用于支持的数据结构。这会影响程序的执行速度，但意味着编译器只有在必要的时候才建立那些数据结构(并且可以抛弃之)。\n\n#### 2.Exception Handling 快速检阅\nC++的exception handing由三个主要的语汇组件构成：\n* 一个throw子句。它在程序某处发出一个exception。被抛出去的expection可以是內建类型，也可以是使用者自定类型。\n* 一个或多个catch子句。每一个catch子句都是一个exception handler。它用来表示说，这个子句准备处理某种类型的exception，并且在封闭的大括号区段中提供实际的处理程序\n* 一个try区段。它被围绕以一系列的叙述句(statements)，这些叙述句可能会引发catch子句起作用  \n\n当一个exception被丢出去时，控制权会从函数调用中被释放出来，并寻找一个吻合的catch子句。如果都没有吻合者，那么默认的处理例程terminate()会被调用。当控制权被抛弃后，堆栈中的每一个函数调用也就被推离(popped up)，这个程序称为unwinding the stack。**在每一个函数被推离堆栈之前，函数的local class objects的destructor会被调用。**\n\n#### 3.对Exception Handling的支持\n当一个exception发生时，编译系统必须完成以下事情：    \n（1）检验发生throw操作的函数；   \n（2）决定throw操场是否发生在try区段中；   \n（3）若是，编译系统必须把exception type拿来和每一个catch子句比较；   \n（4）如果比较吻合，流程控制应该交到catch子句手中；    \n（5）如果throw的发生并不在try区段中，并没有一个catch子句吻合，那么系统必须(a)摧毁所有active local objects，(b)从堆栈中将当前的函数\"unwind\"掉，(c)进行到程序堆栈中的下一个函数中去，然后重复上述步骤2~5\n\n\n#### 4.当一个实际对象在程序执行时被丢出，会发生什么事？\n当一个exception被丢出时，exception object会被产生出来并通常放置在相同形式的exception数据堆栈中，从throw端传染给catch子句的是exception object的地址、类型描述器(或是一个函数指针，该函数会传回与该exception type有关的类型描述器对象)，以及可能会有的exception object描述器(如果有人定义它的话)。\n\n\n## 三、执行器类型识别（RTTI）\nRTTI是用于支持EH而获得的副产品，主要目的是处理和识别throw的object类型。\n#### 1.Type-Safe Downcast(保证安全的向下转型操作)\n一个type\\-safe downcast(保证安全地向下转换操作)必须在执行期对指针有所查询，看看它是否指向它所展现(表达)之object的真正类型。因此，欲支持type-safe downcast在object空间和执行时间上都需要一些额外的负担：\n* 需要额外的空间以存储类型信息(type information)，通常是一个指针，指向某个类型信息节点\n* 需要额外的时间以决定执行期的类型(runtime type)，因为，正如其名所示，这需要再执行期才能决定。\n\nc\\+\\+的RTTI机制提供了一个安全的downcast设备,但只对那些展现“多态”的类型有效。c\\+\\+中，一个具备多态性质的class，正式内含着继承而来的virtual function。\n\n#### 2.Type-Safe Dynamic cast(保证安全的动态转型)\ndynamic\\_cast运算符可以在执行期决定真正的类型。如果downcast是安全的，这个运算符会传回被适当转换过的指针。如果downcast不是安全地，这个运算符会传回0.\n\n#### 3.References并不是Pointers\n程序中对一个class指针类型施以dynamic_cast运算符，会获得true或false：\n* 如果传回真正的地址，表示这个object的动态类型被确认了，一些与类型相关的操作现在可以施行于其上。\n* 如果传回0，表示没有指向任何object，意味应该以另一种逻辑施行于这个动态类型未确定的object身上。\n\ndynamic_cast运算符也适用于reference身上。然而对于一个non-type-safe cast，其结果不会与施行于指针的情况相同。为什么？      \n一个reference不可以像指针那样\"把自己设为0就代表了\"no object\"；若将一个reference 设为0，会引起一个临时性对象(拥有被参考到的类型)被产生出来，该临时对象的初值为0，这个reference然后被设定成为该临时性对象的一个别名。   \n因此当dynamic_cast运算符施行于一个reference时，不能够提供对等于指针情况下的那一组true/false。取而代之的是，会发生下列事情：\n* 如果reference真正参考到适当的derived class(包括下一层或下下一层或下下下一层或...)，downcast会被执行而程序可以继续执行。\n* 如果reference并不真正是某一种derived class，那么，由于不能传回0，遂丢出一个bad_cast exception.\n\n#### 4.Typeid运算符\ntypeid运算符传回一个const reference，类型为type_info。\ntype_info object由什么组成？ C++ Standard中对type_info的定义如下：\n```\nclass type_info{\npublic:\n    virtual ~type_info();\n    bool operator==(const type_info& ) const;\n    bool operator!=(const type_info& ) const;\n    bool before(const type_info&) const;\n    bool char* name() const;  //传回class原始名称\nprivate:\n    //prevent memberwise init and copy\n    type_info(const type_info& );\n    type_info& operator=(const type_info& );\n    //data members\n};\n```\n编译器必须提供的最小量信息是class的真实名称、以及在type_info objects之间的某些排序算法(这就是before()函数目的)、以及某些形式的描述器，用以表现explicit class type和这个class的任何subtype。\n\n## 四、效率有了，弹性呢？\n创痛的c\\+\\+对对象模型提供有效率的执行期支持。这份效率，再加上与c之间的兼容性，造成了C\\+\\+的广泛被接受。然而，在某些领域方面，像是动态共享库、共享内存以及分布式对象方面，这个对象模型的弹性还是不够。\n","slug":"深度探索c++对象模型/《深度探索c++对象模型》（七）","published":1,"updated":"2019-05-16T09:32:07.819Z","_id":"cjvqga0qb000379jxauh63p1x","layout":"post","photos":[],"link":"","content":"<p>本章的的主题是站在对象模型的尖端，套路哦三个著名的c++语言扩充性质，它们都会影响c++对象，他们分别是exception handling（EH）、template support、runtime type identification(RTTI)。<br><a id=\"more\"></a></p>\n<h3 id=\"前述\"><a href=\"#前述\" class=\"headerlink\" title=\"前述\"></a>前述</h3><blockquote>\n<p>本章的的主题是站在对象模型的尖端，套路哦三个著名的c++语言扩充性质，它们都会影响c++对象，他们分别是exception handling（EH）、template support、runtime type identification(RTTI)。</p>\n</blockquote>\n<hr>\n<h2 id=\"一、Template\"><a href=\"#一、Template\" class=\"headerlink\" title=\"一、Template\"></a>一、Template</h2><p>这一节的焦点放在template的语意上面，我们将讨论templates在编译系统中“何时”，“为什么”以及“如何”发挥其功能。下面是有关template的三个主要讨论方向：</p>\n<ul>\n<li>template的声明，基本上来说就是当你声明一个template class、template class member function等等，会发生什么事情。</li>\n<li>如何”实例化”class object、inline nonmember以及member template functions，这些是”每一个编译单元都会拥有的一份实体”的东西。</li>\n<li>如何“实例化”出nonmember、member templates functions以及static template class members，这些都是”每一个可执行文件中只需要一份实体”的东西，这也就是一般而言template所带来的问题。</li>\n</ul>\n<h4 id=\"1-template的“实例化”行为\"><a href=\"#1-template的“实例化”行为\" class=\"headerlink\" title=\"1.template的“实例化”行为\"></a>1.template的“实例化”行为</h4><p>对于如下template class:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Type</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">Point</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">enum</span> Status &#123; unallocated, normalized &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Point(Type x = <span class=\"number\">0.0</span>, Type y = <span class=\"number\">0.0</span>, Type z = <span class=\"number\">0.0</span>);</span><br><span class=\"line\">    ~Point();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"keyword\">operator</span> <span class=\"title\">new</span><span class=\"params\">(<span class=\"keyword\">size_t</span> )</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"keyword\">operator</span> <span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">void</span> *, <span class=\"keyword\">size_t</span> )</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Point&lt;Type&gt; *freeList;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> chunkSize;</span><br><span class=\"line\">    Type _x, _y, _z;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>编译器对于template class会根据type的不同而产生不同的实例class。</p>\n<ul>\n<li>enum Status、freeList、chunkSize以及object都必须进行实例化，如<figure class=\"highlight plain\"><figcaption><span>```,而不能是```Point::freeList; ```。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 定义一个指针，指向特定的实例。例如``` Point&lt;float&gt; *ptr=0;```因为一个指向class object的指针，本身并不是一个class object，编译器不需要知道与该class有关的任何member的数据或object的布局数据。所以不需要实例化。</span><br><span class=\"line\">* 定义一个reference,例如```Point&lt;float&gt; &amp;refer=0; ```就需要产生一个Point的float实例。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 2.member function需要实例化吗？</span><br><span class=\"line\">member functions(至少对于那些未被使用过的)不应该被“实体”化，只有在member functions被使用的时候，C++ Standard才要求它们被“实例化”。当前的编译器并不精 确遵循这项要求，之所以由使用者来主导“具现”规则，有两个主要原因：</span><br><span class=\"line\">* 空间和时间效率的考虑。如果class中有100个member functions，但你的程序只针对某个类型使用其中两个，针对另一个类型使用其中5个，那么其他193个函数都“具现”将花费大量的时间和空间。</span><br><span class=\"line\">* 尚未实现的功能，并不是一个template实例化的所有类型就一定能够支持一组member functions所需要的所有运算符。如果只“具现”那些真正用到的memeber functions，template就能够支持那些原本可能会造成编译时期错误的类型(types)。</span><br><span class=\"line\"></span><br><span class=\"line\">#### 3.template的错误报告。</span><br><span class=\"line\">目前的编译器，面对一个template声明，在它被一组实际参数实例化之前，只能施行以有限的错误检查。template中那些与语法无关的错误，程序员可能认为十分明显，编译器却让它通过了，只有在特定实例被定义之后，才能发出抱怨。这是目前实现技术上的一个大问题。</span><br><span class=\"line\"></span><br><span class=\"line\">#### 4.Template中的名称决议法。</span><br><span class=\"line\">Template有两种语境，一种是C++ Standard所谓的&quot;Scope of the template definition&quot;，也就是“定义出template”的程序。另一种是C++ Standard所谓的&quot;scope of the template instantiation&quot;，也就是说“具现出template”的程序。        </span><br><span class=\"line\">Template之中，对于一个nonmember name的决议结果，是根据这个name的使用是否与“用以实例化该template的参数类型”有关而设定的。如果其使用互不相关，那么就以“scope of the template declaration”来决定name。如果其使用互有关联，那么就以“scope of template instantiation”来决定name。例如：</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>//scope of the template definition<br>extern double foo(double); </p>\n<p>template<class type><br>class ScopeRules{<br>public:<br>    void invariant() { _member = foo(val); }<br>    type type_dependent() {return foo(_member);}<br>    //…<br>private:<br>    int _val;<br>    type _member;<br>};</class></p>\n<p>//scope of the template instantiation<br>extern int foo(int);<br>//…<br>ScopeRultes<int> sr0;<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 对于```sr0.invariant(); ```由于被用来实例化这个<span class=\"keyword\">template</span>的真正类型，对于 \\_val的类型并没有影响。所以选中``` <span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"keyword\">double</span> <span class=\"title\">foo</span><span class=\"params\">(<span class=\"keyword\">double</span>)</span></span>;</span><br></pre></td></tr></table></figure></int></p>\n<ul>\n<li>对于<figure class=\"highlight plain\"><figcaption><span>```\\_member与template参数有关,所以选中的foo()跟参数有关,所以选中```extern int foo(int);```。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### 5.Member function的实例化行为。</span><br><span class=\"line\">对于template的支持，最困难的莫过于template function的实例化，目前的编译器提供了 两个策略：一个是编译时期策略，程序代码必须在program text file中备妥可用；另一个是链接时期策略，程序代码必须在meta-compliation工具可以导引编译器的实例化行为(instantiation)。       </span><br><span class=\"line\">下面是编译器设计者必须回答的三个主要问题：</span><br><span class=\"line\">* （1）编译器如何找出函数的定义？     </span><br><span class=\"line\">答案之一是包含template program text file，就好像它是个header文件一样，Borland编译器就是遵循这个策略。另一种方法是要求一个文件命名规则，例如，我们可以要求，在Point.h文件中发现的函数声明，其template program text一定要放置于文件Point.c或者Point.cpp中，以此类推。cfront就是遵循这个策略。Edison Desigin Group编译器对此两种策略都支持。</span><br><span class=\"line\">* （2）编译器如何能够只实例化出程序中用到的member functions?     </span><br><span class=\"line\">解决办法之一就是，根本忽略这项要求，把一个已经具现出来的class的所有member functions都产生出来。Borland就是这么做的——虽然它也提供#pragmas让你压制(或具现出)特定实体。另一种策略就是仿真链接操作，检测看看哪一个函数真正需要，然后只为它(们)产生实体。cfront就是这么做的，Edison Design Group编译器对此两种策略都支持。</span><br><span class=\"line\">* （3）编译器如何阻止member definitions在多个.o文件中都被实例化呢?       </span><br><span class=\"line\">解决办法之一是产生多个实体，然后从链接器中提供支持，只留下其中一个实体，其余都忽略。另外一个办法就是由使用者来导引“仿真链接阶段”的实例化策略，决定哪些实体(instances)才是所需求的。</span><br><span class=\"line\"></span><br><span class=\"line\">实际上，template instantiation似乎拒绝全面自动化，甚至居然没意见工作都对了，产生出来的object files的重新编译成本仍然可能很高。**以手动方式先在个别的object module中完成预先实例化操作，虽然沉闷，却是唯一有效率的方法。**</span><br><span class=\"line\"></span><br><span class=\"line\">## 二、异常处理</span><br><span class=\"line\">#### 1.编译对异常处理的支持</span><br><span class=\"line\">欲支持exception handling，编译器的主要工作就是找出catch子句，以处理被丢出来的exception。这多少需要追踪程序堆栈中的每一个函数当前作用区域(包括追踪函数中的local class objects当时的情况)。同时，编译器必须提供某种查询exception objects的方法，以知道其实际类型(这直接导致某种形式的执行期识别，也就是RTTI)。最后，还需要某种机制用以管理被丢出的object，包括它的产生、储存、可能的解构(如果有相关的destructor)、清理(clean up)以及一般存取，也可能有一个以上的objects同时起作用。      </span><br><span class=\"line\"></span><br><span class=\"line\">一般而言，exception handling机制需要与编译器所产生的数据结构以及执行期的一个exception library紧密合作，在程序大小和执行速度之间，编译器必须有所抉择：</span><br><span class=\"line\">* 为了维持执行速度，编译器可以在编译时期建立起用于支持的数据结构，这会使程序大小膨胀，但编译器可以几乎忽略这些结构，直到有个exception被丢出来。</span><br><span class=\"line\">* 为了维持程序大小，编译器可以在执行期建立起用于支持的数据结构。这会影响程序的执行速度，但意味着编译器只有在必要的时候才建立那些数据结构(并且可以抛弃之)。</span><br><span class=\"line\"></span><br><span class=\"line\">#### 2.Exception Handling 快速检阅</span><br><span class=\"line\">C++的exception handing由三个主要的语汇组件构成：</span><br><span class=\"line\">* 一个throw子句。它在程序某处发出一个exception。被抛出去的expection可以是內建类型，也可以是使用者自定类型。</span><br><span class=\"line\">* 一个或多个catch子句。每一个catch子句都是一个exception handler。它用来表示说，这个子句准备处理某种类型的exception，并且在封闭的大括号区段中提供实际的处理程序</span><br><span class=\"line\">* 一个try区段。它被围绕以一系列的叙述句(statements)，这些叙述句可能会引发catch子句起作用  </span><br><span class=\"line\"></span><br><span class=\"line\">当一个exception被丢出去时，控制权会从函数调用中被释放出来，并寻找一个吻合的catch子句。如果都没有吻合者，那么默认的处理例程terminate()会被调用。当控制权被抛弃后，堆栈中的每一个函数调用也就被推离(popped up)，这个程序称为unwinding the stack。**在每一个函数被推离堆栈之前，函数的local class objects的destructor会被调用。**</span><br><span class=\"line\"></span><br><span class=\"line\">#### 3.对Exception Handling的支持</span><br><span class=\"line\">当一个exception发生时，编译系统必须完成以下事情：    </span><br><span class=\"line\">（1）检验发生throw操作的函数；   </span><br><span class=\"line\">（2）决定throw操场是否发生在try区段中；   </span><br><span class=\"line\">（3）若是，编译系统必须把exception type拿来和每一个catch子句比较；   </span><br><span class=\"line\">（4）如果比较吻合，流程控制应该交到catch子句手中；    </span><br><span class=\"line\">（5）如果throw的发生并不在try区段中，并没有一个catch子句吻合，那么系统必须(a)摧毁所有active local objects，(b)从堆栈中将当前的函数&quot;unwind&quot;掉，(c)进行到程序堆栈中的下一个函数中去，然后重复上述步骤2~5</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 4.当一个实际对象在程序执行时被丢出，会发生什么事？</span><br><span class=\"line\">当一个exception被丢出时，exception object会被产生出来并通常放置在相同形式的exception数据堆栈中，从throw端传染给catch子句的是exception object的地址、类型描述器(或是一个函数指针，该函数会传回与该exception type有关的类型描述器对象)，以及可能会有的exception object描述器(如果有人定义它的话)。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 三、执行器类型识别（RTTI）</span><br><span class=\"line\">RTTI是用于支持EH而获得的副产品，主要目的是处理和识别throw的object类型。</span><br><span class=\"line\">#### 1.Type-Safe Downcast(保证安全的向下转型操作)</span><br><span class=\"line\">一个type\\-safe downcast(保证安全地向下转换操作)必须在执行期对指针有所查询，看看它是否指向它所展现(表达)之object的真正类型。因此，欲支持type-safe downcast在object空间和执行时间上都需要一些额外的负担：</span><br><span class=\"line\">* 需要额外的空间以存储类型信息(type information)，通常是一个指针，指向某个类型信息节点</span><br><span class=\"line\">* 需要额外的时间以决定执行期的类型(runtime type)，因为，正如其名所示，这需要再执行期才能决定。</span><br><span class=\"line\"></span><br><span class=\"line\">c\\+\\+的RTTI机制提供了一个安全的downcast设备,但只对那些展现“多态”的类型有效。c\\+\\+中，一个具备多态性质的class，正式内含着继承而来的virtual function。</span><br><span class=\"line\"></span><br><span class=\"line\">#### 2.Type-Safe Dynamic cast(保证安全的动态转型)</span><br><span class=\"line\">dynamic\\_cast运算符可以在执行期决定真正的类型。如果downcast是安全的，这个运算符会传回被适当转换过的指针。如果downcast不是安全地，这个运算符会传回0.</span><br><span class=\"line\"></span><br><span class=\"line\">#### 3.References并不是Pointers</span><br><span class=\"line\">程序中对一个class指针类型施以dynamic_cast运算符，会获得true或false：</span><br><span class=\"line\">* 如果传回真正的地址，表示这个object的动态类型被确认了，一些与类型相关的操作现在可以施行于其上。</span><br><span class=\"line\">* 如果传回0，表示没有指向任何object，意味应该以另一种逻辑施行于这个动态类型未确定的object身上。</span><br><span class=\"line\"></span><br><span class=\"line\">dynamic_cast运算符也适用于reference身上。然而对于一个non-type-safe cast，其结果不会与施行于指针的情况相同。为什么？      </span><br><span class=\"line\">一个reference不可以像指针那样&quot;把自己设为0就代表了&quot;no object&quot;；若将一个reference 设为0，会引起一个临时性对象(拥有被参考到的类型)被产生出来，该临时对象的初值为0，这个reference然后被设定成为该临时性对象的一个别名。   </span><br><span class=\"line\">因此当dynamic_cast运算符施行于一个reference时，不能够提供对等于指针情况下的那一组true/false。取而代之的是，会发生下列事情：</span><br><span class=\"line\">* 如果reference真正参考到适当的derived class(包括下一层或下下一层或下下下一层或...)，downcast会被执行而程序可以继续执行。</span><br><span class=\"line\">* 如果reference并不真正是某一种derived class，那么，由于不能传回0，遂丢出一个bad_cast exception.</span><br><span class=\"line\"></span><br><span class=\"line\">#### 4.Typeid运算符</span><br><span class=\"line\">typeid运算符传回一个const reference，类型为type_info。</span><br><span class=\"line\">type_info object由什么组成？ C++ Standard中对type_info的定义如下：</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>class type_info{<br>public:<br>    virtual ~type_info();<br>    bool operator==(const type_info&amp; ) const;<br>    bool operator!=(const type_info&amp; ) const;<br>    bool before(const type_info&amp;) const;<br>    bool char* name() const;  //传回class原始名称<br>private:<br>    //prevent memberwise init and copy<br>    type_info(const type_info&amp; );<br>    type_info&amp; operator=(const type_info&amp; );<br>    //data members<br>};<br><code>`</code><br>编译器必须提供的最小量信息是class的真实名称、以及在type_info objects之间的某些排序算法(这就是before()函数目的)、以及某些形式的描述器，用以表现explicit class type和这个class的任何subtype。</p>\n<h2 id=\"四、效率有了，弹性呢？\"><a href=\"#四、效率有了，弹性呢？\" class=\"headerlink\" title=\"四、效率有了，弹性呢？\"></a>四、效率有了，弹性呢？</h2><p>创痛的c++对对象模型提供有效率的执行期支持。这份效率，再加上与c之间的兼容性，造成了C++的广泛被接受。然而，在某些领域方面，像是动态共享库、共享内存以及分布式对象方面，这个对象模型的弹性还是不够。</p>\n","site":{"data":{}},"excerpt":"<p>本章的的主题是站在对象模型的尖端，套路哦三个著名的c++语言扩充性质，它们都会影响c++对象，他们分别是exception handling（EH）、template support、runtime type identification(RTTI)。<br>","more":"</p>\n<h3 id=\"前述\"><a href=\"#前述\" class=\"headerlink\" title=\"前述\"></a>前述</h3><blockquote>\n<p>本章的的主题是站在对象模型的尖端，套路哦三个著名的c++语言扩充性质，它们都会影响c++对象，他们分别是exception handling（EH）、template support、runtime type identification(RTTI)。</p>\n</blockquote>\n<hr>\n<h2 id=\"一、Template\"><a href=\"#一、Template\" class=\"headerlink\" title=\"一、Template\"></a>一、Template</h2><p>这一节的焦点放在template的语意上面，我们将讨论templates在编译系统中“何时”，“为什么”以及“如何”发挥其功能。下面是有关template的三个主要讨论方向：</p>\n<ul>\n<li>template的声明，基本上来说就是当你声明一个template class、template class member function等等，会发生什么事情。</li>\n<li>如何”实例化”class object、inline nonmember以及member template functions，这些是”每一个编译单元都会拥有的一份实体”的东西。</li>\n<li>如何“实例化”出nonmember、member templates functions以及static template class members，这些都是”每一个可执行文件中只需要一份实体”的东西，这也就是一般而言template所带来的问题。</li>\n</ul>\n<h4 id=\"1-template的“实例化”行为\"><a href=\"#1-template的“实例化”行为\" class=\"headerlink\" title=\"1.template的“实例化”行为\"></a>1.template的“实例化”行为</h4><p>对于如下template class:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Type</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">Point</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"keyword\">enum</span> Status &#123; unallocated, normalized &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Point(Type x = <span class=\"number\">0.0</span>, Type y = <span class=\"number\">0.0</span>, Type z = <span class=\"number\">0.0</span>);</span><br><span class=\"line\">    ~Point();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> *<span class=\"keyword\">operator</span> <span class=\"title\">new</span><span class=\"params\">(<span class=\"keyword\">size_t</span> )</span></span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"keyword\">operator</span> <span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">void</span> *, <span class=\"keyword\">size_t</span> )</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Point&lt;Type&gt; *freeList;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> chunkSize;</span><br><span class=\"line\">    Type _x, _y, _z;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>编译器对于template class会根据type的不同而产生不同的实例class。</p>\n<ul>\n<li>enum Status、freeList、chunkSize以及object都必须进行实例化，如<figure class=\"highlight plain\"><figcaption><span>```,而不能是```Point::freeList; ```。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 定义一个指针，指向特定的实例。例如``` Point&lt;float&gt; *ptr=0;```因为一个指向class object的指针，本身并不是一个class object，编译器不需要知道与该class有关的任何member的数据或object的布局数据。所以不需要实例化。</span><br><span class=\"line\">* 定义一个reference,例如```Point&lt;float&gt; &amp;refer=0; ```就需要产生一个Point的float实例。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 2.member function需要实例化吗？</span><br><span class=\"line\">member functions(至少对于那些未被使用过的)不应该被“实体”化，只有在member functions被使用的时候，C++ Standard才要求它们被“实例化”。当前的编译器并不精 确遵循这项要求，之所以由使用者来主导“具现”规则，有两个主要原因：</span><br><span class=\"line\">* 空间和时间效率的考虑。如果class中有100个member functions，但你的程序只针对某个类型使用其中两个，针对另一个类型使用其中5个，那么其他193个函数都“具现”将花费大量的时间和空间。</span><br><span class=\"line\">* 尚未实现的功能，并不是一个template实例化的所有类型就一定能够支持一组member functions所需要的所有运算符。如果只“具现”那些真正用到的memeber functions，template就能够支持那些原本可能会造成编译时期错误的类型(types)。</span><br><span class=\"line\"></span><br><span class=\"line\">#### 3.template的错误报告。</span><br><span class=\"line\">目前的编译器，面对一个template声明，在它被一组实际参数实例化之前，只能施行以有限的错误检查。template中那些与语法无关的错误，程序员可能认为十分明显，编译器却让它通过了，只有在特定实例被定义之后，才能发出抱怨。这是目前实现技术上的一个大问题。</span><br><span class=\"line\"></span><br><span class=\"line\">#### 4.Template中的名称决议法。</span><br><span class=\"line\">Template有两种语境，一种是C++ Standard所谓的&quot;Scope of the template definition&quot;，也就是“定义出template”的程序。另一种是C++ Standard所谓的&quot;scope of the template instantiation&quot;，也就是说“具现出template”的程序。        </span><br><span class=\"line\">Template之中，对于一个nonmember name的决议结果，是根据这个name的使用是否与“用以实例化该template的参数类型”有关而设定的。如果其使用互不相关，那么就以“scope of the template declaration”来决定name。如果其使用互有关联，那么就以“scope of template instantiation”来决定name。例如：</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>//scope of the template definition<br>extern double foo(double); </p>\n<p>template<class type><br>class ScopeRules{<br>public:<br>    void invariant() { _member = foo(val); }<br>    type type_dependent() {return foo(_member);}<br>    //…<br>private:<br>    int _val;<br>    type _member;<br>};</class></p>\n<p>//scope of the template instantiation<br>extern int foo(int);<br>//…<br>ScopeRultes<int> sr0;<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 对于```sr0.invariant(); ```由于被用来实例化这个<span class=\"keyword\">template</span>的真正类型，对于 \\_val的类型并没有影响。所以选中``` <span class=\"function\"><span class=\"keyword\">extern</span> <span class=\"keyword\">double</span> <span class=\"title\">foo</span><span class=\"params\">(<span class=\"keyword\">double</span>)</span></span>;</span><br></pre></td></tr></table></figure></int></p>\n<ul>\n<li>对于<figure class=\"highlight plain\"><figcaption><span>```\\_member与template参数有关,所以选中的foo()跟参数有关,所以选中```extern int foo(int);```。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">#### 5.Member function的实例化行为。</span><br><span class=\"line\">对于template的支持，最困难的莫过于template function的实例化，目前的编译器提供了 两个策略：一个是编译时期策略，程序代码必须在program text file中备妥可用；另一个是链接时期策略，程序代码必须在meta-compliation工具可以导引编译器的实例化行为(instantiation)。       </span><br><span class=\"line\">下面是编译器设计者必须回答的三个主要问题：</span><br><span class=\"line\">* （1）编译器如何找出函数的定义？     </span><br><span class=\"line\">答案之一是包含template program text file，就好像它是个header文件一样，Borland编译器就是遵循这个策略。另一种方法是要求一个文件命名规则，例如，我们可以要求，在Point.h文件中发现的函数声明，其template program text一定要放置于文件Point.c或者Point.cpp中，以此类推。cfront就是遵循这个策略。Edison Desigin Group编译器对此两种策略都支持。</span><br><span class=\"line\">* （2）编译器如何能够只实例化出程序中用到的member functions?     </span><br><span class=\"line\">解决办法之一就是，根本忽略这项要求，把一个已经具现出来的class的所有member functions都产生出来。Borland就是这么做的——虽然它也提供#pragmas让你压制(或具现出)特定实体。另一种策略就是仿真链接操作，检测看看哪一个函数真正需要，然后只为它(们)产生实体。cfront就是这么做的，Edison Design Group编译器对此两种策略都支持。</span><br><span class=\"line\">* （3）编译器如何阻止member definitions在多个.o文件中都被实例化呢?       </span><br><span class=\"line\">解决办法之一是产生多个实体，然后从链接器中提供支持，只留下其中一个实体，其余都忽略。另外一个办法就是由使用者来导引“仿真链接阶段”的实例化策略，决定哪些实体(instances)才是所需求的。</span><br><span class=\"line\"></span><br><span class=\"line\">实际上，template instantiation似乎拒绝全面自动化，甚至居然没意见工作都对了，产生出来的object files的重新编译成本仍然可能很高。**以手动方式先在个别的object module中完成预先实例化操作，虽然沉闷，却是唯一有效率的方法。**</span><br><span class=\"line\"></span><br><span class=\"line\">## 二、异常处理</span><br><span class=\"line\">#### 1.编译对异常处理的支持</span><br><span class=\"line\">欲支持exception handling，编译器的主要工作就是找出catch子句，以处理被丢出来的exception。这多少需要追踪程序堆栈中的每一个函数当前作用区域(包括追踪函数中的local class objects当时的情况)。同时，编译器必须提供某种查询exception objects的方法，以知道其实际类型(这直接导致某种形式的执行期识别，也就是RTTI)。最后，还需要某种机制用以管理被丢出的object，包括它的产生、储存、可能的解构(如果有相关的destructor)、清理(clean up)以及一般存取，也可能有一个以上的objects同时起作用。      </span><br><span class=\"line\"></span><br><span class=\"line\">一般而言，exception handling机制需要与编译器所产生的数据结构以及执行期的一个exception library紧密合作，在程序大小和执行速度之间，编译器必须有所抉择：</span><br><span class=\"line\">* 为了维持执行速度，编译器可以在编译时期建立起用于支持的数据结构，这会使程序大小膨胀，但编译器可以几乎忽略这些结构，直到有个exception被丢出来。</span><br><span class=\"line\">* 为了维持程序大小，编译器可以在执行期建立起用于支持的数据结构。这会影响程序的执行速度，但意味着编译器只有在必要的时候才建立那些数据结构(并且可以抛弃之)。</span><br><span class=\"line\"></span><br><span class=\"line\">#### 2.Exception Handling 快速检阅</span><br><span class=\"line\">C++的exception handing由三个主要的语汇组件构成：</span><br><span class=\"line\">* 一个throw子句。它在程序某处发出一个exception。被抛出去的expection可以是內建类型，也可以是使用者自定类型。</span><br><span class=\"line\">* 一个或多个catch子句。每一个catch子句都是一个exception handler。它用来表示说，这个子句准备处理某种类型的exception，并且在封闭的大括号区段中提供实际的处理程序</span><br><span class=\"line\">* 一个try区段。它被围绕以一系列的叙述句(statements)，这些叙述句可能会引发catch子句起作用  </span><br><span class=\"line\"></span><br><span class=\"line\">当一个exception被丢出去时，控制权会从函数调用中被释放出来，并寻找一个吻合的catch子句。如果都没有吻合者，那么默认的处理例程terminate()会被调用。当控制权被抛弃后，堆栈中的每一个函数调用也就被推离(popped up)，这个程序称为unwinding the stack。**在每一个函数被推离堆栈之前，函数的local class objects的destructor会被调用。**</span><br><span class=\"line\"></span><br><span class=\"line\">#### 3.对Exception Handling的支持</span><br><span class=\"line\">当一个exception发生时，编译系统必须完成以下事情：    </span><br><span class=\"line\">（1）检验发生throw操作的函数；   </span><br><span class=\"line\">（2）决定throw操场是否发生在try区段中；   </span><br><span class=\"line\">（3）若是，编译系统必须把exception type拿来和每一个catch子句比较；   </span><br><span class=\"line\">（4）如果比较吻合，流程控制应该交到catch子句手中；    </span><br><span class=\"line\">（5）如果throw的发生并不在try区段中，并没有一个catch子句吻合，那么系统必须(a)摧毁所有active local objects，(b)从堆栈中将当前的函数&quot;unwind&quot;掉，(c)进行到程序堆栈中的下一个函数中去，然后重复上述步骤2~5</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#### 4.当一个实际对象在程序执行时被丢出，会发生什么事？</span><br><span class=\"line\">当一个exception被丢出时，exception object会被产生出来并通常放置在相同形式的exception数据堆栈中，从throw端传染给catch子句的是exception object的地址、类型描述器(或是一个函数指针，该函数会传回与该exception type有关的类型描述器对象)，以及可能会有的exception object描述器(如果有人定义它的话)。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 三、执行器类型识别（RTTI）</span><br><span class=\"line\">RTTI是用于支持EH而获得的副产品，主要目的是处理和识别throw的object类型。</span><br><span class=\"line\">#### 1.Type-Safe Downcast(保证安全的向下转型操作)</span><br><span class=\"line\">一个type\\-safe downcast(保证安全地向下转换操作)必须在执行期对指针有所查询，看看它是否指向它所展现(表达)之object的真正类型。因此，欲支持type-safe downcast在object空间和执行时间上都需要一些额外的负担：</span><br><span class=\"line\">* 需要额外的空间以存储类型信息(type information)，通常是一个指针，指向某个类型信息节点</span><br><span class=\"line\">* 需要额外的时间以决定执行期的类型(runtime type)，因为，正如其名所示，这需要再执行期才能决定。</span><br><span class=\"line\"></span><br><span class=\"line\">c\\+\\+的RTTI机制提供了一个安全的downcast设备,但只对那些展现“多态”的类型有效。c\\+\\+中，一个具备多态性质的class，正式内含着继承而来的virtual function。</span><br><span class=\"line\"></span><br><span class=\"line\">#### 2.Type-Safe Dynamic cast(保证安全的动态转型)</span><br><span class=\"line\">dynamic\\_cast运算符可以在执行期决定真正的类型。如果downcast是安全的，这个运算符会传回被适当转换过的指针。如果downcast不是安全地，这个运算符会传回0.</span><br><span class=\"line\"></span><br><span class=\"line\">#### 3.References并不是Pointers</span><br><span class=\"line\">程序中对一个class指针类型施以dynamic_cast运算符，会获得true或false：</span><br><span class=\"line\">* 如果传回真正的地址，表示这个object的动态类型被确认了，一些与类型相关的操作现在可以施行于其上。</span><br><span class=\"line\">* 如果传回0，表示没有指向任何object，意味应该以另一种逻辑施行于这个动态类型未确定的object身上。</span><br><span class=\"line\"></span><br><span class=\"line\">dynamic_cast运算符也适用于reference身上。然而对于一个non-type-safe cast，其结果不会与施行于指针的情况相同。为什么？      </span><br><span class=\"line\">一个reference不可以像指针那样&quot;把自己设为0就代表了&quot;no object&quot;；若将一个reference 设为0，会引起一个临时性对象(拥有被参考到的类型)被产生出来，该临时对象的初值为0，这个reference然后被设定成为该临时性对象的一个别名。   </span><br><span class=\"line\">因此当dynamic_cast运算符施行于一个reference时，不能够提供对等于指针情况下的那一组true/false。取而代之的是，会发生下列事情：</span><br><span class=\"line\">* 如果reference真正参考到适当的derived class(包括下一层或下下一层或下下下一层或...)，downcast会被执行而程序可以继续执行。</span><br><span class=\"line\">* 如果reference并不真正是某一种derived class，那么，由于不能传回0，遂丢出一个bad_cast exception.</span><br><span class=\"line\"></span><br><span class=\"line\">#### 4.Typeid运算符</span><br><span class=\"line\">typeid运算符传回一个const reference，类型为type_info。</span><br><span class=\"line\">type_info object由什么组成？ C++ Standard中对type_info的定义如下：</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>class type_info{<br>public:<br>    virtual ~type_info();<br>    bool operator==(const type_info&amp; ) const;<br>    bool operator!=(const type_info&amp; ) const;<br>    bool before(const type_info&amp;) const;<br>    bool char* name() const;  //传回class原始名称<br>private:<br>    //prevent memberwise init and copy<br>    type_info(const type_info&amp; );<br>    type_info&amp; operator=(const type_info&amp; );<br>    //data members<br>};<br><code>`</code><br>编译器必须提供的最小量信息是class的真实名称、以及在type_info objects之间的某些排序算法(这就是before()函数目的)、以及某些形式的描述器，用以表现explicit class type和这个class的任何subtype。</p>\n<h2 id=\"四、效率有了，弹性呢？\"><a href=\"#四、效率有了，弹性呢？\" class=\"headerlink\" title=\"四、效率有了，弹性呢？\"></a>四、效率有了，弹性呢？</h2><p>创痛的c++对对象模型提供有效率的执行期支持。这份效率，再加上与c之间的兼容性，造成了C++的广泛被接受。然而，在某些领域方面，像是动态共享库、共享内存以及分布式对象方面，这个对象模型的弹性还是不够。</p>"},{"title":"《深度探索c++对象模型》（三）Data语意学","date":"2019-05-16T08:44:12.000Z","toc":true,"comments":1,"_content":"\n本章的的主题是Data语意学，主要是探究编译器对class中的Data member的绑定、布局和存储等操作，最后探究Data member存取和多种继承方式之间的效率关系，以及指向Data member的指针的效率问题。\n<!--more-->\n\n### 前述\n> 本章的的主题是Data语意学，主要是探究编译器对class中的Data member的绑定、布局和存储等操作，最后探究Data member存取和多种继承方式之间的效率关系，以及指向Data member的指针的效率问题。\n\n------------------------------------\n参考书籍及链接：《深度探索c\\+\\+对象模型》    \n\n------------------------------------\n## 0、本章基础\n#### 1. 空类对象的大小是多少？\n```\nclass X { };//空类\n```\n对于空类，它有一个隐藏的1byte大小，那个被编译器安插进去的一个char,这使得这一class的两个objects得以在内存中配置独一无二的地址。\n\n#### 2. class object的size会受到哪些因素的影响？\n会影响class object的size的因素有如下三个，编译器：\n* 1. 语言本身所造成的额外负担：当语言支持virtual base classes时，就会导致一些额外负担。需要一个指针，它或者指向virtual base class subobject,或者指向一个相关的表格，表格用于存储subobject地址或偏移值。\n* 2. 编译器对于特殊情况所提供的优化处理：Virtual base class subobject的1 byte大小也会出现在derived class上。\n* 3. Alignment（边界对齐）的限制：在大部分的机器上，聚合的结构体大小会受到alignment的限制，使他们能够更有效率地在内存中被存取。比如32机器字上就是4的整数倍。\n\n#### 3. 各种类型data member的存放。\nnonstatic直接放在class object之中。static data member放置在程序的一个global data segment中，不会影响个别class object的大小。无论class产生多少个object,甚至是0个，其static data members永远也只存在一份实例。**但是一个template classs的static data members的行为稍有不同。**\n\n\n## 一、Data member的绑定\n#### 1. member function取用的是global还是local data member?\n当member funtion取用Data时，优先考虑member data,人们称这种情况为“member rewriting rule”，意思是对于member functions本身的分析，会直到整个class的声明都出现了才开始。在一个inline member function躯体之内的一个data member绑定操作，会在整个class声明之后才发生。\n> 以前人们提倡两种程序设计风格，即将所有的data members放在class声明起始处，或者把所有的inline  function都放在class声明之外。就是为解决绑定问题，但这种情况在c++ 2.0之后已经解决了。 \n\n#### 2. member function的argument list的情况又是怎么样的呢?\n与取用data member不同的是，argument list中的名称还是会在它们第一次 遭遇时被适当地决议（resolved）完成。\n```\ntypedef int length;\n\nclass Point3d{\npublic:\n    void mumble(length val) { _val=val;} //length被决议为global\n    length mumble() {return val;}\n    // ...\nprivate:\n    typedef float length;//这样的声明将使先前的参考操作不合法\n    length _val;\n    // ...\n};\n```\n> 虽然编译器能处理，但还是提倡一种防御性程序风格：即总是把“nested（嵌套的） type声明”放在class的起始处。    \n\n\n\n## 二、Data member的布局\n#### 1. Data  member是怎样被放置的？\n关于data member的布局，记住以下三点：\n* nonstatic data members在class object中的排列顺序和其被声明的顺序一样，任何中间介入的static data members都不会被放进对象布局之中。       \n* C++ standard允许编译器将多个access sections(也就是private、public、protected等区段)之中的data members整体自由排列，不必在乎他们的出现在class中的声明顺序（连续的两个privata也算两个section）。 \n* 编译器还可能会合成一些内部使用的data members，以支持整个对象模型，vptr就是这样的东西，当前所有的编译器都把它安插在每一个“内含virtual function之class”的object内。\n\n\n\n## 三、Data member的存取\n#### 1. 经由一个class object和一个指针存取data member，有重大差异吗？\n答案是显然的，这跟data member的类型和class的继承等都有关系，分如下两种情况讨论：\n* **data member 为 static**     \n  static data members会被编译器提出于class之外，并被视为一个global变量(但只在class生命范围内可见)。每一个static data member只有一个实例，存放在程序的data segment之中，通过一个指针和通过一个对象来存取data member都是一样的。  \n  \n  若取一个static data member的地址，会得到一个指向其数据类型的指针，而不是一个指向其class member的指针，因为static member并不内含在一个class object之中。   \n  \n  如果有两个classes，每一个都声明了一个同名的static member，编译器就会暗中对每一个static data member编码(对于这种手法有个很美的名称：name-mangling)，以获得一个独一无的程序识别代码。\n\n* **data member 为 nonstatic**    \n  Nonstatic data members直接存放在每一个class object之中。只有经过class object才能存取它们（implicit 存取如this指针）。欲对一个nonstatic data member进行存取操作，编译器需要把class object的起始地址加上data member的偏移位置(offset)。     \n\n  每一个nonstatic data member的偏移位置(offset)在编译时期即可获知，甚至如果member属于一个base class subobject(派生自单一或多重继承串链)也是一样的。因此，存取一个nonstatic data member，其效率和存取一个C struct member或一个nonderived class的member是一样的。\n  \n  但是如果该data member是一个virtual base class 的member,那么通过**指针**的存取速度会稍慢一点。（指针的真正class type 只有在执行器才真正确定）。  \n  \n  \n## 四、“继承”与Data Member\n> C++ standard未强制指定derived class members和base class members的排列顺序，理论上编译器可以自由安排之。在大部分编译器上头，base class members总是先出现，但属于virtual base class的除外。“继承”会对Data Member的布局有什么影响？接下来分四种情况进行讨论。\n\n#### 1. 第一种情况：只要继承不要多态。\n这种情况不会存储时间上的额外负担，由于base class和derived class的objects都是从相同的地址开始，其差异只在于derived object 比较大，用以容纳自建的nonstatic data members，把一个derived class object指定给base class 的指针或引用，并不需要编译器去调停或修改地址，可以提供了最佳执行效率。\n\n#### 2. 第二种情况：加上多态。\n加上virtual function接口后，弹性增加了，但也同时增加了空间和存取时间上的额外负担，如何取舍，视多态程序所带来的利益。可能带来的额外负担如下：\n* 导入一个和virtual table ，用来存储它所声明的每一个virtual functions的地址。再加上一两个slots(type_info)。\n* 在每一个class object中导入一个vptr,提供执行期的链接，使每一个object能够找到相应的virtual table。\n* 加强constructor，使它能够为vptr设定初始值，让它指向class所对应的virtual table。\n* 加强destructor，使它能够消抹“指向class 相关virtual table”的vptr。\n\n#### 3. 第三种情况：多重继承。\n对于单一继承，如果没有virtual function，那么编译器就不需要做其他工作;但如果base class没有virtual function而derived class有，并且vptr放在object首部，那么当把一个derived object转换为其base object时，就需要编译器对vptr进行调整。在既是多重继承又是虚拟继承的情况下，编译器的需要做的会更多。    \n对一个多重派生对象，将其地址指定给“最左端(也就是第一个)base class的指针”，情况将和单一继承时相同，因为二者都指向相同的起始地址。至于第二个或后继的base class的地址指定操作，则需要将地址修改为：加上(或减去)介于中间的base class subobjects大小。比较需要注意的是，如果在取drived class object的地址时进行偏移计算时，若其为指针，就需要判断其是否为0，若为0则基类object的地址也应为0。**当然，这些都是编译器的工作，我们需要了解，但不需要自己去实现。**\n\n> 如果要存取第二个(或后继)base class中的一个data member会是怎样的情况？需要付出额外的成本吗？ 不，members的位置在编译期就固定了，因此，存取members只是一个简单的offset运算，就像单一继承一样简单，不管是经由一个指针，一个reference或是一个object来存取。\n\n#### 4. 第四种情况：虚拟继承。\n虚拟继承的出现是为了避免多个相同base class subobject的出现，将其只保留一份，从而减少空间浪费。      \nclass如果含有一个或多个virtual base class subobjects将被分割为两部分：一个不变区域和一个共享区域。不变区域中的数据，总是能有固定的offset，这部分可以被直接存取，至于共享部分，所表现的就是virtual base class subobject ，这个部分数据，其位置因为每次派生操作而有变化，所以只能间接存取。\n> 一般而言，virtual base class最有效的一种运用形式就是：一个抽象的virtual base class，没有任何data members。\n\n#### 5、对象成员的效率\n程序员如果只关心起程序效率，应该实际测试，不能光凭推论、常识判断或假设。\n参考书籍作者所做的测试表明，虚拟继承所造成确实会严重影响data member的存取效率。\n\n## 五、指向Data members的指针(Pointer to Data Members)\n#### 1. 如果获取Data member的偏移值？偏移值应该为多少？\n通过如（&Point3d::z）这样的操作可以获得data member的偏移值。实际测试表明所获得的offset比预想大1，这是为什么？实际上这样做的目的是为了区分一个“没有指向任何data member”的指针，和一个指向“第一个data member”的指针的情况。比如：\n```\nfloat Point3d::*p1 = 0;//“没有指向任何data member”的指针\nfloat Point3d::*p2 = &Point3d::x;//指向“第一个data member”的指针\n\nif(p1 == p2) //如何区分?\n{\n    cout << \"p1 & p2 contain the same value --\" ;\n    cout << \" they must address the same member!\" << endl;\n}\n```\n因此，不论编译器或使用者都必须记住，在真正使用该值以指出一个member之前，请先减掉1。\n\n#### 2.“指向Member的指针”对数据的存取有什么影响？\n无继承时，指向member的指针对数据的存取操作，首先需要计算offset-1,其次具体的object需要用offset计算地址，会极大地降低效率，但目前的一些编译器提供了对应的优化，可以使其像直接通过对象取值一下快速。     \n有继承时，data member是直接放在class object中的，理论上不会影响代码的效率，但继承的使用会妨碍优化的效果。","source":"_posts/深度探索c++对象模型/《深度探索c++对象模型》（三）.md","raw":"---\ntitle: 《深度探索c++对象模型》（三）Data语意学\ndate: 2019-05-16 16:44:12\ntoc: true\ncomments: true\ntags:\n  - C++基础\ncategories:\n  - C++基础\n---\n\n本章的的主题是Data语意学，主要是探究编译器对class中的Data member的绑定、布局和存储等操作，最后探究Data member存取和多种继承方式之间的效率关系，以及指向Data member的指针的效率问题。\n<!--more-->\n\n### 前述\n> 本章的的主题是Data语意学，主要是探究编译器对class中的Data member的绑定、布局和存储等操作，最后探究Data member存取和多种继承方式之间的效率关系，以及指向Data member的指针的效率问题。\n\n------------------------------------\n参考书籍及链接：《深度探索c\\+\\+对象模型》    \n\n------------------------------------\n## 0、本章基础\n#### 1. 空类对象的大小是多少？\n```\nclass X { };//空类\n```\n对于空类，它有一个隐藏的1byte大小，那个被编译器安插进去的一个char,这使得这一class的两个objects得以在内存中配置独一无二的地址。\n\n#### 2. class object的size会受到哪些因素的影响？\n会影响class object的size的因素有如下三个，编译器：\n* 1. 语言本身所造成的额外负担：当语言支持virtual base classes时，就会导致一些额外负担。需要一个指针，它或者指向virtual base class subobject,或者指向一个相关的表格，表格用于存储subobject地址或偏移值。\n* 2. 编译器对于特殊情况所提供的优化处理：Virtual base class subobject的1 byte大小也会出现在derived class上。\n* 3. Alignment（边界对齐）的限制：在大部分的机器上，聚合的结构体大小会受到alignment的限制，使他们能够更有效率地在内存中被存取。比如32机器字上就是4的整数倍。\n\n#### 3. 各种类型data member的存放。\nnonstatic直接放在class object之中。static data member放置在程序的一个global data segment中，不会影响个别class object的大小。无论class产生多少个object,甚至是0个，其static data members永远也只存在一份实例。**但是一个template classs的static data members的行为稍有不同。**\n\n\n## 一、Data member的绑定\n#### 1. member function取用的是global还是local data member?\n当member funtion取用Data时，优先考虑member data,人们称这种情况为“member rewriting rule”，意思是对于member functions本身的分析，会直到整个class的声明都出现了才开始。在一个inline member function躯体之内的一个data member绑定操作，会在整个class声明之后才发生。\n> 以前人们提倡两种程序设计风格，即将所有的data members放在class声明起始处，或者把所有的inline  function都放在class声明之外。就是为解决绑定问题，但这种情况在c++ 2.0之后已经解决了。 \n\n#### 2. member function的argument list的情况又是怎么样的呢?\n与取用data member不同的是，argument list中的名称还是会在它们第一次 遭遇时被适当地决议（resolved）完成。\n```\ntypedef int length;\n\nclass Point3d{\npublic:\n    void mumble(length val) { _val=val;} //length被决议为global\n    length mumble() {return val;}\n    // ...\nprivate:\n    typedef float length;//这样的声明将使先前的参考操作不合法\n    length _val;\n    // ...\n};\n```\n> 虽然编译器能处理，但还是提倡一种防御性程序风格：即总是把“nested（嵌套的） type声明”放在class的起始处。    \n\n\n\n## 二、Data member的布局\n#### 1. Data  member是怎样被放置的？\n关于data member的布局，记住以下三点：\n* nonstatic data members在class object中的排列顺序和其被声明的顺序一样，任何中间介入的static data members都不会被放进对象布局之中。       \n* C++ standard允许编译器将多个access sections(也就是private、public、protected等区段)之中的data members整体自由排列，不必在乎他们的出现在class中的声明顺序（连续的两个privata也算两个section）。 \n* 编译器还可能会合成一些内部使用的data members，以支持整个对象模型，vptr就是这样的东西，当前所有的编译器都把它安插在每一个“内含virtual function之class”的object内。\n\n\n\n## 三、Data member的存取\n#### 1. 经由一个class object和一个指针存取data member，有重大差异吗？\n答案是显然的，这跟data member的类型和class的继承等都有关系，分如下两种情况讨论：\n* **data member 为 static**     \n  static data members会被编译器提出于class之外，并被视为一个global变量(但只在class生命范围内可见)。每一个static data member只有一个实例，存放在程序的data segment之中，通过一个指针和通过一个对象来存取data member都是一样的。  \n  \n  若取一个static data member的地址，会得到一个指向其数据类型的指针，而不是一个指向其class member的指针，因为static member并不内含在一个class object之中。   \n  \n  如果有两个classes，每一个都声明了一个同名的static member，编译器就会暗中对每一个static data member编码(对于这种手法有个很美的名称：name-mangling)，以获得一个独一无的程序识别代码。\n\n* **data member 为 nonstatic**    \n  Nonstatic data members直接存放在每一个class object之中。只有经过class object才能存取它们（implicit 存取如this指针）。欲对一个nonstatic data member进行存取操作，编译器需要把class object的起始地址加上data member的偏移位置(offset)。     \n\n  每一个nonstatic data member的偏移位置(offset)在编译时期即可获知，甚至如果member属于一个base class subobject(派生自单一或多重继承串链)也是一样的。因此，存取一个nonstatic data member，其效率和存取一个C struct member或一个nonderived class的member是一样的。\n  \n  但是如果该data member是一个virtual base class 的member,那么通过**指针**的存取速度会稍慢一点。（指针的真正class type 只有在执行器才真正确定）。  \n  \n  \n## 四、“继承”与Data Member\n> C++ standard未强制指定derived class members和base class members的排列顺序，理论上编译器可以自由安排之。在大部分编译器上头，base class members总是先出现，但属于virtual base class的除外。“继承”会对Data Member的布局有什么影响？接下来分四种情况进行讨论。\n\n#### 1. 第一种情况：只要继承不要多态。\n这种情况不会存储时间上的额外负担，由于base class和derived class的objects都是从相同的地址开始，其差异只在于derived object 比较大，用以容纳自建的nonstatic data members，把一个derived class object指定给base class 的指针或引用，并不需要编译器去调停或修改地址，可以提供了最佳执行效率。\n\n#### 2. 第二种情况：加上多态。\n加上virtual function接口后，弹性增加了，但也同时增加了空间和存取时间上的额外负担，如何取舍，视多态程序所带来的利益。可能带来的额外负担如下：\n* 导入一个和virtual table ，用来存储它所声明的每一个virtual functions的地址。再加上一两个slots(type_info)。\n* 在每一个class object中导入一个vptr,提供执行期的链接，使每一个object能够找到相应的virtual table。\n* 加强constructor，使它能够为vptr设定初始值，让它指向class所对应的virtual table。\n* 加强destructor，使它能够消抹“指向class 相关virtual table”的vptr。\n\n#### 3. 第三种情况：多重继承。\n对于单一继承，如果没有virtual function，那么编译器就不需要做其他工作;但如果base class没有virtual function而derived class有，并且vptr放在object首部，那么当把一个derived object转换为其base object时，就需要编译器对vptr进行调整。在既是多重继承又是虚拟继承的情况下，编译器的需要做的会更多。    \n对一个多重派生对象，将其地址指定给“最左端(也就是第一个)base class的指针”，情况将和单一继承时相同，因为二者都指向相同的起始地址。至于第二个或后继的base class的地址指定操作，则需要将地址修改为：加上(或减去)介于中间的base class subobjects大小。比较需要注意的是，如果在取drived class object的地址时进行偏移计算时，若其为指针，就需要判断其是否为0，若为0则基类object的地址也应为0。**当然，这些都是编译器的工作，我们需要了解，但不需要自己去实现。**\n\n> 如果要存取第二个(或后继)base class中的一个data member会是怎样的情况？需要付出额外的成本吗？ 不，members的位置在编译期就固定了，因此，存取members只是一个简单的offset运算，就像单一继承一样简单，不管是经由一个指针，一个reference或是一个object来存取。\n\n#### 4. 第四种情况：虚拟继承。\n虚拟继承的出现是为了避免多个相同base class subobject的出现，将其只保留一份，从而减少空间浪费。      \nclass如果含有一个或多个virtual base class subobjects将被分割为两部分：一个不变区域和一个共享区域。不变区域中的数据，总是能有固定的offset，这部分可以被直接存取，至于共享部分，所表现的就是virtual base class subobject ，这个部分数据，其位置因为每次派生操作而有变化，所以只能间接存取。\n> 一般而言，virtual base class最有效的一种运用形式就是：一个抽象的virtual base class，没有任何data members。\n\n#### 5、对象成员的效率\n程序员如果只关心起程序效率，应该实际测试，不能光凭推论、常识判断或假设。\n参考书籍作者所做的测试表明，虚拟继承所造成确实会严重影响data member的存取效率。\n\n## 五、指向Data members的指针(Pointer to Data Members)\n#### 1. 如果获取Data member的偏移值？偏移值应该为多少？\n通过如（&Point3d::z）这样的操作可以获得data member的偏移值。实际测试表明所获得的offset比预想大1，这是为什么？实际上这样做的目的是为了区分一个“没有指向任何data member”的指针，和一个指向“第一个data member”的指针的情况。比如：\n```\nfloat Point3d::*p1 = 0;//“没有指向任何data member”的指针\nfloat Point3d::*p2 = &Point3d::x;//指向“第一个data member”的指针\n\nif(p1 == p2) //如何区分?\n{\n    cout << \"p1 & p2 contain the same value --\" ;\n    cout << \" they must address the same member!\" << endl;\n}\n```\n因此，不论编译器或使用者都必须记住，在真正使用该值以指出一个member之前，请先减掉1。\n\n#### 2.“指向Member的指针”对数据的存取有什么影响？\n无继承时，指向member的指针对数据的存取操作，首先需要计算offset-1,其次具体的object需要用offset计算地址，会极大地降低效率，但目前的一些编译器提供了对应的优化，可以使其像直接通过对象取值一下快速。     \n有继承时，data member是直接放在class object中的，理论上不会影响代码的效率，但继承的使用会妨碍优化的效果。","slug":"深度探索c++对象模型/《深度探索c++对象模型》（三）","published":1,"updated":"2019-05-16T09:32:42.031Z","_id":"cjvqga0qf000679jxy6kddpp1","layout":"post","photos":[],"link":"","content":"<p>本章的的主题是Data语意学，主要是探究编译器对class中的Data member的绑定、布局和存储等操作，最后探究Data member存取和多种继承方式之间的效率关系，以及指向Data member的指针的效率问题。<br><a id=\"more\"></a></p>\n<h3 id=\"前述\"><a href=\"#前述\" class=\"headerlink\" title=\"前述\"></a>前述</h3><blockquote>\n<p>本章的的主题是Data语意学，主要是探究编译器对class中的Data member的绑定、布局和存储等操作，最后探究Data member存取和多种继承方式之间的效率关系，以及指向Data member的指针的效率问题。</p>\n</blockquote>\n<hr>\n<p>参考书籍及链接：《深度探索c++对象模型》    </p>\n<hr>\n<h2 id=\"0、本章基础\"><a href=\"#0、本章基础\" class=\"headerlink\" title=\"0、本章基础\"></a>0、本章基础</h2><h4 id=\"1-空类对象的大小是多少？\"><a href=\"#1-空类对象的大小是多少？\" class=\"headerlink\" title=\"1. 空类对象的大小是多少？\"></a>1. 空类对象的大小是多少？</h4><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">X</span> </span>&#123; &#125;;<span class=\"comment\">//空类</span></span><br></pre></td></tr></table></figure>\n<p>对于空类，它有一个隐藏的1byte大小，那个被编译器安插进去的一个char,这使得这一class的两个objects得以在内存中配置独一无二的地址。</p>\n<h4 id=\"2-class-object的size会受到哪些因素的影响？\"><a href=\"#2-class-object的size会受到哪些因素的影响？\" class=\"headerlink\" title=\"2. class object的size会受到哪些因素的影响？\"></a>2. class object的size会受到哪些因素的影响？</h4><p>会影响class object的size的因素有如下三个，编译器：</p>\n<ul>\n<li><ol>\n<li>语言本身所造成的额外负担：当语言支持virtual base classes时，就会导致一些额外负担。需要一个指针，它或者指向virtual base class subobject,或者指向一个相关的表格，表格用于存储subobject地址或偏移值。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>编译器对于特殊情况所提供的优化处理：Virtual base class subobject的1 byte大小也会出现在derived class上。</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>Alignment（边界对齐）的限制：在大部分的机器上，聚合的结构体大小会受到alignment的限制，使他们能够更有效率地在内存中被存取。比如32机器字上就是4的整数倍。</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"3-各种类型data-member的存放。\"><a href=\"#3-各种类型data-member的存放。\" class=\"headerlink\" title=\"3. 各种类型data member的存放。\"></a>3. 各种类型data member的存放。</h4><p>nonstatic直接放在class object之中。static data member放置在程序的一个global data segment中，不会影响个别class object的大小。无论class产生多少个object,甚至是0个，其static data members永远也只存在一份实例。<strong>但是一个template classs的static data members的行为稍有不同。</strong></p>\n<h2 id=\"一、Data-member的绑定\"><a href=\"#一、Data-member的绑定\" class=\"headerlink\" title=\"一、Data member的绑定\"></a>一、Data member的绑定</h2><h4 id=\"1-member-function取用的是global还是local-data-member\"><a href=\"#1-member-function取用的是global还是local-data-member\" class=\"headerlink\" title=\"1. member function取用的是global还是local data member?\"></a>1. member function取用的是global还是local data member?</h4><p>当member funtion取用Data时，优先考虑member data,人们称这种情况为“member rewriting rule”，意思是对于member functions本身的分析，会直到整个class的声明都出现了才开始。在一个inline member function躯体之内的一个data member绑定操作，会在整个class声明之后才发生。</p>\n<blockquote>\n<p>以前人们提倡两种程序设计风格，即将所有的data members放在class声明起始处，或者把所有的inline  function都放在class声明之外。就是为解决绑定问题，但这种情况在c++ 2.0之后已经解决了。 </p>\n</blockquote>\n<h4 id=\"2-member-function的argument-list的情况又是怎么样的呢\"><a href=\"#2-member-function的argument-list的情况又是怎么样的呢\" class=\"headerlink\" title=\"2. member function的argument list的情况又是怎么样的呢?\"></a>2. member function的argument list的情况又是怎么样的呢?</h4><p>与取用data member不同的是，argument list中的名称还是会在它们第一次 遭遇时被适当地决议（resolved）完成。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> length;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point3d</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mumble</span><span class=\"params\">(length val)</span> </span>&#123; _val=val;&#125; <span class=\"comment\">//length被决议为global</span></span><br><span class=\"line\">    <span class=\"function\">length <span class=\"title\">mumble</span><span class=\"params\">()</span> </span>&#123;<span class=\"keyword\">return</span> val;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">float</span> length;<span class=\"comment\">//这样的声明将使先前的参考操作不合法</span></span><br><span class=\"line\">    length _val;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>虽然编译器能处理，但还是提倡一种防御性程序风格：即总是把“nested（嵌套的） type声明”放在class的起始处。    </p>\n</blockquote>\n<h2 id=\"二、Data-member的布局\"><a href=\"#二、Data-member的布局\" class=\"headerlink\" title=\"二、Data member的布局\"></a>二、Data member的布局</h2><h4 id=\"1-Data-member是怎样被放置的？\"><a href=\"#1-Data-member是怎样被放置的？\" class=\"headerlink\" title=\"1. Data  member是怎样被放置的？\"></a>1. Data  member是怎样被放置的？</h4><p>关于data member的布局，记住以下三点：</p>\n<ul>\n<li>nonstatic data members在class object中的排列顺序和其被声明的顺序一样，任何中间介入的static data members都不会被放进对象布局之中。       </li>\n<li>C++ standard允许编译器将多个access sections(也就是private、public、protected等区段)之中的data members整体自由排列，不必在乎他们的出现在class中的声明顺序（连续的两个privata也算两个section）。 </li>\n<li>编译器还可能会合成一些内部使用的data members，以支持整个对象模型，vptr就是这样的东西，当前所有的编译器都把它安插在每一个“内含virtual function之class”的object内。</li>\n</ul>\n<h2 id=\"三、Data-member的存取\"><a href=\"#三、Data-member的存取\" class=\"headerlink\" title=\"三、Data member的存取\"></a>三、Data member的存取</h2><h4 id=\"1-经由一个class-object和一个指针存取data-member，有重大差异吗？\"><a href=\"#1-经由一个class-object和一个指针存取data-member，有重大差异吗？\" class=\"headerlink\" title=\"1. 经由一个class object和一个指针存取data member，有重大差异吗？\"></a>1. 经由一个class object和一个指针存取data member，有重大差异吗？</h4><p>答案是显然的，这跟data member的类型和class的继承等都有关系，分如下两种情况讨论：</p>\n<ul>\n<li><p><strong>data member 为 static</strong><br>static data members会被编译器提出于class之外，并被视为一个global变量(但只在class生命范围内可见)。每一个static data member只有一个实例，存放在程序的data segment之中，通过一个指针和通过一个对象来存取data member都是一样的。  </p>\n<p>若取一个static data member的地址，会得到一个指向其数据类型的指针，而不是一个指向其class member的指针，因为static member并不内含在一个class object之中。   </p>\n<p>如果有两个classes，每一个都声明了一个同名的static member，编译器就会暗中对每一个static data member编码(对于这种手法有个很美的名称：name-mangling)，以获得一个独一无的程序识别代码。</p>\n</li>\n<li><p><strong>data member 为 nonstatic</strong><br>Nonstatic data members直接存放在每一个class object之中。只有经过class object才能存取它们（implicit 存取如this指针）。欲对一个nonstatic data member进行存取操作，编译器需要把class object的起始地址加上data member的偏移位置(offset)。     </p>\n<p>每一个nonstatic data member的偏移位置(offset)在编译时期即可获知，甚至如果member属于一个base class subobject(派生自单一或多重继承串链)也是一样的。因此，存取一个nonstatic data member，其效率和存取一个C struct member或一个nonderived class的member是一样的。</p>\n<p>但是如果该data member是一个virtual base class 的member,那么通过<strong>指针</strong>的存取速度会稍慢一点。（指针的真正class type 只有在执行器才真正确定）。  </p>\n</li>\n</ul>\n<h2 id=\"四、“继承”与Data-Member\"><a href=\"#四、“继承”与Data-Member\" class=\"headerlink\" title=\"四、“继承”与Data Member\"></a>四、“继承”与Data Member</h2><blockquote>\n<p>C++ standard未强制指定derived class members和base class members的排列顺序，理论上编译器可以自由安排之。在大部分编译器上头，base class members总是先出现，但属于virtual base class的除外。“继承”会对Data Member的布局有什么影响？接下来分四种情况进行讨论。</p>\n</blockquote>\n<h4 id=\"1-第一种情况：只要继承不要多态。\"><a href=\"#1-第一种情况：只要继承不要多态。\" class=\"headerlink\" title=\"1. 第一种情况：只要继承不要多态。\"></a>1. 第一种情况：只要继承不要多态。</h4><p>这种情况不会存储时间上的额外负担，由于base class和derived class的objects都是从相同的地址开始，其差异只在于derived object 比较大，用以容纳自建的nonstatic data members，把一个derived class object指定给base class 的指针或引用，并不需要编译器去调停或修改地址，可以提供了最佳执行效率。</p>\n<h4 id=\"2-第二种情况：加上多态。\"><a href=\"#2-第二种情况：加上多态。\" class=\"headerlink\" title=\"2. 第二种情况：加上多态。\"></a>2. 第二种情况：加上多态。</h4><p>加上virtual function接口后，弹性增加了，但也同时增加了空间和存取时间上的额外负担，如何取舍，视多态程序所带来的利益。可能带来的额外负担如下：</p>\n<ul>\n<li>导入一个和virtual table ，用来存储它所声明的每一个virtual functions的地址。再加上一两个slots(type_info)。</li>\n<li>在每一个class object中导入一个vptr,提供执行期的链接，使每一个object能够找到相应的virtual table。</li>\n<li>加强constructor，使它能够为vptr设定初始值，让它指向class所对应的virtual table。</li>\n<li>加强destructor，使它能够消抹“指向class 相关virtual table”的vptr。</li>\n</ul>\n<h4 id=\"3-第三种情况：多重继承。\"><a href=\"#3-第三种情况：多重继承。\" class=\"headerlink\" title=\"3. 第三种情况：多重继承。\"></a>3. 第三种情况：多重继承。</h4><p>对于单一继承，如果没有virtual function，那么编译器就不需要做其他工作;但如果base class没有virtual function而derived class有，并且vptr放在object首部，那么当把一个derived object转换为其base object时，就需要编译器对vptr进行调整。在既是多重继承又是虚拟继承的情况下，编译器的需要做的会更多。<br>对一个多重派生对象，将其地址指定给“最左端(也就是第一个)base class的指针”，情况将和单一继承时相同，因为二者都指向相同的起始地址。至于第二个或后继的base class的地址指定操作，则需要将地址修改为：加上(或减去)介于中间的base class subobjects大小。比较需要注意的是，如果在取drived class object的地址时进行偏移计算时，若其为指针，就需要判断其是否为0，若为0则基类object的地址也应为0。<strong>当然，这些都是编译器的工作，我们需要了解，但不需要自己去实现。</strong></p>\n<blockquote>\n<p>如果要存取第二个(或后继)base class中的一个data member会是怎样的情况？需要付出额外的成本吗？ 不，members的位置在编译期就固定了，因此，存取members只是一个简单的offset运算，就像单一继承一样简单，不管是经由一个指针，一个reference或是一个object来存取。</p>\n</blockquote>\n<h4 id=\"4-第四种情况：虚拟继承。\"><a href=\"#4-第四种情况：虚拟继承。\" class=\"headerlink\" title=\"4. 第四种情况：虚拟继承。\"></a>4. 第四种情况：虚拟继承。</h4><p>虚拟继承的出现是为了避免多个相同base class subobject的出现，将其只保留一份，从而减少空间浪费。<br>class如果含有一个或多个virtual base class subobjects将被分割为两部分：一个不变区域和一个共享区域。不变区域中的数据，总是能有固定的offset，这部分可以被直接存取，至于共享部分，所表现的就是virtual base class subobject ，这个部分数据，其位置因为每次派生操作而有变化，所以只能间接存取。</p>\n<blockquote>\n<p>一般而言，virtual base class最有效的一种运用形式就是：一个抽象的virtual base class，没有任何data members。</p>\n</blockquote>\n<h4 id=\"5、对象成员的效率\"><a href=\"#5、对象成员的效率\" class=\"headerlink\" title=\"5、对象成员的效率\"></a>5、对象成员的效率</h4><p>程序员如果只关心起程序效率，应该实际测试，不能光凭推论、常识判断或假设。<br>参考书籍作者所做的测试表明，虚拟继承所造成确实会严重影响data member的存取效率。</p>\n<h2 id=\"五、指向Data-members的指针-Pointer-to-Data-Members\"><a href=\"#五、指向Data-members的指针-Pointer-to-Data-Members\" class=\"headerlink\" title=\"五、指向Data members的指针(Pointer to Data Members)\"></a>五、指向Data members的指针(Pointer to Data Members)</h2><h4 id=\"1-如果获取Data-member的偏移值？偏移值应该为多少？\"><a href=\"#1-如果获取Data-member的偏移值？偏移值应该为多少？\" class=\"headerlink\" title=\"1. 如果获取Data member的偏移值？偏移值应该为多少？\"></a>1. 如果获取Data member的偏移值？偏移值应该为多少？</h4><p>通过如（&amp;Point3d::z）这样的操作可以获得data member的偏移值。实际测试表明所获得的offset比预想大1，这是为什么？实际上这样做的目的是为了区分一个“没有指向任何data member”的指针，和一个指向“第一个data member”的指针的情况。比如：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">float</span> Point3d::*p1 = <span class=\"number\">0</span>;<span class=\"comment\">//“没有指向任何data member”的指针</span></span><br><span class=\"line\"><span class=\"keyword\">float</span> Point3d::*p2 = &amp;Point3d::x;<span class=\"comment\">//指向“第一个data member”的指针</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(p1 == p2) <span class=\"comment\">//如何区分?</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"p1 &amp; p2 contain the same value --\"</span> ;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" they must address the same member!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>因此，不论编译器或使用者都必须记住，在真正使用该值以指出一个member之前，请先减掉1。</p>\n<h4 id=\"2-“指向Member的指针”对数据的存取有什么影响？\"><a href=\"#2-“指向Member的指针”对数据的存取有什么影响？\" class=\"headerlink\" title=\"2.“指向Member的指针”对数据的存取有什么影响？\"></a>2.“指向Member的指针”对数据的存取有什么影响？</h4><p>无继承时，指向member的指针对数据的存取操作，首先需要计算offset-1,其次具体的object需要用offset计算地址，会极大地降低效率，但目前的一些编译器提供了对应的优化，可以使其像直接通过对象取值一下快速。<br>有继承时，data member是直接放在class object中的，理论上不会影响代码的效率，但继承的使用会妨碍优化的效果。</p>\n","site":{"data":{}},"excerpt":"<p>本章的的主题是Data语意学，主要是探究编译器对class中的Data member的绑定、布局和存储等操作，最后探究Data member存取和多种继承方式之间的效率关系，以及指向Data member的指针的效率问题。<br>","more":"</p>\n<h3 id=\"前述\"><a href=\"#前述\" class=\"headerlink\" title=\"前述\"></a>前述</h3><blockquote>\n<p>本章的的主题是Data语意学，主要是探究编译器对class中的Data member的绑定、布局和存储等操作，最后探究Data member存取和多种继承方式之间的效率关系，以及指向Data member的指针的效率问题。</p>\n</blockquote>\n<hr>\n<p>参考书籍及链接：《深度探索c++对象模型》    </p>\n<hr>\n<h2 id=\"0、本章基础\"><a href=\"#0、本章基础\" class=\"headerlink\" title=\"0、本章基础\"></a>0、本章基础</h2><h4 id=\"1-空类对象的大小是多少？\"><a href=\"#1-空类对象的大小是多少？\" class=\"headerlink\" title=\"1. 空类对象的大小是多少？\"></a>1. 空类对象的大小是多少？</h4><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">X</span> </span>&#123; &#125;;<span class=\"comment\">//空类</span></span><br></pre></td></tr></table></figure>\n<p>对于空类，它有一个隐藏的1byte大小，那个被编译器安插进去的一个char,这使得这一class的两个objects得以在内存中配置独一无二的地址。</p>\n<h4 id=\"2-class-object的size会受到哪些因素的影响？\"><a href=\"#2-class-object的size会受到哪些因素的影响？\" class=\"headerlink\" title=\"2. class object的size会受到哪些因素的影响？\"></a>2. class object的size会受到哪些因素的影响？</h4><p>会影响class object的size的因素有如下三个，编译器：</p>\n<ul>\n<li><ol>\n<li>语言本身所造成的额外负担：当语言支持virtual base classes时，就会导致一些额外负担。需要一个指针，它或者指向virtual base class subobject,或者指向一个相关的表格，表格用于存储subobject地址或偏移值。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>编译器对于特殊情况所提供的优化处理：Virtual base class subobject的1 byte大小也会出现在derived class上。</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>Alignment（边界对齐）的限制：在大部分的机器上，聚合的结构体大小会受到alignment的限制，使他们能够更有效率地在内存中被存取。比如32机器字上就是4的整数倍。</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"3-各种类型data-member的存放。\"><a href=\"#3-各种类型data-member的存放。\" class=\"headerlink\" title=\"3. 各种类型data member的存放。\"></a>3. 各种类型data member的存放。</h4><p>nonstatic直接放在class object之中。static data member放置在程序的一个global data segment中，不会影响个别class object的大小。无论class产生多少个object,甚至是0个，其static data members永远也只存在一份实例。<strong>但是一个template classs的static data members的行为稍有不同。</strong></p>\n<h2 id=\"一、Data-member的绑定\"><a href=\"#一、Data-member的绑定\" class=\"headerlink\" title=\"一、Data member的绑定\"></a>一、Data member的绑定</h2><h4 id=\"1-member-function取用的是global还是local-data-member\"><a href=\"#1-member-function取用的是global还是local-data-member\" class=\"headerlink\" title=\"1. member function取用的是global还是local data member?\"></a>1. member function取用的是global还是local data member?</h4><p>当member funtion取用Data时，优先考虑member data,人们称这种情况为“member rewriting rule”，意思是对于member functions本身的分析，会直到整个class的声明都出现了才开始。在一个inline member function躯体之内的一个data member绑定操作，会在整个class声明之后才发生。</p>\n<blockquote>\n<p>以前人们提倡两种程序设计风格，即将所有的data members放在class声明起始处，或者把所有的inline  function都放在class声明之外。就是为解决绑定问题，但这种情况在c++ 2.0之后已经解决了。 </p>\n</blockquote>\n<h4 id=\"2-member-function的argument-list的情况又是怎么样的呢\"><a href=\"#2-member-function的argument-list的情况又是怎么样的呢\" class=\"headerlink\" title=\"2. member function的argument list的情况又是怎么样的呢?\"></a>2. member function的argument list的情况又是怎么样的呢?</h4><p>与取用data member不同的是，argument list中的名称还是会在它们第一次 遭遇时被适当地决议（resolved）完成。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">int</span> length;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point3d</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mumble</span><span class=\"params\">(length val)</span> </span>&#123; _val=val;&#125; <span class=\"comment\">//length被决议为global</span></span><br><span class=\"line\">    <span class=\"function\">length <span class=\"title\">mumble</span><span class=\"params\">()</span> </span>&#123;<span class=\"keyword\">return</span> val;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">float</span> length;<span class=\"comment\">//这样的声明将使先前的参考操作不合法</span></span><br><span class=\"line\">    length _val;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>虽然编译器能处理，但还是提倡一种防御性程序风格：即总是把“nested（嵌套的） type声明”放在class的起始处。    </p>\n</blockquote>\n<h2 id=\"二、Data-member的布局\"><a href=\"#二、Data-member的布局\" class=\"headerlink\" title=\"二、Data member的布局\"></a>二、Data member的布局</h2><h4 id=\"1-Data-member是怎样被放置的？\"><a href=\"#1-Data-member是怎样被放置的？\" class=\"headerlink\" title=\"1. Data  member是怎样被放置的？\"></a>1. Data  member是怎样被放置的？</h4><p>关于data member的布局，记住以下三点：</p>\n<ul>\n<li>nonstatic data members在class object中的排列顺序和其被声明的顺序一样，任何中间介入的static data members都不会被放进对象布局之中。       </li>\n<li>C++ standard允许编译器将多个access sections(也就是private、public、protected等区段)之中的data members整体自由排列，不必在乎他们的出现在class中的声明顺序（连续的两个privata也算两个section）。 </li>\n<li>编译器还可能会合成一些内部使用的data members，以支持整个对象模型，vptr就是这样的东西，当前所有的编译器都把它安插在每一个“内含virtual function之class”的object内。</li>\n</ul>\n<h2 id=\"三、Data-member的存取\"><a href=\"#三、Data-member的存取\" class=\"headerlink\" title=\"三、Data member的存取\"></a>三、Data member的存取</h2><h4 id=\"1-经由一个class-object和一个指针存取data-member，有重大差异吗？\"><a href=\"#1-经由一个class-object和一个指针存取data-member，有重大差异吗？\" class=\"headerlink\" title=\"1. 经由一个class object和一个指针存取data member，有重大差异吗？\"></a>1. 经由一个class object和一个指针存取data member，有重大差异吗？</h4><p>答案是显然的，这跟data member的类型和class的继承等都有关系，分如下两种情况讨论：</p>\n<ul>\n<li><p><strong>data member 为 static</strong><br>static data members会被编译器提出于class之外，并被视为一个global变量(但只在class生命范围内可见)。每一个static data member只有一个实例，存放在程序的data segment之中，通过一个指针和通过一个对象来存取data member都是一样的。  </p>\n<p>若取一个static data member的地址，会得到一个指向其数据类型的指针，而不是一个指向其class member的指针，因为static member并不内含在一个class object之中。   </p>\n<p>如果有两个classes，每一个都声明了一个同名的static member，编译器就会暗中对每一个static data member编码(对于这种手法有个很美的名称：name-mangling)，以获得一个独一无的程序识别代码。</p>\n</li>\n<li><p><strong>data member 为 nonstatic</strong><br>Nonstatic data members直接存放在每一个class object之中。只有经过class object才能存取它们（implicit 存取如this指针）。欲对一个nonstatic data member进行存取操作，编译器需要把class object的起始地址加上data member的偏移位置(offset)。     </p>\n<p>每一个nonstatic data member的偏移位置(offset)在编译时期即可获知，甚至如果member属于一个base class subobject(派生自单一或多重继承串链)也是一样的。因此，存取一个nonstatic data member，其效率和存取一个C struct member或一个nonderived class的member是一样的。</p>\n<p>但是如果该data member是一个virtual base class 的member,那么通过<strong>指针</strong>的存取速度会稍慢一点。（指针的真正class type 只有在执行器才真正确定）。  </p>\n</li>\n</ul>\n<h2 id=\"四、“继承”与Data-Member\"><a href=\"#四、“继承”与Data-Member\" class=\"headerlink\" title=\"四、“继承”与Data Member\"></a>四、“继承”与Data Member</h2><blockquote>\n<p>C++ standard未强制指定derived class members和base class members的排列顺序，理论上编译器可以自由安排之。在大部分编译器上头，base class members总是先出现，但属于virtual base class的除外。“继承”会对Data Member的布局有什么影响？接下来分四种情况进行讨论。</p>\n</blockquote>\n<h4 id=\"1-第一种情况：只要继承不要多态。\"><a href=\"#1-第一种情况：只要继承不要多态。\" class=\"headerlink\" title=\"1. 第一种情况：只要继承不要多态。\"></a>1. 第一种情况：只要继承不要多态。</h4><p>这种情况不会存储时间上的额外负担，由于base class和derived class的objects都是从相同的地址开始，其差异只在于derived object 比较大，用以容纳自建的nonstatic data members，把一个derived class object指定给base class 的指针或引用，并不需要编译器去调停或修改地址，可以提供了最佳执行效率。</p>\n<h4 id=\"2-第二种情况：加上多态。\"><a href=\"#2-第二种情况：加上多态。\" class=\"headerlink\" title=\"2. 第二种情况：加上多态。\"></a>2. 第二种情况：加上多态。</h4><p>加上virtual function接口后，弹性增加了，但也同时增加了空间和存取时间上的额外负担，如何取舍，视多态程序所带来的利益。可能带来的额外负担如下：</p>\n<ul>\n<li>导入一个和virtual table ，用来存储它所声明的每一个virtual functions的地址。再加上一两个slots(type_info)。</li>\n<li>在每一个class object中导入一个vptr,提供执行期的链接，使每一个object能够找到相应的virtual table。</li>\n<li>加强constructor，使它能够为vptr设定初始值，让它指向class所对应的virtual table。</li>\n<li>加强destructor，使它能够消抹“指向class 相关virtual table”的vptr。</li>\n</ul>\n<h4 id=\"3-第三种情况：多重继承。\"><a href=\"#3-第三种情况：多重继承。\" class=\"headerlink\" title=\"3. 第三种情况：多重继承。\"></a>3. 第三种情况：多重继承。</h4><p>对于单一继承，如果没有virtual function，那么编译器就不需要做其他工作;但如果base class没有virtual function而derived class有，并且vptr放在object首部，那么当把一个derived object转换为其base object时，就需要编译器对vptr进行调整。在既是多重继承又是虚拟继承的情况下，编译器的需要做的会更多。<br>对一个多重派生对象，将其地址指定给“最左端(也就是第一个)base class的指针”，情况将和单一继承时相同，因为二者都指向相同的起始地址。至于第二个或后继的base class的地址指定操作，则需要将地址修改为：加上(或减去)介于中间的base class subobjects大小。比较需要注意的是，如果在取drived class object的地址时进行偏移计算时，若其为指针，就需要判断其是否为0，若为0则基类object的地址也应为0。<strong>当然，这些都是编译器的工作，我们需要了解，但不需要自己去实现。</strong></p>\n<blockquote>\n<p>如果要存取第二个(或后继)base class中的一个data member会是怎样的情况？需要付出额外的成本吗？ 不，members的位置在编译期就固定了，因此，存取members只是一个简单的offset运算，就像单一继承一样简单，不管是经由一个指针，一个reference或是一个object来存取。</p>\n</blockquote>\n<h4 id=\"4-第四种情况：虚拟继承。\"><a href=\"#4-第四种情况：虚拟继承。\" class=\"headerlink\" title=\"4. 第四种情况：虚拟继承。\"></a>4. 第四种情况：虚拟继承。</h4><p>虚拟继承的出现是为了避免多个相同base class subobject的出现，将其只保留一份，从而减少空间浪费。<br>class如果含有一个或多个virtual base class subobjects将被分割为两部分：一个不变区域和一个共享区域。不变区域中的数据，总是能有固定的offset，这部分可以被直接存取，至于共享部分，所表现的就是virtual base class subobject ，这个部分数据，其位置因为每次派生操作而有变化，所以只能间接存取。</p>\n<blockquote>\n<p>一般而言，virtual base class最有效的一种运用形式就是：一个抽象的virtual base class，没有任何data members。</p>\n</blockquote>\n<h4 id=\"5、对象成员的效率\"><a href=\"#5、对象成员的效率\" class=\"headerlink\" title=\"5、对象成员的效率\"></a>5、对象成员的效率</h4><p>程序员如果只关心起程序效率，应该实际测试，不能光凭推论、常识判断或假设。<br>参考书籍作者所做的测试表明，虚拟继承所造成确实会严重影响data member的存取效率。</p>\n<h2 id=\"五、指向Data-members的指针-Pointer-to-Data-Members\"><a href=\"#五、指向Data-members的指针-Pointer-to-Data-Members\" class=\"headerlink\" title=\"五、指向Data members的指针(Pointer to Data Members)\"></a>五、指向Data members的指针(Pointer to Data Members)</h2><h4 id=\"1-如果获取Data-member的偏移值？偏移值应该为多少？\"><a href=\"#1-如果获取Data-member的偏移值？偏移值应该为多少？\" class=\"headerlink\" title=\"1. 如果获取Data member的偏移值？偏移值应该为多少？\"></a>1. 如果获取Data member的偏移值？偏移值应该为多少？</h4><p>通过如（&amp;Point3d::z）这样的操作可以获得data member的偏移值。实际测试表明所获得的offset比预想大1，这是为什么？实际上这样做的目的是为了区分一个“没有指向任何data member”的指针，和一个指向“第一个data member”的指针的情况。比如：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">float</span> Point3d::*p1 = <span class=\"number\">0</span>;<span class=\"comment\">//“没有指向任何data member”的指针</span></span><br><span class=\"line\"><span class=\"keyword\">float</span> Point3d::*p2 = &amp;Point3d::x;<span class=\"comment\">//指向“第一个data member”的指针</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>(p1 == p2) <span class=\"comment\">//如何区分?</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"p1 &amp; p2 contain the same value --\"</span> ;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\" they must address the same member!\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>因此，不论编译器或使用者都必须记住，在真正使用该值以指出一个member之前，请先减掉1。</p>\n<h4 id=\"2-“指向Member的指针”对数据的存取有什么影响？\"><a href=\"#2-“指向Member的指针”对数据的存取有什么影响？\" class=\"headerlink\" title=\"2.“指向Member的指针”对数据的存取有什么影响？\"></a>2.“指向Member的指针”对数据的存取有什么影响？</h4><p>无继承时，指向member的指针对数据的存取操作，首先需要计算offset-1,其次具体的object需要用offset计算地址，会极大地降低效率，但目前的一些编译器提供了对应的优化，可以使其像直接通过对象取值一下快速。<br>有继承时，data member是直接放在class object中的，理论上不会影响代码的效率，但继承的使用会妨碍优化的效果。</p>"},{"title":"《深度探索c++对象模型》（二）构造函数语意学","date":"2019-05-16T08:44:12.000Z","toc":true,"comments":1,"_content":"\n本章的的主题是构造函数语意学，主要是讨论constructor如何工作，以及它什么时候被合成，同时挖掘编译器对于“对象构造过程”的干涉，以及对于“程序形式”和“程序效率”上的冲击。\n<!--more-->\n\n### 前述\n> 本章的的主题是构造函数语意学，主要是讨论constructor如何工作，以及它什么时候被合成，同时挖掘编译器对于“对象构造过程”的干涉，以及对于“程序形式”和“程序效率”上的冲击。\n\n------------------------------------\n参考书籍及链接：《深度探索c\\+\\+对象模型》    \n\n------------------------------------\n## 一、Default Constructor的构造操作\n#### 1. 什么时候才会合成一个default construct呢？  \n   答案是当编译器需要的时候，default constructor会被合成出来，只执行编译器所需要的任务。另外要注意程序的需要和编译器的需要之间的区别，如果程序有需要，那是程序员的责任，就需要自己实现constructor。     \n   对于class X，如果没有任何user-declared constructor，那么会有一个default constructor被隐式(implicitly)声明出来...一个被隐式声明出来的default constructor将是一个trivial(浅薄而无能，没啥用的)constructor...  \n   一个nontrivial default constructor在ARM的术语中就是编译器需要的那种，必要的话由编译器合成出来。下面4小节分别讨论nontrivial default constructor的4种情况\n\n#### 2. 几种对象构建时的区别。\n   Global objects的内存保证会在程序启动的时候被清0。Local objects配置于程序的堆栈中，heap objects配置于自由空间，都不一定会被清零，它们的内容将是内存上次被使用的遗迹。\n  \n#### 3. 第一种情况：“带有Default Constructor”的member class object\n如果一个class没有任何constructor，但它内含一个member object，而后者有default constructor，那么这个class的implicit default constructor就是“nontrivial”，编译器为该class合成出一个default constructor。不过这个合成操作只有在constructor真正需要被调用时才会发生。\n\n#### 4. 多成员对象的情况。\n编译器的处理是：如果一个class A内含一个或者一个以上member class objects，那么class A的每一个constructor必须调用每一个member classes 的default constructor。编译器会扩张已存在的constructors,在其中安插一些代码，使得user code在被执行之前，先调用必要的default constructors。**调用顺序与member objects在class中的声明次序一致**。\n\n#### 5. 第二种情况：“带有Default constructor”的base class。\n如果一个没有任何constructors的class派生自一个“带有default constructor”的base class，那么这个derived class的default constructor会被视为nontrivial，并因此需要被合成出来。对于一个后继派生的class而言，这个合成的constructor和一个“被显式提供的default constructor”并没有差异。\n> 注意一点，如果有constructor,但没有default constructor,那就会对每一个constructors进行扩充。如果亦存在Member Class Object，那些default constructor也会在base class constructor都被调用之后调用。\n\n#### 6. 第三种情况：“带有一个Virtual Funtion”的class。\n如果class声明(或继承)一个virtual function，编译器也需要合成出default constructor或扩充construtor。下面两个扩张行动会在编译期间发生：\n* 一个virtual function table(在cfront中被称为vtbl)会被编译期产生出来，内放class的virtual functions地址。\n* 在每一个class object中，一个额外的pointer member(也就是vptr)会被编译期合成出来，内含相关之class vtbl的地址。\n\n> 编译器会为每一个含有virtual function的class objects的vptr进行适当的初始化，以放置适当的virtual table地址。\n\n#### 7. 第四种情况：“带有一个virtual base class”的class。\n如果class派生自一个继承串链，其中有一个或更多的virtual base classes编译器也需要合成出default constructor或扩充construtor。其目的在于必须使 virtual base class 在其每一个derived class object中的位置能够在执行期准备妥当。对于class所定义的每一个constructor。编译器都会安插那些“允许每一个virtual base class 的执行期存取操作”的代码。\n\n#### 8. 总结。\n除以上四种情况外，在没有声明constructor时就默认其是无用的， 其default constructor也就不会被合成出来的。     \n在合成的default constructor中，只有base class subobjects和member class objects会被初始化。所有其他的nonstatic data member ，如整数，整数指针，整数数组等是不会被初始化的，这些初始化操作对程序是必须的，但对编译器则并非需要的。   \nC++新手一般有两个误解：\n* 任何class 如果没有定义default constructor ，就会被合成出来一个。\n* 编译器合成出来的default constructor 会明确设定 class 内每一个data member的默认值。\n\n\n\n## 二、Copy Constructor的构造操作\n#### 1. 哪些情况需要有copy constructor？\n有三种情况，会以一个object的内容作为另一class object的初值，即需要有 copy constructor。\n* 1. 把一个object直接赋值给另一个object进行初值。\n* 2. 当object被当做参数交给某个函数\n* 3. 当函数返回一个class object。\n\n> 一个class object可用两种方式复制得到，一种是被初始化，另一种是赋值。从概念上看，这两种操作分别是以copy constructor和copy assignment operator完成的。      \n> Default constructors和copy constructor在**必要的时候**才由编译器 产生，这里的“必要”意指当class不展现bitwise copy sematics时。\n\n#### 2. Default Memberwise Initialization\n当class object以“**相同**的另一个object作为初值是，其内部是以所谓的default memberwise initialization方式完成的。也就是把每一个内建的或派生的data member（例如一个数组或指针）的值，从某个object拷贝一份到另一个object上，但不拷贝其具体内容。例如只拷贝指针地址，不拷贝一份新的指针指向的对象，这也就是**浅拷贝**，不过它并不会拷贝其中member class object，而是以递归的方式实行memberwise initialization。\n\n#### 3. 递归的memberwise initialization是如何实现的呢？\n答案就是Bitwise Copy Semantics和default copy constructor。如果class展现了Bitwise Copy Semantics，则使用bitwise copy（bitwise copy semantics编译器生成的伪代码是memcpy函数），否则编译器会生成default copy constructor。\n\n#### 4. Memberwise copy(深拷贝)与Bitwise copy(浅拷贝)的区别\nMemberwise copy: 在初始化一个对象期间,基类的构造函数被调用,成员变量被调用,如果它们有构造函数的时候,它们的构造函数被调用,这个过程是一个递归的过程。\nBitwise copy: 原内存拷贝。例子,给定一个对象object,它的类型是class Base。对象object占用10字节的内存,地址从0x0到0x9.如果还有一个对象objectTwo,类型也是class Base。那么执行objectTwo = object;如果使用Bitwise拷贝语义,那么将会拷贝从0x0到0x9的数据到objectTwo的内存地址，也就是说Bitwise是字节到字节的拷贝。\n\n对于默认的拷贝构造函数不会使用深拷贝,它只是使用浅拷贝。这意味着类的所有的成员是一层深度的拷贝而已。如果你的类或结构体成员中只是包含基本的数据类型例如int, float, char,那么Memberwise copy与Bitwise copy基本是相同的。但如果类中有指针存在,那么你可能会遇到问题。    \n例如下面的例子:\n```\nclass A\n{\n   int m;\n   double d;\n   char *Str;\n};\n\n如果你创建两个这样的类对象,class A  a, b;并且你给a赋值,      \na.m = 6;   \na.d = 10.123;   \na.Str = new char[10];   \nastrcpy(a.Str, \"test\");//这里是浅拷贝   \n如果执行b = a;那么会把对象a的每一个成员的值赋值给b的每个成员。   \nb.m = a.m;    \nb.d = a.d;   \nb.Str = a.Str;//现在对象a和b的成员Str都执向相同的内存,删除任一个内存都会析放另一个对象的内存。   \n```\n所以你需要深拷贝,它不是拷贝的内存地址而是拷贝内存地址的内容。一个默认的拷贝构造函数经常执行浅拷贝,只有拥有自己的拷贝函数才可以实现深拷贝。\n\n#### 5. 什么时候一个class不展现出“bitwise copy semantics”呢？\n有四种情况：\n* 1. 当class内含有一个member class object，而这个member class内有一个默认的copy构造函数(不论是class设计者明确声明，或者被编译器合成)\n* 2. 当class继承自一个base class，而base class有copy构造函数(不论显式声明或是被编译器合成]\n* 3. 当一个类声明了一个或多个virtual 函数\n* 4. 当class派生自一个继承串链，其中一个或者多个virtual base class\n\n\n#### 6. 重新设定Virtual Table的指针（virtual funtion的情况）\n当编译器导入一个vptr到class之中时，该class就不再展现bitwise semantics了。编译器需要合成出一个copy constructor，以求将vptr适当地初始化。          \n当一个base class object以其derived class的object内容做初始化操作时，其vptr复制操作也必须要保证安全（非pointer和reference)。也就是说，合成出来的基类构造函数会显式设定object的vptr指向基类对应的virtual table，而不是直接将右手边的class object中将其vptr现值拷贝过来。\n\n#### 7. 如何处理virtual base class subobject的情况？\nvirtual base class的存在需要特别处理。一个class object如果以另一个object作为初值，而后者有一个virtual base class subobject，那么也会使“bitwise copy semantics”失效。       \n这时需要合成一个copy constructor,从而安插一些代码以设定virtualbase class pointer/offset的初值，对每一个members执行必要的memberwise初始化操作，以及执行其他的内存相关工作。\n\n\n\n## 三、程序转化语意学(Program Transformation Semantics)\n#### 1. class object的显式初始化操作。\n初始化object时，必要的程序转化有以下两个阶段：\n* 重写每一个定义，其中的初始化操作会被剥除，在c\\+\\+中，“定义”指占用内存的行为。\n* class的copy constructor调用操作会被安插进去。\n\n#### 2. 参数的初始化所做的程序转换。\nC++ Standard说，把一个class object当做参数传给一个函数(或是作为一个函数的返回值)，相当于以下形式的初始化操作:\n```\nX xx = arg;//其中xx代表形式参数(或返回值)而arg代表真正的参数值\n\n//因此，若已知如下函数：\nvoid foo(X xo);\n \n//转换的结果为：\nX xx;\n//xo以memberwise的方式将xx当作初值...\nfoo(xx);\n```\n有一种策略是导入所谓的临时性object，并调用copy constructor将它初始化，然后将此临时性object交给函数，临时性object会在函数结束处被析构。\n\n#### 3. 返回值的初始化所做的程序转换。\n函数bar()的返回值为一个对象，那该怎么把局部对象xx拷贝过来？ Stroustrup在cfront中的解决办法是一个双阶段的转化：\n* 1. 首先加上一个额外参数，其类型是class object的一个reference，这个参数将被用来放置被“拷贝建构”而得的返回值。\n* 2. 在return指令之前安插一个copy constructor调用操作，以便将欲传回之object的内容当做上述新增参数的初值。函数也对应变为void类型。\n\n#### 4. 在编译器层面所做的优化。\n编译器会以result参数取代name return val。这样的编译器优化操作，有时被称为Named Return Value(NRV)优化。NRV优化如今被视为是标准C++编译器的一个义不容辞的优化操作。**NRV需要一定的条件，即对应的类要有copy constructor**。     \n一般而言，面对“以一个class object作为另一个class object的初值”的情形，语言允许编译器有大量的自由发挥空间。其优点当然是导致机器码产生时有明显的效率提升。缺点则是你不能安全地规划你的copy constructor的副作用，必须视其执行而定。\n> NRV与返回值初始化的区别在于：NRV中不产生local object，直接以\\_result带入其中进行各种处理，减少调用copy constructor。而返回值初始化则是在最后用copy constructor将local object的值拷贝给\\_result, 中间不处理\\_result。一个是优化，一个是程序转换。\n\n#### 5. 那Copy Constructor要还是不要？\ncopy constructor的应用，迫使编译器多多少少对你的程序代码做部分优化。尤其当一个函数以传值(by value)的方式传回一个class object，而该class有一个copy constructor(不论是明确定义出来的，或是合成的)时。这将导致深奥的程序转化——不论在函数的定义或使用上，此外编译器也将copy constructor的调用操作优化，以一个额外的第一参数(数值被直接存放在其中)取代NRV。  \n* 如果编译器能自动为你实施了最好的行为,那就没有必要实现一个自己的copy constructor。\n* 如果class需要大量的memberwise初始化操作，例如以传值的方式传回object，此时提供一个explicit inline copy constructor就是非常合理的（在有NRV的前提下）。\n\n\n## 四、成员们的初始化队伍(Memeber Initialization List)\n#### 1. 在下列情况下，为了让你的程序能够顺利编译，你必须使用member initialization list:\n* 当初始化一个reference member时\n* 当初始化一个const member时\n* 当调用一个base class的constructor，而它拥有一组参数时\n* 当调用一个member class的constructor，而它拥有一组参数时\n\n#### 2.member initialization list中到底会发生什么事情？\n编译器会一一操作initialization list，以适当顺序在constructor之内安插初始化操作，并且在任何explicit user code之前。     \ninitialization list中的项目顺序是由class中的members声明顺序决定的，不是由initialization list中的排列顺序决定的。","source":"_posts/深度探索c++对象模型/《深度探索c++对象模型》（二）.md","raw":"---\ntitle: 《深度探索c++对象模型》（二）构造函数语意学\ndate: 2019-05-16 16:44:12\ntoc: true\ncomments: true\ntags:\n  - C++基础\ncategories:\n  - C++基础\n---\n\n本章的的主题是构造函数语意学，主要是讨论constructor如何工作，以及它什么时候被合成，同时挖掘编译器对于“对象构造过程”的干涉，以及对于“程序形式”和“程序效率”上的冲击。\n<!--more-->\n\n### 前述\n> 本章的的主题是构造函数语意学，主要是讨论constructor如何工作，以及它什么时候被合成，同时挖掘编译器对于“对象构造过程”的干涉，以及对于“程序形式”和“程序效率”上的冲击。\n\n------------------------------------\n参考书籍及链接：《深度探索c\\+\\+对象模型》    \n\n------------------------------------\n## 一、Default Constructor的构造操作\n#### 1. 什么时候才会合成一个default construct呢？  \n   答案是当编译器需要的时候，default constructor会被合成出来，只执行编译器所需要的任务。另外要注意程序的需要和编译器的需要之间的区别，如果程序有需要，那是程序员的责任，就需要自己实现constructor。     \n   对于class X，如果没有任何user-declared constructor，那么会有一个default constructor被隐式(implicitly)声明出来...一个被隐式声明出来的default constructor将是一个trivial(浅薄而无能，没啥用的)constructor...  \n   一个nontrivial default constructor在ARM的术语中就是编译器需要的那种，必要的话由编译器合成出来。下面4小节分别讨论nontrivial default constructor的4种情况\n\n#### 2. 几种对象构建时的区别。\n   Global objects的内存保证会在程序启动的时候被清0。Local objects配置于程序的堆栈中，heap objects配置于自由空间，都不一定会被清零，它们的内容将是内存上次被使用的遗迹。\n  \n#### 3. 第一种情况：“带有Default Constructor”的member class object\n如果一个class没有任何constructor，但它内含一个member object，而后者有default constructor，那么这个class的implicit default constructor就是“nontrivial”，编译器为该class合成出一个default constructor。不过这个合成操作只有在constructor真正需要被调用时才会发生。\n\n#### 4. 多成员对象的情况。\n编译器的处理是：如果一个class A内含一个或者一个以上member class objects，那么class A的每一个constructor必须调用每一个member classes 的default constructor。编译器会扩张已存在的constructors,在其中安插一些代码，使得user code在被执行之前，先调用必要的default constructors。**调用顺序与member objects在class中的声明次序一致**。\n\n#### 5. 第二种情况：“带有Default constructor”的base class。\n如果一个没有任何constructors的class派生自一个“带有default constructor”的base class，那么这个derived class的default constructor会被视为nontrivial，并因此需要被合成出来。对于一个后继派生的class而言，这个合成的constructor和一个“被显式提供的default constructor”并没有差异。\n> 注意一点，如果有constructor,但没有default constructor,那就会对每一个constructors进行扩充。如果亦存在Member Class Object，那些default constructor也会在base class constructor都被调用之后调用。\n\n#### 6. 第三种情况：“带有一个Virtual Funtion”的class。\n如果class声明(或继承)一个virtual function，编译器也需要合成出default constructor或扩充construtor。下面两个扩张行动会在编译期间发生：\n* 一个virtual function table(在cfront中被称为vtbl)会被编译期产生出来，内放class的virtual functions地址。\n* 在每一个class object中，一个额外的pointer member(也就是vptr)会被编译期合成出来，内含相关之class vtbl的地址。\n\n> 编译器会为每一个含有virtual function的class objects的vptr进行适当的初始化，以放置适当的virtual table地址。\n\n#### 7. 第四种情况：“带有一个virtual base class”的class。\n如果class派生自一个继承串链，其中有一个或更多的virtual base classes编译器也需要合成出default constructor或扩充construtor。其目的在于必须使 virtual base class 在其每一个derived class object中的位置能够在执行期准备妥当。对于class所定义的每一个constructor。编译器都会安插那些“允许每一个virtual base class 的执行期存取操作”的代码。\n\n#### 8. 总结。\n除以上四种情况外，在没有声明constructor时就默认其是无用的， 其default constructor也就不会被合成出来的。     \n在合成的default constructor中，只有base class subobjects和member class objects会被初始化。所有其他的nonstatic data member ，如整数，整数指针，整数数组等是不会被初始化的，这些初始化操作对程序是必须的，但对编译器则并非需要的。   \nC++新手一般有两个误解：\n* 任何class 如果没有定义default constructor ，就会被合成出来一个。\n* 编译器合成出来的default constructor 会明确设定 class 内每一个data member的默认值。\n\n\n\n## 二、Copy Constructor的构造操作\n#### 1. 哪些情况需要有copy constructor？\n有三种情况，会以一个object的内容作为另一class object的初值，即需要有 copy constructor。\n* 1. 把一个object直接赋值给另一个object进行初值。\n* 2. 当object被当做参数交给某个函数\n* 3. 当函数返回一个class object。\n\n> 一个class object可用两种方式复制得到，一种是被初始化，另一种是赋值。从概念上看，这两种操作分别是以copy constructor和copy assignment operator完成的。      \n> Default constructors和copy constructor在**必要的时候**才由编译器 产生，这里的“必要”意指当class不展现bitwise copy sematics时。\n\n#### 2. Default Memberwise Initialization\n当class object以“**相同**的另一个object作为初值是，其内部是以所谓的default memberwise initialization方式完成的。也就是把每一个内建的或派生的data member（例如一个数组或指针）的值，从某个object拷贝一份到另一个object上，但不拷贝其具体内容。例如只拷贝指针地址，不拷贝一份新的指针指向的对象，这也就是**浅拷贝**，不过它并不会拷贝其中member class object，而是以递归的方式实行memberwise initialization。\n\n#### 3. 递归的memberwise initialization是如何实现的呢？\n答案就是Bitwise Copy Semantics和default copy constructor。如果class展现了Bitwise Copy Semantics，则使用bitwise copy（bitwise copy semantics编译器生成的伪代码是memcpy函数），否则编译器会生成default copy constructor。\n\n#### 4. Memberwise copy(深拷贝)与Bitwise copy(浅拷贝)的区别\nMemberwise copy: 在初始化一个对象期间,基类的构造函数被调用,成员变量被调用,如果它们有构造函数的时候,它们的构造函数被调用,这个过程是一个递归的过程。\nBitwise copy: 原内存拷贝。例子,给定一个对象object,它的类型是class Base。对象object占用10字节的内存,地址从0x0到0x9.如果还有一个对象objectTwo,类型也是class Base。那么执行objectTwo = object;如果使用Bitwise拷贝语义,那么将会拷贝从0x0到0x9的数据到objectTwo的内存地址，也就是说Bitwise是字节到字节的拷贝。\n\n对于默认的拷贝构造函数不会使用深拷贝,它只是使用浅拷贝。这意味着类的所有的成员是一层深度的拷贝而已。如果你的类或结构体成员中只是包含基本的数据类型例如int, float, char,那么Memberwise copy与Bitwise copy基本是相同的。但如果类中有指针存在,那么你可能会遇到问题。    \n例如下面的例子:\n```\nclass A\n{\n   int m;\n   double d;\n   char *Str;\n};\n\n如果你创建两个这样的类对象,class A  a, b;并且你给a赋值,      \na.m = 6;   \na.d = 10.123;   \na.Str = new char[10];   \nastrcpy(a.Str, \"test\");//这里是浅拷贝   \n如果执行b = a;那么会把对象a的每一个成员的值赋值给b的每个成员。   \nb.m = a.m;    \nb.d = a.d;   \nb.Str = a.Str;//现在对象a和b的成员Str都执向相同的内存,删除任一个内存都会析放另一个对象的内存。   \n```\n所以你需要深拷贝,它不是拷贝的内存地址而是拷贝内存地址的内容。一个默认的拷贝构造函数经常执行浅拷贝,只有拥有自己的拷贝函数才可以实现深拷贝。\n\n#### 5. 什么时候一个class不展现出“bitwise copy semantics”呢？\n有四种情况：\n* 1. 当class内含有一个member class object，而这个member class内有一个默认的copy构造函数(不论是class设计者明确声明，或者被编译器合成)\n* 2. 当class继承自一个base class，而base class有copy构造函数(不论显式声明或是被编译器合成]\n* 3. 当一个类声明了一个或多个virtual 函数\n* 4. 当class派生自一个继承串链，其中一个或者多个virtual base class\n\n\n#### 6. 重新设定Virtual Table的指针（virtual funtion的情况）\n当编译器导入一个vptr到class之中时，该class就不再展现bitwise semantics了。编译器需要合成出一个copy constructor，以求将vptr适当地初始化。          \n当一个base class object以其derived class的object内容做初始化操作时，其vptr复制操作也必须要保证安全（非pointer和reference)。也就是说，合成出来的基类构造函数会显式设定object的vptr指向基类对应的virtual table，而不是直接将右手边的class object中将其vptr现值拷贝过来。\n\n#### 7. 如何处理virtual base class subobject的情况？\nvirtual base class的存在需要特别处理。一个class object如果以另一个object作为初值，而后者有一个virtual base class subobject，那么也会使“bitwise copy semantics”失效。       \n这时需要合成一个copy constructor,从而安插一些代码以设定virtualbase class pointer/offset的初值，对每一个members执行必要的memberwise初始化操作，以及执行其他的内存相关工作。\n\n\n\n## 三、程序转化语意学(Program Transformation Semantics)\n#### 1. class object的显式初始化操作。\n初始化object时，必要的程序转化有以下两个阶段：\n* 重写每一个定义，其中的初始化操作会被剥除，在c\\+\\+中，“定义”指占用内存的行为。\n* class的copy constructor调用操作会被安插进去。\n\n#### 2. 参数的初始化所做的程序转换。\nC++ Standard说，把一个class object当做参数传给一个函数(或是作为一个函数的返回值)，相当于以下形式的初始化操作:\n```\nX xx = arg;//其中xx代表形式参数(或返回值)而arg代表真正的参数值\n\n//因此，若已知如下函数：\nvoid foo(X xo);\n \n//转换的结果为：\nX xx;\n//xo以memberwise的方式将xx当作初值...\nfoo(xx);\n```\n有一种策略是导入所谓的临时性object，并调用copy constructor将它初始化，然后将此临时性object交给函数，临时性object会在函数结束处被析构。\n\n#### 3. 返回值的初始化所做的程序转换。\n函数bar()的返回值为一个对象，那该怎么把局部对象xx拷贝过来？ Stroustrup在cfront中的解决办法是一个双阶段的转化：\n* 1. 首先加上一个额外参数，其类型是class object的一个reference，这个参数将被用来放置被“拷贝建构”而得的返回值。\n* 2. 在return指令之前安插一个copy constructor调用操作，以便将欲传回之object的内容当做上述新增参数的初值。函数也对应变为void类型。\n\n#### 4. 在编译器层面所做的优化。\n编译器会以result参数取代name return val。这样的编译器优化操作，有时被称为Named Return Value(NRV)优化。NRV优化如今被视为是标准C++编译器的一个义不容辞的优化操作。**NRV需要一定的条件，即对应的类要有copy constructor**。     \n一般而言，面对“以一个class object作为另一个class object的初值”的情形，语言允许编译器有大量的自由发挥空间。其优点当然是导致机器码产生时有明显的效率提升。缺点则是你不能安全地规划你的copy constructor的副作用，必须视其执行而定。\n> NRV与返回值初始化的区别在于：NRV中不产生local object，直接以\\_result带入其中进行各种处理，减少调用copy constructor。而返回值初始化则是在最后用copy constructor将local object的值拷贝给\\_result, 中间不处理\\_result。一个是优化，一个是程序转换。\n\n#### 5. 那Copy Constructor要还是不要？\ncopy constructor的应用，迫使编译器多多少少对你的程序代码做部分优化。尤其当一个函数以传值(by value)的方式传回一个class object，而该class有一个copy constructor(不论是明确定义出来的，或是合成的)时。这将导致深奥的程序转化——不论在函数的定义或使用上，此外编译器也将copy constructor的调用操作优化，以一个额外的第一参数(数值被直接存放在其中)取代NRV。  \n* 如果编译器能自动为你实施了最好的行为,那就没有必要实现一个自己的copy constructor。\n* 如果class需要大量的memberwise初始化操作，例如以传值的方式传回object，此时提供一个explicit inline copy constructor就是非常合理的（在有NRV的前提下）。\n\n\n## 四、成员们的初始化队伍(Memeber Initialization List)\n#### 1. 在下列情况下，为了让你的程序能够顺利编译，你必须使用member initialization list:\n* 当初始化一个reference member时\n* 当初始化一个const member时\n* 当调用一个base class的constructor，而它拥有一组参数时\n* 当调用一个member class的constructor，而它拥有一组参数时\n\n#### 2.member initialization list中到底会发生什么事情？\n编译器会一一操作initialization list，以适当顺序在constructor之内安插初始化操作，并且在任何explicit user code之前。     \ninitialization list中的项目顺序是由class中的members声明顺序决定的，不是由initialization list中的排列顺序决定的。","slug":"深度探索c++对象模型/《深度探索c++对象模型》（二）","published":1,"updated":"2019-05-16T09:32:49.935Z","_id":"cjvqga0qg000779jxigvuv1ac","layout":"post","photos":[],"link":"","content":"<p>本章的的主题是构造函数语意学，主要是讨论constructor如何工作，以及它什么时候被合成，同时挖掘编译器对于“对象构造过程”的干涉，以及对于“程序形式”和“程序效率”上的冲击。<br><a id=\"more\"></a></p>\n<h3 id=\"前述\"><a href=\"#前述\" class=\"headerlink\" title=\"前述\"></a>前述</h3><blockquote>\n<p>本章的的主题是构造函数语意学，主要是讨论constructor如何工作，以及它什么时候被合成，同时挖掘编译器对于“对象构造过程”的干涉，以及对于“程序形式”和“程序效率”上的冲击。</p>\n</blockquote>\n<hr>\n<p>参考书籍及链接：《深度探索c++对象模型》    </p>\n<hr>\n<h2 id=\"一、Default-Constructor的构造操作\"><a href=\"#一、Default-Constructor的构造操作\" class=\"headerlink\" title=\"一、Default Constructor的构造操作\"></a>一、Default Constructor的构造操作</h2><h4 id=\"1-什么时候才会合成一个default-construct呢？\"><a href=\"#1-什么时候才会合成一个default-construct呢？\" class=\"headerlink\" title=\"1. 什么时候才会合成一个default construct呢？\"></a>1. 什么时候才会合成一个default construct呢？</h4><p>   答案是当编译器需要的时候，default constructor会被合成出来，只执行编译器所需要的任务。另外要注意程序的需要和编译器的需要之间的区别，如果程序有需要，那是程序员的责任，就需要自己实现constructor。<br>   对于class X，如果没有任何user-declared constructor，那么会有一个default constructor被隐式(implicitly)声明出来…一个被隐式声明出来的default constructor将是一个trivial(浅薄而无能，没啥用的)constructor…<br>   一个nontrivial default constructor在ARM的术语中就是编译器需要的那种，必要的话由编译器合成出来。下面4小节分别讨论nontrivial default constructor的4种情况</p>\n<h4 id=\"2-几种对象构建时的区别。\"><a href=\"#2-几种对象构建时的区别。\" class=\"headerlink\" title=\"2. 几种对象构建时的区别。\"></a>2. 几种对象构建时的区别。</h4><p>   Global objects的内存保证会在程序启动的时候被清0。Local objects配置于程序的堆栈中，heap objects配置于自由空间，都不一定会被清零，它们的内容将是内存上次被使用的遗迹。</p>\n<h4 id=\"3-第一种情况：“带有Default-Constructor”的member-class-object\"><a href=\"#3-第一种情况：“带有Default-Constructor”的member-class-object\" class=\"headerlink\" title=\"3. 第一种情况：“带有Default Constructor”的member class object\"></a>3. 第一种情况：“带有Default Constructor”的member class object</h4><p>如果一个class没有任何constructor，但它内含一个member object，而后者有default constructor，那么这个class的implicit default constructor就是“nontrivial”，编译器为该class合成出一个default constructor。不过这个合成操作只有在constructor真正需要被调用时才会发生。</p>\n<h4 id=\"4-多成员对象的情况。\"><a href=\"#4-多成员对象的情况。\" class=\"headerlink\" title=\"4. 多成员对象的情况。\"></a>4. 多成员对象的情况。</h4><p>编译器的处理是：如果一个class A内含一个或者一个以上member class objects，那么class A的每一个constructor必须调用每一个member classes 的default constructor。编译器会扩张已存在的constructors,在其中安插一些代码，使得user code在被执行之前，先调用必要的default constructors。<strong>调用顺序与member objects在class中的声明次序一致</strong>。</p>\n<h4 id=\"5-第二种情况：“带有Default-constructor”的base-class。\"><a href=\"#5-第二种情况：“带有Default-constructor”的base-class。\" class=\"headerlink\" title=\"5. 第二种情况：“带有Default constructor”的base class。\"></a>5. 第二种情况：“带有Default constructor”的base class。</h4><p>如果一个没有任何constructors的class派生自一个“带有default constructor”的base class，那么这个derived class的default constructor会被视为nontrivial，并因此需要被合成出来。对于一个后继派生的class而言，这个合成的constructor和一个“被显式提供的default constructor”并没有差异。</p>\n<blockquote>\n<p>注意一点，如果有constructor,但没有default constructor,那就会对每一个constructors进行扩充。如果亦存在Member Class Object，那些default constructor也会在base class constructor都被调用之后调用。</p>\n</blockquote>\n<h4 id=\"6-第三种情况：“带有一个Virtual-Funtion”的class。\"><a href=\"#6-第三种情况：“带有一个Virtual-Funtion”的class。\" class=\"headerlink\" title=\"6. 第三种情况：“带有一个Virtual Funtion”的class。\"></a>6. 第三种情况：“带有一个Virtual Funtion”的class。</h4><p>如果class声明(或继承)一个virtual function，编译器也需要合成出default constructor或扩充construtor。下面两个扩张行动会在编译期间发生：</p>\n<ul>\n<li>一个virtual function table(在cfront中被称为vtbl)会被编译期产生出来，内放class的virtual functions地址。</li>\n<li>在每一个class object中，一个额外的pointer member(也就是vptr)会被编译期合成出来，内含相关之class vtbl的地址。</li>\n</ul>\n<blockquote>\n<p>编译器会为每一个含有virtual function的class objects的vptr进行适当的初始化，以放置适当的virtual table地址。</p>\n</blockquote>\n<h4 id=\"7-第四种情况：“带有一个virtual-base-class”的class。\"><a href=\"#7-第四种情况：“带有一个virtual-base-class”的class。\" class=\"headerlink\" title=\"7. 第四种情况：“带有一个virtual base class”的class。\"></a>7. 第四种情况：“带有一个virtual base class”的class。</h4><p>如果class派生自一个继承串链，其中有一个或更多的virtual base classes编译器也需要合成出default constructor或扩充construtor。其目的在于必须使 virtual base class 在其每一个derived class object中的位置能够在执行期准备妥当。对于class所定义的每一个constructor。编译器都会安插那些“允许每一个virtual base class 的执行期存取操作”的代码。</p>\n<h4 id=\"8-总结。\"><a href=\"#8-总结。\" class=\"headerlink\" title=\"8. 总结。\"></a>8. 总结。</h4><p>除以上四种情况外，在没有声明constructor时就默认其是无用的， 其default constructor也就不会被合成出来的。<br>在合成的default constructor中，只有base class subobjects和member class objects会被初始化。所有其他的nonstatic data member ，如整数，整数指针，整数数组等是不会被初始化的，这些初始化操作对程序是必须的，但对编译器则并非需要的。<br>C++新手一般有两个误解：</p>\n<ul>\n<li>任何class 如果没有定义default constructor ，就会被合成出来一个。</li>\n<li>编译器合成出来的default constructor 会明确设定 class 内每一个data member的默认值。</li>\n</ul>\n<h2 id=\"二、Copy-Constructor的构造操作\"><a href=\"#二、Copy-Constructor的构造操作\" class=\"headerlink\" title=\"二、Copy Constructor的构造操作\"></a>二、Copy Constructor的构造操作</h2><h4 id=\"1-哪些情况需要有copy-constructor？\"><a href=\"#1-哪些情况需要有copy-constructor？\" class=\"headerlink\" title=\"1. 哪些情况需要有copy constructor？\"></a>1. 哪些情况需要有copy constructor？</h4><p>有三种情况，会以一个object的内容作为另一class object的初值，即需要有 copy constructor。</p>\n<ul>\n<li><ol>\n<li>把一个object直接赋值给另一个object进行初值。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>当object被当做参数交给某个函数</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>当函数返回一个class object。</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>一个class object可用两种方式复制得到，一种是被初始化，另一种是赋值。从概念上看，这两种操作分别是以copy constructor和copy assignment operator完成的。<br>Default constructors和copy constructor在<strong>必要的时候</strong>才由编译器 产生，这里的“必要”意指当class不展现bitwise copy sematics时。</p>\n</blockquote>\n<h4 id=\"2-Default-Memberwise-Initialization\"><a href=\"#2-Default-Memberwise-Initialization\" class=\"headerlink\" title=\"2. Default Memberwise Initialization\"></a>2. Default Memberwise Initialization</h4><p>当class object以“<strong>相同</strong>的另一个object作为初值是，其内部是以所谓的default memberwise initialization方式完成的。也就是把每一个内建的或派生的data member（例如一个数组或指针）的值，从某个object拷贝一份到另一个object上，但不拷贝其具体内容。例如只拷贝指针地址，不拷贝一份新的指针指向的对象，这也就是<strong>浅拷贝</strong>，不过它并不会拷贝其中member class object，而是以递归的方式实行memberwise initialization。</p>\n<h4 id=\"3-递归的memberwise-initialization是如何实现的呢？\"><a href=\"#3-递归的memberwise-initialization是如何实现的呢？\" class=\"headerlink\" title=\"3. 递归的memberwise initialization是如何实现的呢？\"></a>3. 递归的memberwise initialization是如何实现的呢？</h4><p>答案就是Bitwise Copy Semantics和default copy constructor。如果class展现了Bitwise Copy Semantics，则使用bitwise copy（bitwise copy semantics编译器生成的伪代码是memcpy函数），否则编译器会生成default copy constructor。</p>\n<h4 id=\"4-Memberwise-copy-深拷贝-与Bitwise-copy-浅拷贝-的区别\"><a href=\"#4-Memberwise-copy-深拷贝-与Bitwise-copy-浅拷贝-的区别\" class=\"headerlink\" title=\"4. Memberwise copy(深拷贝)与Bitwise copy(浅拷贝)的区别\"></a>4. Memberwise copy(深拷贝)与Bitwise copy(浅拷贝)的区别</h4><p>Memberwise copy: 在初始化一个对象期间,基类的构造函数被调用,成员变量被调用,如果它们有构造函数的时候,它们的构造函数被调用,这个过程是一个递归的过程。<br>Bitwise copy: 原内存拷贝。例子,给定一个对象object,它的类型是class Base。对象object占用10字节的内存,地址从0x0到0x9.如果还有一个对象objectTwo,类型也是class Base。那么执行objectTwo = object;如果使用Bitwise拷贝语义,那么将会拷贝从0x0到0x9的数据到objectTwo的内存地址，也就是说Bitwise是字节到字节的拷贝。</p>\n<p>对于默认的拷贝构造函数不会使用深拷贝,它只是使用浅拷贝。这意味着类的所有的成员是一层深度的拷贝而已。如果你的类或结构体成员中只是包含基本的数据类型例如int, float, char,那么Memberwise copy与Bitwise copy基本是相同的。但如果类中有指针存在,那么你可能会遇到问题。<br>例如下面的例子:<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   int m<span class=\"comment\">;</span></span><br><span class=\"line\">   double d<span class=\"comment\">;</span></span><br><span class=\"line\">   char *Str<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">如果你创建两个这样的类对象,class A  a, <span class=\"keyword\">b;并且你给a赋值, </span>     </span><br><span class=\"line\">a.m = <span class=\"number\">6</span><span class=\"comment\">;   </span></span><br><span class=\"line\">a.d = <span class=\"number\">10</span>.<span class=\"number\">123</span><span class=\"comment\">;   </span></span><br><span class=\"line\">a.Str = new char[<span class=\"number\">10</span>]<span class=\"comment\">;   </span></span><br><span class=\"line\">astrcpy(a.Str, <span class=\"string\">\"test\"</span>)<span class=\"comment\">;//这里是浅拷贝   </span></span><br><span class=\"line\">如果执行<span class=\"keyword\">b </span>= a<span class=\"comment\">;那么会把对象a的每一个成员的值赋值给b的每个成员。   </span></span><br><span class=\"line\"><span class=\"keyword\">b.m </span>= a.m<span class=\"comment\">;    </span></span><br><span class=\"line\"><span class=\"keyword\">b.d </span>= a.d<span class=\"comment\">;   </span></span><br><span class=\"line\"><span class=\"keyword\">b.Str </span>= a.Str<span class=\"comment\">;//现在对象a和b的成员Str都执向相同的内存,删除任一个内存都会析放另一个对象的内存。</span></span><br></pre></td></tr></table></figure></p>\n<p>所以你需要深拷贝,它不是拷贝的内存地址而是拷贝内存地址的内容。一个默认的拷贝构造函数经常执行浅拷贝,只有拥有自己的拷贝函数才可以实现深拷贝。</p>\n<h4 id=\"5-什么时候一个class不展现出“bitwise-copy-semantics”呢？\"><a href=\"#5-什么时候一个class不展现出“bitwise-copy-semantics”呢？\" class=\"headerlink\" title=\"5. 什么时候一个class不展现出“bitwise copy semantics”呢？\"></a>5. 什么时候一个class不展现出“bitwise copy semantics”呢？</h4><p>有四种情况：</p>\n<ul>\n<li><ol>\n<li>当class内含有一个member class object，而这个member class内有一个默认的copy构造函数(不论是class设计者明确声明，或者被编译器合成)</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>当class继承自一个base class，而base class有copy构造函数(不论显式声明或是被编译器合成]</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>当一个类声明了一个或多个virtual 函数</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>当class派生自一个继承串链，其中一个或者多个virtual base class</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"6-重新设定Virtual-Table的指针（virtual-funtion的情况）\"><a href=\"#6-重新设定Virtual-Table的指针（virtual-funtion的情况）\" class=\"headerlink\" title=\"6. 重新设定Virtual Table的指针（virtual funtion的情况）\"></a>6. 重新设定Virtual Table的指针（virtual funtion的情况）</h4><p>当编译器导入一个vptr到class之中时，该class就不再展现bitwise semantics了。编译器需要合成出一个copy constructor，以求将vptr适当地初始化。<br>当一个base class object以其derived class的object内容做初始化操作时，其vptr复制操作也必须要保证安全（非pointer和reference)。也就是说，合成出来的基类构造函数会显式设定object的vptr指向基类对应的virtual table，而不是直接将右手边的class object中将其vptr现值拷贝过来。</p>\n<h4 id=\"7-如何处理virtual-base-class-subobject的情况？\"><a href=\"#7-如何处理virtual-base-class-subobject的情况？\" class=\"headerlink\" title=\"7. 如何处理virtual base class subobject的情况？\"></a>7. 如何处理virtual base class subobject的情况？</h4><p>virtual base class的存在需要特别处理。一个class object如果以另一个object作为初值，而后者有一个virtual base class subobject，那么也会使“bitwise copy semantics”失效。<br>这时需要合成一个copy constructor,从而安插一些代码以设定virtualbase class pointer/offset的初值，对每一个members执行必要的memberwise初始化操作，以及执行其他的内存相关工作。</p>\n<h2 id=\"三、程序转化语意学-Program-Transformation-Semantics\"><a href=\"#三、程序转化语意学-Program-Transformation-Semantics\" class=\"headerlink\" title=\"三、程序转化语意学(Program Transformation Semantics)\"></a>三、程序转化语意学(Program Transformation Semantics)</h2><h4 id=\"1-class-object的显式初始化操作。\"><a href=\"#1-class-object的显式初始化操作。\" class=\"headerlink\" title=\"1. class object的显式初始化操作。\"></a>1. class object的显式初始化操作。</h4><p>初始化object时，必要的程序转化有以下两个阶段：</p>\n<ul>\n<li>重写每一个定义，其中的初始化操作会被剥除，在c++中，“定义”指占用内存的行为。</li>\n<li>class的copy constructor调用操作会被安插进去。</li>\n</ul>\n<h4 id=\"2-参数的初始化所做的程序转换。\"><a href=\"#2-参数的初始化所做的程序转换。\" class=\"headerlink\" title=\"2. 参数的初始化所做的程序转换。\"></a>2. 参数的初始化所做的程序转换。</h4><p>C++ Standard说，把一个class object当做参数传给一个函数(或是作为一个函数的返回值)，相当于以下形式的初始化操作:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X xx = arg;<span class=\"comment\">//其中xx代表形式参数(或返回值)而arg代表真正的参数值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//因此，若已知如下函数：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">(X xo)</span></span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//转换的结果为：</span></span><br><span class=\"line\">X xx;</span><br><span class=\"line\"><span class=\"comment\">//xo以memberwise的方式将xx当作初值...</span></span><br><span class=\"line\">foo(xx);</span><br></pre></td></tr></table></figure></p>\n<p>有一种策略是导入所谓的临时性object，并调用copy constructor将它初始化，然后将此临时性object交给函数，临时性object会在函数结束处被析构。</p>\n<h4 id=\"3-返回值的初始化所做的程序转换。\"><a href=\"#3-返回值的初始化所做的程序转换。\" class=\"headerlink\" title=\"3. 返回值的初始化所做的程序转换。\"></a>3. 返回值的初始化所做的程序转换。</h4><p>函数bar()的返回值为一个对象，那该怎么把局部对象xx拷贝过来？ Stroustrup在cfront中的解决办法是一个双阶段的转化：</p>\n<ul>\n<li><ol>\n<li>首先加上一个额外参数，其类型是class object的一个reference，这个参数将被用来放置被“拷贝建构”而得的返回值。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>在return指令之前安插一个copy constructor调用操作，以便将欲传回之object的内容当做上述新增参数的初值。函数也对应变为void类型。</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"4-在编译器层面所做的优化。\"><a href=\"#4-在编译器层面所做的优化。\" class=\"headerlink\" title=\"4. 在编译器层面所做的优化。\"></a>4. 在编译器层面所做的优化。</h4><p>编译器会以result参数取代name return val。这样的编译器优化操作，有时被称为Named Return Value(NRV)优化。NRV优化如今被视为是标准C++编译器的一个义不容辞的优化操作。<strong>NRV需要一定的条件，即对应的类要有copy constructor</strong>。<br>一般而言，面对“以一个class object作为另一个class object的初值”的情形，语言允许编译器有大量的自由发挥空间。其优点当然是导致机器码产生时有明显的效率提升。缺点则是你不能安全地规划你的copy constructor的副作用，必须视其执行而定。</p>\n<blockquote>\n<p>NRV与返回值初始化的区别在于：NRV中不产生local object，直接以_result带入其中进行各种处理，减少调用copy constructor。而返回值初始化则是在最后用copy constructor将local object的值拷贝给_result, 中间不处理_result。一个是优化，一个是程序转换。</p>\n</blockquote>\n<h4 id=\"5-那Copy-Constructor要还是不要？\"><a href=\"#5-那Copy-Constructor要还是不要？\" class=\"headerlink\" title=\"5. 那Copy Constructor要还是不要？\"></a>5. 那Copy Constructor要还是不要？</h4><p>copy constructor的应用，迫使编译器多多少少对你的程序代码做部分优化。尤其当一个函数以传值(by value)的方式传回一个class object，而该class有一个copy constructor(不论是明确定义出来的，或是合成的)时。这将导致深奥的程序转化——不论在函数的定义或使用上，此外编译器也将copy constructor的调用操作优化，以一个额外的第一参数(数值被直接存放在其中)取代NRV。  </p>\n<ul>\n<li>如果编译器能自动为你实施了最好的行为,那就没有必要实现一个自己的copy constructor。</li>\n<li>如果class需要大量的memberwise初始化操作，例如以传值的方式传回object，此时提供一个explicit inline copy constructor就是非常合理的（在有NRV的前提下）。</li>\n</ul>\n<h2 id=\"四、成员们的初始化队伍-Memeber-Initialization-List\"><a href=\"#四、成员们的初始化队伍-Memeber-Initialization-List\" class=\"headerlink\" title=\"四、成员们的初始化队伍(Memeber Initialization List)\"></a>四、成员们的初始化队伍(Memeber Initialization List)</h2><h4 id=\"1-在下列情况下，为了让你的程序能够顺利编译，你必须使用member-initialization-list\"><a href=\"#1-在下列情况下，为了让你的程序能够顺利编译，你必须使用member-initialization-list\" class=\"headerlink\" title=\"1. 在下列情况下，为了让你的程序能够顺利编译，你必须使用member initialization list:\"></a>1. 在下列情况下，为了让你的程序能够顺利编译，你必须使用member initialization list:</h4><ul>\n<li>当初始化一个reference member时</li>\n<li>当初始化一个const member时</li>\n<li>当调用一个base class的constructor，而它拥有一组参数时</li>\n<li>当调用一个member class的constructor，而它拥有一组参数时</li>\n</ul>\n<h4 id=\"2-member-initialization-list中到底会发生什么事情？\"><a href=\"#2-member-initialization-list中到底会发生什么事情？\" class=\"headerlink\" title=\"2.member initialization list中到底会发生什么事情？\"></a>2.member initialization list中到底会发生什么事情？</h4><p>编译器会一一操作initialization list，以适当顺序在constructor之内安插初始化操作，并且在任何explicit user code之前。<br>initialization list中的项目顺序是由class中的members声明顺序决定的，不是由initialization list中的排列顺序决定的。</p>\n","site":{"data":{}},"excerpt":"<p>本章的的主题是构造函数语意学，主要是讨论constructor如何工作，以及它什么时候被合成，同时挖掘编译器对于“对象构造过程”的干涉，以及对于“程序形式”和“程序效率”上的冲击。<br>","more":"</p>\n<h3 id=\"前述\"><a href=\"#前述\" class=\"headerlink\" title=\"前述\"></a>前述</h3><blockquote>\n<p>本章的的主题是构造函数语意学，主要是讨论constructor如何工作，以及它什么时候被合成，同时挖掘编译器对于“对象构造过程”的干涉，以及对于“程序形式”和“程序效率”上的冲击。</p>\n</blockquote>\n<hr>\n<p>参考书籍及链接：《深度探索c++对象模型》    </p>\n<hr>\n<h2 id=\"一、Default-Constructor的构造操作\"><a href=\"#一、Default-Constructor的构造操作\" class=\"headerlink\" title=\"一、Default Constructor的构造操作\"></a>一、Default Constructor的构造操作</h2><h4 id=\"1-什么时候才会合成一个default-construct呢？\"><a href=\"#1-什么时候才会合成一个default-construct呢？\" class=\"headerlink\" title=\"1. 什么时候才会合成一个default construct呢？\"></a>1. 什么时候才会合成一个default construct呢？</h4><p>   答案是当编译器需要的时候，default constructor会被合成出来，只执行编译器所需要的任务。另外要注意程序的需要和编译器的需要之间的区别，如果程序有需要，那是程序员的责任，就需要自己实现constructor。<br>   对于class X，如果没有任何user-declared constructor，那么会有一个default constructor被隐式(implicitly)声明出来…一个被隐式声明出来的default constructor将是一个trivial(浅薄而无能，没啥用的)constructor…<br>   一个nontrivial default constructor在ARM的术语中就是编译器需要的那种，必要的话由编译器合成出来。下面4小节分别讨论nontrivial default constructor的4种情况</p>\n<h4 id=\"2-几种对象构建时的区别。\"><a href=\"#2-几种对象构建时的区别。\" class=\"headerlink\" title=\"2. 几种对象构建时的区别。\"></a>2. 几种对象构建时的区别。</h4><p>   Global objects的内存保证会在程序启动的时候被清0。Local objects配置于程序的堆栈中，heap objects配置于自由空间，都不一定会被清零，它们的内容将是内存上次被使用的遗迹。</p>\n<h4 id=\"3-第一种情况：“带有Default-Constructor”的member-class-object\"><a href=\"#3-第一种情况：“带有Default-Constructor”的member-class-object\" class=\"headerlink\" title=\"3. 第一种情况：“带有Default Constructor”的member class object\"></a>3. 第一种情况：“带有Default Constructor”的member class object</h4><p>如果一个class没有任何constructor，但它内含一个member object，而后者有default constructor，那么这个class的implicit default constructor就是“nontrivial”，编译器为该class合成出一个default constructor。不过这个合成操作只有在constructor真正需要被调用时才会发生。</p>\n<h4 id=\"4-多成员对象的情况。\"><a href=\"#4-多成员对象的情况。\" class=\"headerlink\" title=\"4. 多成员对象的情况。\"></a>4. 多成员对象的情况。</h4><p>编译器的处理是：如果一个class A内含一个或者一个以上member class objects，那么class A的每一个constructor必须调用每一个member classes 的default constructor。编译器会扩张已存在的constructors,在其中安插一些代码，使得user code在被执行之前，先调用必要的default constructors。<strong>调用顺序与member objects在class中的声明次序一致</strong>。</p>\n<h4 id=\"5-第二种情况：“带有Default-constructor”的base-class。\"><a href=\"#5-第二种情况：“带有Default-constructor”的base-class。\" class=\"headerlink\" title=\"5. 第二种情况：“带有Default constructor”的base class。\"></a>5. 第二种情况：“带有Default constructor”的base class。</h4><p>如果一个没有任何constructors的class派生自一个“带有default constructor”的base class，那么这个derived class的default constructor会被视为nontrivial，并因此需要被合成出来。对于一个后继派生的class而言，这个合成的constructor和一个“被显式提供的default constructor”并没有差异。</p>\n<blockquote>\n<p>注意一点，如果有constructor,但没有default constructor,那就会对每一个constructors进行扩充。如果亦存在Member Class Object，那些default constructor也会在base class constructor都被调用之后调用。</p>\n</blockquote>\n<h4 id=\"6-第三种情况：“带有一个Virtual-Funtion”的class。\"><a href=\"#6-第三种情况：“带有一个Virtual-Funtion”的class。\" class=\"headerlink\" title=\"6. 第三种情况：“带有一个Virtual Funtion”的class。\"></a>6. 第三种情况：“带有一个Virtual Funtion”的class。</h4><p>如果class声明(或继承)一个virtual function，编译器也需要合成出default constructor或扩充construtor。下面两个扩张行动会在编译期间发生：</p>\n<ul>\n<li>一个virtual function table(在cfront中被称为vtbl)会被编译期产生出来，内放class的virtual functions地址。</li>\n<li>在每一个class object中，一个额外的pointer member(也就是vptr)会被编译期合成出来，内含相关之class vtbl的地址。</li>\n</ul>\n<blockquote>\n<p>编译器会为每一个含有virtual function的class objects的vptr进行适当的初始化，以放置适当的virtual table地址。</p>\n</blockquote>\n<h4 id=\"7-第四种情况：“带有一个virtual-base-class”的class。\"><a href=\"#7-第四种情况：“带有一个virtual-base-class”的class。\" class=\"headerlink\" title=\"7. 第四种情况：“带有一个virtual base class”的class。\"></a>7. 第四种情况：“带有一个virtual base class”的class。</h4><p>如果class派生自一个继承串链，其中有一个或更多的virtual base classes编译器也需要合成出default constructor或扩充construtor。其目的在于必须使 virtual base class 在其每一个derived class object中的位置能够在执行期准备妥当。对于class所定义的每一个constructor。编译器都会安插那些“允许每一个virtual base class 的执行期存取操作”的代码。</p>\n<h4 id=\"8-总结。\"><a href=\"#8-总结。\" class=\"headerlink\" title=\"8. 总结。\"></a>8. 总结。</h4><p>除以上四种情况外，在没有声明constructor时就默认其是无用的， 其default constructor也就不会被合成出来的。<br>在合成的default constructor中，只有base class subobjects和member class objects会被初始化。所有其他的nonstatic data member ，如整数，整数指针，整数数组等是不会被初始化的，这些初始化操作对程序是必须的，但对编译器则并非需要的。<br>C++新手一般有两个误解：</p>\n<ul>\n<li>任何class 如果没有定义default constructor ，就会被合成出来一个。</li>\n<li>编译器合成出来的default constructor 会明确设定 class 内每一个data member的默认值。</li>\n</ul>\n<h2 id=\"二、Copy-Constructor的构造操作\"><a href=\"#二、Copy-Constructor的构造操作\" class=\"headerlink\" title=\"二、Copy Constructor的构造操作\"></a>二、Copy Constructor的构造操作</h2><h4 id=\"1-哪些情况需要有copy-constructor？\"><a href=\"#1-哪些情况需要有copy-constructor？\" class=\"headerlink\" title=\"1. 哪些情况需要有copy constructor？\"></a>1. 哪些情况需要有copy constructor？</h4><p>有三种情况，会以一个object的内容作为另一class object的初值，即需要有 copy constructor。</p>\n<ul>\n<li><ol>\n<li>把一个object直接赋值给另一个object进行初值。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>当object被当做参数交给某个函数</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>当函数返回一个class object。</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>一个class object可用两种方式复制得到，一种是被初始化，另一种是赋值。从概念上看，这两种操作分别是以copy constructor和copy assignment operator完成的。<br>Default constructors和copy constructor在<strong>必要的时候</strong>才由编译器 产生，这里的“必要”意指当class不展现bitwise copy sematics时。</p>\n</blockquote>\n<h4 id=\"2-Default-Memberwise-Initialization\"><a href=\"#2-Default-Memberwise-Initialization\" class=\"headerlink\" title=\"2. Default Memberwise Initialization\"></a>2. Default Memberwise Initialization</h4><p>当class object以“<strong>相同</strong>的另一个object作为初值是，其内部是以所谓的default memberwise initialization方式完成的。也就是把每一个内建的或派生的data member（例如一个数组或指针）的值，从某个object拷贝一份到另一个object上，但不拷贝其具体内容。例如只拷贝指针地址，不拷贝一份新的指针指向的对象，这也就是<strong>浅拷贝</strong>，不过它并不会拷贝其中member class object，而是以递归的方式实行memberwise initialization。</p>\n<h4 id=\"3-递归的memberwise-initialization是如何实现的呢？\"><a href=\"#3-递归的memberwise-initialization是如何实现的呢？\" class=\"headerlink\" title=\"3. 递归的memberwise initialization是如何实现的呢？\"></a>3. 递归的memberwise initialization是如何实现的呢？</h4><p>答案就是Bitwise Copy Semantics和default copy constructor。如果class展现了Bitwise Copy Semantics，则使用bitwise copy（bitwise copy semantics编译器生成的伪代码是memcpy函数），否则编译器会生成default copy constructor。</p>\n<h4 id=\"4-Memberwise-copy-深拷贝-与Bitwise-copy-浅拷贝-的区别\"><a href=\"#4-Memberwise-copy-深拷贝-与Bitwise-copy-浅拷贝-的区别\" class=\"headerlink\" title=\"4. Memberwise copy(深拷贝)与Bitwise copy(浅拷贝)的区别\"></a>4. Memberwise copy(深拷贝)与Bitwise copy(浅拷贝)的区别</h4><p>Memberwise copy: 在初始化一个对象期间,基类的构造函数被调用,成员变量被调用,如果它们有构造函数的时候,它们的构造函数被调用,这个过程是一个递归的过程。<br>Bitwise copy: 原内存拷贝。例子,给定一个对象object,它的类型是class Base。对象object占用10字节的内存,地址从0x0到0x9.如果还有一个对象objectTwo,类型也是class Base。那么执行objectTwo = object;如果使用Bitwise拷贝语义,那么将会拷贝从0x0到0x9的数据到objectTwo的内存地址，也就是说Bitwise是字节到字节的拷贝。</p>\n<p>对于默认的拷贝构造函数不会使用深拷贝,它只是使用浅拷贝。这意味着类的所有的成员是一层深度的拷贝而已。如果你的类或结构体成员中只是包含基本的数据类型例如int, float, char,那么Memberwise copy与Bitwise copy基本是相同的。但如果类中有指针存在,那么你可能会遇到问题。<br>例如下面的例子:<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class A</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   int m<span class=\"comment\">;</span></span><br><span class=\"line\">   double d<span class=\"comment\">;</span></span><br><span class=\"line\">   char *Str<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">如果你创建两个这样的类对象,class A  a, <span class=\"keyword\">b;并且你给a赋值, </span>     </span><br><span class=\"line\">a.m = <span class=\"number\">6</span><span class=\"comment\">;   </span></span><br><span class=\"line\">a.d = <span class=\"number\">10</span>.<span class=\"number\">123</span><span class=\"comment\">;   </span></span><br><span class=\"line\">a.Str = new char[<span class=\"number\">10</span>]<span class=\"comment\">;   </span></span><br><span class=\"line\">astrcpy(a.Str, <span class=\"string\">\"test\"</span>)<span class=\"comment\">;//这里是浅拷贝   </span></span><br><span class=\"line\">如果执行<span class=\"keyword\">b </span>= a<span class=\"comment\">;那么会把对象a的每一个成员的值赋值给b的每个成员。   </span></span><br><span class=\"line\"><span class=\"keyword\">b.m </span>= a.m<span class=\"comment\">;    </span></span><br><span class=\"line\"><span class=\"keyword\">b.d </span>= a.d<span class=\"comment\">;   </span></span><br><span class=\"line\"><span class=\"keyword\">b.Str </span>= a.Str<span class=\"comment\">;//现在对象a和b的成员Str都执向相同的内存,删除任一个内存都会析放另一个对象的内存。</span></span><br></pre></td></tr></table></figure></p>\n<p>所以你需要深拷贝,它不是拷贝的内存地址而是拷贝内存地址的内容。一个默认的拷贝构造函数经常执行浅拷贝,只有拥有自己的拷贝函数才可以实现深拷贝。</p>\n<h4 id=\"5-什么时候一个class不展现出“bitwise-copy-semantics”呢？\"><a href=\"#5-什么时候一个class不展现出“bitwise-copy-semantics”呢？\" class=\"headerlink\" title=\"5. 什么时候一个class不展现出“bitwise copy semantics”呢？\"></a>5. 什么时候一个class不展现出“bitwise copy semantics”呢？</h4><p>有四种情况：</p>\n<ul>\n<li><ol>\n<li>当class内含有一个member class object，而这个member class内有一个默认的copy构造函数(不论是class设计者明确声明，或者被编译器合成)</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>当class继承自一个base class，而base class有copy构造函数(不论显式声明或是被编译器合成]</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>当一个类声明了一个或多个virtual 函数</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>当class派生自一个继承串链，其中一个或者多个virtual base class</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"6-重新设定Virtual-Table的指针（virtual-funtion的情况）\"><a href=\"#6-重新设定Virtual-Table的指针（virtual-funtion的情况）\" class=\"headerlink\" title=\"6. 重新设定Virtual Table的指针（virtual funtion的情况）\"></a>6. 重新设定Virtual Table的指针（virtual funtion的情况）</h4><p>当编译器导入一个vptr到class之中时，该class就不再展现bitwise semantics了。编译器需要合成出一个copy constructor，以求将vptr适当地初始化。<br>当一个base class object以其derived class的object内容做初始化操作时，其vptr复制操作也必须要保证安全（非pointer和reference)。也就是说，合成出来的基类构造函数会显式设定object的vptr指向基类对应的virtual table，而不是直接将右手边的class object中将其vptr现值拷贝过来。</p>\n<h4 id=\"7-如何处理virtual-base-class-subobject的情况？\"><a href=\"#7-如何处理virtual-base-class-subobject的情况？\" class=\"headerlink\" title=\"7. 如何处理virtual base class subobject的情况？\"></a>7. 如何处理virtual base class subobject的情况？</h4><p>virtual base class的存在需要特别处理。一个class object如果以另一个object作为初值，而后者有一个virtual base class subobject，那么也会使“bitwise copy semantics”失效。<br>这时需要合成一个copy constructor,从而安插一些代码以设定virtualbase class pointer/offset的初值，对每一个members执行必要的memberwise初始化操作，以及执行其他的内存相关工作。</p>\n<h2 id=\"三、程序转化语意学-Program-Transformation-Semantics\"><a href=\"#三、程序转化语意学-Program-Transformation-Semantics\" class=\"headerlink\" title=\"三、程序转化语意学(Program Transformation Semantics)\"></a>三、程序转化语意学(Program Transformation Semantics)</h2><h4 id=\"1-class-object的显式初始化操作。\"><a href=\"#1-class-object的显式初始化操作。\" class=\"headerlink\" title=\"1. class object的显式初始化操作。\"></a>1. class object的显式初始化操作。</h4><p>初始化object时，必要的程序转化有以下两个阶段：</p>\n<ul>\n<li>重写每一个定义，其中的初始化操作会被剥除，在c++中，“定义”指占用内存的行为。</li>\n<li>class的copy constructor调用操作会被安插进去。</li>\n</ul>\n<h4 id=\"2-参数的初始化所做的程序转换。\"><a href=\"#2-参数的初始化所做的程序转换。\" class=\"headerlink\" title=\"2. 参数的初始化所做的程序转换。\"></a>2. 参数的初始化所做的程序转换。</h4><p>C++ Standard说，把一个class object当做参数传给一个函数(或是作为一个函数的返回值)，相当于以下形式的初始化操作:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X xx = arg;<span class=\"comment\">//其中xx代表形式参数(或返回值)而arg代表真正的参数值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//因此，若已知如下函数：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">(X xo)</span></span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//转换的结果为：</span></span><br><span class=\"line\">X xx;</span><br><span class=\"line\"><span class=\"comment\">//xo以memberwise的方式将xx当作初值...</span></span><br><span class=\"line\">foo(xx);</span><br></pre></td></tr></table></figure></p>\n<p>有一种策略是导入所谓的临时性object，并调用copy constructor将它初始化，然后将此临时性object交给函数，临时性object会在函数结束处被析构。</p>\n<h4 id=\"3-返回值的初始化所做的程序转换。\"><a href=\"#3-返回值的初始化所做的程序转换。\" class=\"headerlink\" title=\"3. 返回值的初始化所做的程序转换。\"></a>3. 返回值的初始化所做的程序转换。</h4><p>函数bar()的返回值为一个对象，那该怎么把局部对象xx拷贝过来？ Stroustrup在cfront中的解决办法是一个双阶段的转化：</p>\n<ul>\n<li><ol>\n<li>首先加上一个额外参数，其类型是class object的一个reference，这个参数将被用来放置被“拷贝建构”而得的返回值。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>在return指令之前安插一个copy constructor调用操作，以便将欲传回之object的内容当做上述新增参数的初值。函数也对应变为void类型。</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"4-在编译器层面所做的优化。\"><a href=\"#4-在编译器层面所做的优化。\" class=\"headerlink\" title=\"4. 在编译器层面所做的优化。\"></a>4. 在编译器层面所做的优化。</h4><p>编译器会以result参数取代name return val。这样的编译器优化操作，有时被称为Named Return Value(NRV)优化。NRV优化如今被视为是标准C++编译器的一个义不容辞的优化操作。<strong>NRV需要一定的条件，即对应的类要有copy constructor</strong>。<br>一般而言，面对“以一个class object作为另一个class object的初值”的情形，语言允许编译器有大量的自由发挥空间。其优点当然是导致机器码产生时有明显的效率提升。缺点则是你不能安全地规划你的copy constructor的副作用，必须视其执行而定。</p>\n<blockquote>\n<p>NRV与返回值初始化的区别在于：NRV中不产生local object，直接以_result带入其中进行各种处理，减少调用copy constructor。而返回值初始化则是在最后用copy constructor将local object的值拷贝给_result, 中间不处理_result。一个是优化，一个是程序转换。</p>\n</blockquote>\n<h4 id=\"5-那Copy-Constructor要还是不要？\"><a href=\"#5-那Copy-Constructor要还是不要？\" class=\"headerlink\" title=\"5. 那Copy Constructor要还是不要？\"></a>5. 那Copy Constructor要还是不要？</h4><p>copy constructor的应用，迫使编译器多多少少对你的程序代码做部分优化。尤其当一个函数以传值(by value)的方式传回一个class object，而该class有一个copy constructor(不论是明确定义出来的，或是合成的)时。这将导致深奥的程序转化——不论在函数的定义或使用上，此外编译器也将copy constructor的调用操作优化，以一个额外的第一参数(数值被直接存放在其中)取代NRV。  </p>\n<ul>\n<li>如果编译器能自动为你实施了最好的行为,那就没有必要实现一个自己的copy constructor。</li>\n<li>如果class需要大量的memberwise初始化操作，例如以传值的方式传回object，此时提供一个explicit inline copy constructor就是非常合理的（在有NRV的前提下）。</li>\n</ul>\n<h2 id=\"四、成员们的初始化队伍-Memeber-Initialization-List\"><a href=\"#四、成员们的初始化队伍-Memeber-Initialization-List\" class=\"headerlink\" title=\"四、成员们的初始化队伍(Memeber Initialization List)\"></a>四、成员们的初始化队伍(Memeber Initialization List)</h2><h4 id=\"1-在下列情况下，为了让你的程序能够顺利编译，你必须使用member-initialization-list\"><a href=\"#1-在下列情况下，为了让你的程序能够顺利编译，你必须使用member-initialization-list\" class=\"headerlink\" title=\"1. 在下列情况下，为了让你的程序能够顺利编译，你必须使用member initialization list:\"></a>1. 在下列情况下，为了让你的程序能够顺利编译，你必须使用member initialization list:</h4><ul>\n<li>当初始化一个reference member时</li>\n<li>当初始化一个const member时</li>\n<li>当调用一个base class的constructor，而它拥有一组参数时</li>\n<li>当调用一个member class的constructor，而它拥有一组参数时</li>\n</ul>\n<h4 id=\"2-member-initialization-list中到底会发生什么事情？\"><a href=\"#2-member-initialization-list中到底会发生什么事情？\" class=\"headerlink\" title=\"2.member initialization list中到底会发生什么事情？\"></a>2.member initialization list中到底会发生什么事情？</h4><p>编译器会一一操作initialization list，以适当顺序在constructor之内安插初始化操作，并且在任何explicit user code之前。<br>initialization list中的项目顺序是由class中的members声明顺序决定的，不是由initialization list中的排列顺序决定的。</p>"},{"title":"《深度探索c++对象模型》（五）构造、析构、拷贝语意学","date":"2019-05-16T08:44:12.000Z","toc":true,"comments":1,"_content":"\n本章的的主题是构造、析构、拷贝语意学。主要是讨论如何支持class模型，探讨object的整个生命周期。\n<!--more-->\n\n\n### 前述\n> 本章的的主题是构造、析构、拷贝语意学。主要是讨论如何支持class模型，探讨object的整个生命周期。\n\n------------------------------------\n参考书籍及链接：《深度探索c\\+\\+对象模型》    \n\n------------------------------------\n## 0、基础\n#### 1. class data member应该何时被初始化？\n一般而言，class的data member应该被初始化，并且只在constructor中或是在class的其他member functions中指定初值。其他任何操作都将破坏封装性质，使class的维护和修改更加困难。\n\n#### 2. 关于纯虚函数的几点认识。\n* c++中可以定义和调用(invoke)一个pure virtual function：不过它只能被**静态地调用**(用类名调用)，不能经由虚拟机制调用。\n* class设计者如果声明就一定要定义pure virtual destructor，因为每一个 derived class destructor会被编译器加以扩展，以静态调用的方式调用其“每一个virtual base class”以及“上一层base class”的destructor。因此，只要缺乏 任何一个base class destructor的定义，就会导致链接失败。**最好的方式就是不要把virtual destructor声明为pure。**\n\n#### 3. 关于虚拟机制的几点认识。\n* 类中设计虚函数时应先考虑清楚，不会被derived class改写的函数最好被设计 为virtual function。总靠编译器进行优化并不是好的设计理念。\n* 决定一个virtual function是否为const需要先想清楚，不必要的地方别用。\n\n## 一、“无继承”情况下的对象构造\n#### 1.对象的生命周期。\n一个object的生命，是该object的一个执行期属性。local object的生命对应其所 在的scope。global object的生命和整个程序的生命相同。heap object的生命从 它被new运算符配置出来开始，到它被delete运算符摧毁为止。\n\n#### 2.Plain OI' Data 和其相关处理\n形如下列的结构，被C\\+\\+标准称为Plain OI' Data。\n```\ntypedef struct{\n    float x, y, z;\n}Point;\n```\n* 如果以C++ 来编译这段码，理论上编译器会为Point声明一个trivial default constructor、一个trivial destructor、一个trivial copy constructor，以及一个trivial copy assignment operator。但实际上，编译器会分析这个声明，并为它贴上Plain of Data标签。\n* 对于``` Point global; ```理论上,constructor在程序起始处被调用而destructor 在程序的exit()处被调用。然而，事实上那些tirvial members要不是没被定义， 就是没被调用，程序的行为一如它在C中的表现一样。此外，C++ 的所有全局对象都被当作“初始化过的数据”来对待。\n* 对于``` Point *heap = new Point; ```会被转换为对new运算符的调用。但并没有default constructor施行与new运算符所传回的Point object身上。\n* ```*heap = local; ```理论上，这样的指定操作会触发trivial copy assignment operator进行拷贝搬运操作。然而实际上此object是一个Plain old data，所以赋值操作(assignment)将只是像C那样的纯粹位搬移操作。\n* ```delete heap; ```会被转换为对delete运算符的调用,观念上，这样的操作会触发Point的trivial destructor。但是一如我们所见，destructor要不是没有被产生就是没有被调用。\n\n#### 3.抽象数据类型(Abstract Data Type)和其相关处理\n以下是Point的第二次声明，在public接口之下多了private数据，提供完整的封装性，但是没有提供virtual function:\n```\nclass Point{\npublic:\n    Point(float x = 0.0, float y = 0.0, float z = 0.0): _x(x), _y(y),_z(y) { }\n    //no copy constructor, copy operator or destructor defined\nprivate:\n    float _x, _y, _z;\n};\n```\n* 对于Point，我们不需要定义一个copy constructor或copy assignment operator，因为默认的位拷贝已经足够，也不需要destructor,因为默认的内存管理方法也已经足够，如果我们不自己定义，编译器也因为判断不会用到而不会产生的函数。\n* 对于```Point global;  ```default constructor作用于其上。由于global被定义在全局范畴中，其初始化操作将延迟到程序激活时才开始，扩展调用default constructor。如果要将class中的所有成员都设定常 量初值，那么给予一个explicit initialization list会比较有效率些 。\n* 对于``` Point *heap = new Point; ```会被转换为对new运算符的调用。然后调用default Point Constructor并自行扩展。\n* ```*heap = local; ```理论上，这样的指定操作会触发trivial copy assignment operator进行拷贝搬运操作。然而并没有，只进行简单的位拷贝操作。\n* ```delete heap; ```，由于没有destrucor,同样不会被调用。\n\n#### 4.在上述情况中加入虚函数又将怎么处理？\n将人虚函数之后，class object除了多负担一个vptr之外，也引发编译器对Point class产生膨胀作用。例如：\n```\nclass Point{\npublic:\n    Point(float x = 0.0, float y = 0.0): _x(x), _y(y) { }\n    //no destructor, copy constructor or copy operator\n    virtual float z();\nprotected:\n    float _x, _y;\n};\n```\n* 首先constructor将需要附加一些代码用于将vptr初始化。这些代码位于base class构造函数和用户代码之间。\n```\nPoint* Point::Point(Point *this, float x, float y): _x(x), _y(y)\n{\n    this->_vptr_Point = _vtbl_Point; //设定object的virtual table pointer\n    this->_x = x; //扩展member initialization list\n    this->_y = y;\n\n    return this; //传回this对象\n}\n```\n* 其次需要合成一个copy constructor和一个copy assignment operator，因为直接bitwise操作对于vptr可能是非法的。\n```\n//copy constructor的内部合成\ninline Point* Point::Point(Point* this, const Point& rhs)\n{\n    this->_vptr_Point = _vtbl_Point;//设定object的vptr\n    //将rhs坐标中的位连续拷贝到this对象\n    //或是经由member assignment提供一个member...\n    return this;\n}\n```\n* 一般而言，如果你的设计之中有许多函数都需要以传值方式传回一个local class object，此时提供一个copy constructor就比较合理，它的出现会触发NRV优化。NRV 优化后就不再需要调用copy constructor，因为运算结果已经被直接置于“将被传回 的object”体内了。(有它->NRV->不用它？？？？)\n\n## 二、继承体系下的对象构造\n#### 1. 编译器会对constructor做什么？\n像这样```T object ```定义一个对象时,会调用constructor,其内部做的工作包括：\n* （1）记录在member initialization list中的data members初始化操作会被放进constructor的函数本身，并以members的声明顺序为顺序。\n* （2）如果有一个member并没有出现在member initialization list中，但它有一个default constructor，那么该default constructor必须被调用。\n* （3）在那之前，如果class object有virtual functions, 它们必须被设定初值，指向适当的virtual tables.\n* （4）在那之前，所有上一层的base class constructors必须被调用，以base class生声明顺序为顺序(与member initialization list中的顺序没有关联)：\n* * 如果base class被列于member initialization list中，那么任何明确指定的参数都应该被传递进去。、\n* * 如果base class没有被列于member initialization list中，而它有default constructor(或default memberwise copy constructor),那么就调用之。\n* * 如果base class是多重继承下的第二或后继的base class，那么this指针必须有所调整。\n* （5）在那之前，所有virtual base class constructors必须被调用，从左到右，从最深到最浅\n* * 如果class被列于member initialization list中，那么如果有任何显式指定的参数，都应该传递过去。若没有列于list之中，而class有一个default constructor，亦应该调用之\n* * 此外，class中的每一个virtual base class subobject的偏移位置(offset)必须在执行期可被存取\n* * 如果class object是最底层(most-derived)的class，其constructors可能被调用，某些用以支持这一行为的机制必须被放进来。\n\n#### 2. 一个实例说明编译器在对象构造的过程中所做的操作。\n有一个基类和其对应的派生类如下：\n```\nclass Point\n{\n  public:\n    Point(float x = 0.0, float y = 0.0);\n    Point(const Point&);     //copy constructor\n    Point& operator=(const Point&);   //copy assignment operator\n    virtual ~Point();       //virtual destructor\n    virtual float z() { return 0.0; }\n  protected:\n    float _x, _y; \n};\n```\n```\nclass Line\n{\n    Point _begin, _end;\n  public:\n    Line(float = 0.0, float = 0.0, float = 0.0, float = 0.0);\n    Line(const Point&, const Point&);\n    draw();\n    //...\n};\n```\n* （1）对于 ``` Line::Line(const Point& begin, const Point& end): _end(end), _begin(begin) {} ```,它会被编译器扩充并转换为：\n```\nLine* Line::Line(Line *this, const Point& begin, const Point& end){\n    this->_begin.Point::Point(begin);\n    this->_end.Point::Point(end);\n    return this;\n}\n```\n* （2）对于``` Line a;```implicit Line destructor会被合成出来(如果Line派生自Point,那么合成出来的destructor将会是virtual。然而由于Line只是内带Point objects而非继承自Point，所以被合成出来的destructor只是nontrivial而已)。在其中，它的member class objects的destructor会被调用(与其构造的相反顺序):\n```\ninline Line::~Line(Line *this){\n    this->_end.Point::~Point();\n    this->_begin.Point::~Point();\n}\n```\n\n* (3) 对于``` Line b=a;```implicit Line copy constructor会被合成出来，成为一个inline public member; \n* (4) 对于``` a=b;``` 同样，implicit assignment operator会被合成出来，成为一个inline public member;\n\n#### 3. 虚拟继承：constructor怎么处理virtual base class的构造？\n试想下面三种类派生情况：\n```\nclass Vertex : virtual public Point{ ... }\nclass Vertex3d : public Point3d, public Vertex{ ... }\nclass PVertex : public Vertex3d { ... }\n```\nVertex的constructor必须调用Point的constructor。然而当Point3d和Vertex同为Vertetx3d的subobjects时，它们对Point constructor的调用操作一定不可以发生，取而代之的是，作为一个最底层的class，Vertex3d有责任将Point初始化，而更往后(往下)继承，则由PVertex来负责完成“被共享之Point subobject”的构造。     \n对于Vertex3d，当调用Point3d和Vertex的constructor时，可以通过如下扩展，把\\_most\\_derived参数设为flase从而不调用Point的构造函数。\n```\n//在virtual base class情况下的constructor扩充内容\nPoint3d* Point3d::Point3d(Point3d* this, bool _most_derived, float x, float y, float z)\n{\n    if(_most_derived != false) this->Point::Point(x, y);\n        \n    this->_vptr_Point3d = _vtbl_Point3d;\n    this->vptr_Point3d_Point = _vpbl_Point3d_Point;\n    this->_z = rhs._z;\n    return this;\n}\n```\n> “virtual base class constructors的被调用”有着明确的定义：只有当一个完整的class object被定义出来时，它才会被调用；如果object只是某个完整object的subject，它就不会被调用。\n\n#### 4. vptr初始化语意学：什么时候设置vptr合适？\nconstructor的执行算法通常如下：\n* (1) 在derived class constructor中，“所有virtual base classes”及“上一层base class”的constructors会被调用\n* (2) 上述完成之后，对象的vptrs被初始化，指向相关的virtual tables\n* (3) 如果有member initialization list的话，将在constructor体内扩展开来。这必须在vptr被设定之后才做，以免有一个virtual member function被调用。\n* (4) 最后，执行程序员所提供的代码。      \n\n## 三、对象复制语意学(Object Copy Semantics)\n#### 1. 怎样显式地拒绝将一个class object指定给另一个class object？\n如果想要禁止将一个class object指定给另一个class object，那么只要将copy assignment operator声明为private,并且不提供其定义即可。\n\n#### 2. 关于copy assignment operator。\n对于编译器来说，class如果有了bitwise copy语意，implicit copy assignment copy就会被视为无用的，从而也不会被合并出来。     \n一个class对于默认的copy assignment operator，在以下情况，不会表现出bitwise copy语意：\n* （1）当class内含一个member object，而其class有一个copy assignment operator时\n* （2）当一个class的base class有一个copy assignment operator时\n* （3）当一个class声明了任何virtual functions(我们一定不要拷贝右端class object的vptr地址，因为它可能是一个derived class object)时\n* （4）当class继承自一个virtual base class(不论base class有没有copy operator)时\n> copy assignment operator需要考虑的是需不需要被合成？什么时候被合成？当多重继承遇到virtual base class共享时，如何避免中间base class对最上层base class的subobject的多重拷贝？          \n**书籍作者的建议是不允许virtual base class的拷贝操作，尽量不要在任何virtual base class中声明数据。**\n\n\n## 四、析构语义学(Semantics of Destruction)\n#### 1. 什么时候需要合成destructor?\n如果class没有定义destructor，那么只有在class内含的member object或base class拥有destructor的情况下，编译器才会自动合成一个出来。否则，destructor被视为不需要，也就不需被合成。\n> 事实上，我们应该拒绝那种被我们称为“对称策略”的奇怪想法：“你已经定义了一个constructor,所以你应该提供一个destructor也是天经地义的事”。我们应该因为“需要”而非“感觉”来提供destructor,更不要因为你不确定是否需要一个destructor，于是就提供它。（取自作者原话）\n\n#### 2. 如果没有destructor,编译会在需要时自动合成，那如果有destructor,编译器又是怎么进行扩展的呢?\n一个由程序员定义的destructor被扩展的方式类似constructors被扩展的方式，但顺序相反：\n* （1） destructor的函数本体现在被执行，也就是说vptr会在程序员的代码执行前被重设(reset)\n* （2）如果object内含一个vptr，那么首先重设(reset)相关的virtual table\n* （3）如果class拥有member class objects。而后者拥有destructors，那么它们会以其声明的顺序的相反顺序被调用\n* （4）如果有任何直接的(上一层)nonvirtual base classes拥有destructors，它们会以其声明顺序的相反顺序被调用\n* （5）如果有任何virtual base classes拥有destructor，而目前讨论的这个class是最尾端(most-derived)的class，那么它们会以其原来的构造顺序的相反顺序被调用。\n\n就像constructor一样，目前对于destructor的一种最佳实现策略就是维护两份destructor实体：\n* 一个complete object实例，总是设定好vptr(s)，并调用virtual base class destructors。\n* 一个base class subobject实例；除非在destructor函数中调用一个virtual function，否则它绝不会调用virtual base class destructors并设定vptr。\n\n一个object的生命结束于其destructor开始执行之时。由于每一个base class constructor都轮番被调用，所以derived object实际上变成了一个完整的object。例如一个PVertex对象归还其内存空间之前，会依次变成一个Vertex3d对象、一个Vertex对象、一个Point3d对象，最后成为一个Point对象。当我们在destructor中调用member functiions时，对象的蜕变会因为vptr的重新设定而受到影响。\n","source":"_posts/深度探索c++对象模型/《深度探索c++对象模型》（五）.md","raw":"---\ntitle: 《深度探索c++对象模型》（五）构造、析构、拷贝语意学\ndate: 2019-05-16 16:44:12\ntoc: true\ncomments: true\ntags:\n  - C++基础\ncategories:\n  - C++基础\n---\n\n本章的的主题是构造、析构、拷贝语意学。主要是讨论如何支持class模型，探讨object的整个生命周期。\n<!--more-->\n\n\n### 前述\n> 本章的的主题是构造、析构、拷贝语意学。主要是讨论如何支持class模型，探讨object的整个生命周期。\n\n------------------------------------\n参考书籍及链接：《深度探索c\\+\\+对象模型》    \n\n------------------------------------\n## 0、基础\n#### 1. class data member应该何时被初始化？\n一般而言，class的data member应该被初始化，并且只在constructor中或是在class的其他member functions中指定初值。其他任何操作都将破坏封装性质，使class的维护和修改更加困难。\n\n#### 2. 关于纯虚函数的几点认识。\n* c++中可以定义和调用(invoke)一个pure virtual function：不过它只能被**静态地调用**(用类名调用)，不能经由虚拟机制调用。\n* class设计者如果声明就一定要定义pure virtual destructor，因为每一个 derived class destructor会被编译器加以扩展，以静态调用的方式调用其“每一个virtual base class”以及“上一层base class”的destructor。因此，只要缺乏 任何一个base class destructor的定义，就会导致链接失败。**最好的方式就是不要把virtual destructor声明为pure。**\n\n#### 3. 关于虚拟机制的几点认识。\n* 类中设计虚函数时应先考虑清楚，不会被derived class改写的函数最好被设计 为virtual function。总靠编译器进行优化并不是好的设计理念。\n* 决定一个virtual function是否为const需要先想清楚，不必要的地方别用。\n\n## 一、“无继承”情况下的对象构造\n#### 1.对象的生命周期。\n一个object的生命，是该object的一个执行期属性。local object的生命对应其所 在的scope。global object的生命和整个程序的生命相同。heap object的生命从 它被new运算符配置出来开始，到它被delete运算符摧毁为止。\n\n#### 2.Plain OI' Data 和其相关处理\n形如下列的结构，被C\\+\\+标准称为Plain OI' Data。\n```\ntypedef struct{\n    float x, y, z;\n}Point;\n```\n* 如果以C++ 来编译这段码，理论上编译器会为Point声明一个trivial default constructor、一个trivial destructor、一个trivial copy constructor，以及一个trivial copy assignment operator。但实际上，编译器会分析这个声明，并为它贴上Plain of Data标签。\n* 对于``` Point global; ```理论上,constructor在程序起始处被调用而destructor 在程序的exit()处被调用。然而，事实上那些tirvial members要不是没被定义， 就是没被调用，程序的行为一如它在C中的表现一样。此外，C++ 的所有全局对象都被当作“初始化过的数据”来对待。\n* 对于``` Point *heap = new Point; ```会被转换为对new运算符的调用。但并没有default constructor施行与new运算符所传回的Point object身上。\n* ```*heap = local; ```理论上，这样的指定操作会触发trivial copy assignment operator进行拷贝搬运操作。然而实际上此object是一个Plain old data，所以赋值操作(assignment)将只是像C那样的纯粹位搬移操作。\n* ```delete heap; ```会被转换为对delete运算符的调用,观念上，这样的操作会触发Point的trivial destructor。但是一如我们所见，destructor要不是没有被产生就是没有被调用。\n\n#### 3.抽象数据类型(Abstract Data Type)和其相关处理\n以下是Point的第二次声明，在public接口之下多了private数据，提供完整的封装性，但是没有提供virtual function:\n```\nclass Point{\npublic:\n    Point(float x = 0.0, float y = 0.0, float z = 0.0): _x(x), _y(y),_z(y) { }\n    //no copy constructor, copy operator or destructor defined\nprivate:\n    float _x, _y, _z;\n};\n```\n* 对于Point，我们不需要定义一个copy constructor或copy assignment operator，因为默认的位拷贝已经足够，也不需要destructor,因为默认的内存管理方法也已经足够，如果我们不自己定义，编译器也因为判断不会用到而不会产生的函数。\n* 对于```Point global;  ```default constructor作用于其上。由于global被定义在全局范畴中，其初始化操作将延迟到程序激活时才开始，扩展调用default constructor。如果要将class中的所有成员都设定常 量初值，那么给予一个explicit initialization list会比较有效率些 。\n* 对于``` Point *heap = new Point; ```会被转换为对new运算符的调用。然后调用default Point Constructor并自行扩展。\n* ```*heap = local; ```理论上，这样的指定操作会触发trivial copy assignment operator进行拷贝搬运操作。然而并没有，只进行简单的位拷贝操作。\n* ```delete heap; ```，由于没有destrucor,同样不会被调用。\n\n#### 4.在上述情况中加入虚函数又将怎么处理？\n将人虚函数之后，class object除了多负担一个vptr之外，也引发编译器对Point class产生膨胀作用。例如：\n```\nclass Point{\npublic:\n    Point(float x = 0.0, float y = 0.0): _x(x), _y(y) { }\n    //no destructor, copy constructor or copy operator\n    virtual float z();\nprotected:\n    float _x, _y;\n};\n```\n* 首先constructor将需要附加一些代码用于将vptr初始化。这些代码位于base class构造函数和用户代码之间。\n```\nPoint* Point::Point(Point *this, float x, float y): _x(x), _y(y)\n{\n    this->_vptr_Point = _vtbl_Point; //设定object的virtual table pointer\n    this->_x = x; //扩展member initialization list\n    this->_y = y;\n\n    return this; //传回this对象\n}\n```\n* 其次需要合成一个copy constructor和一个copy assignment operator，因为直接bitwise操作对于vptr可能是非法的。\n```\n//copy constructor的内部合成\ninline Point* Point::Point(Point* this, const Point& rhs)\n{\n    this->_vptr_Point = _vtbl_Point;//设定object的vptr\n    //将rhs坐标中的位连续拷贝到this对象\n    //或是经由member assignment提供一个member...\n    return this;\n}\n```\n* 一般而言，如果你的设计之中有许多函数都需要以传值方式传回一个local class object，此时提供一个copy constructor就比较合理，它的出现会触发NRV优化。NRV 优化后就不再需要调用copy constructor，因为运算结果已经被直接置于“将被传回 的object”体内了。(有它->NRV->不用它？？？？)\n\n## 二、继承体系下的对象构造\n#### 1. 编译器会对constructor做什么？\n像这样```T object ```定义一个对象时,会调用constructor,其内部做的工作包括：\n* （1）记录在member initialization list中的data members初始化操作会被放进constructor的函数本身，并以members的声明顺序为顺序。\n* （2）如果有一个member并没有出现在member initialization list中，但它有一个default constructor，那么该default constructor必须被调用。\n* （3）在那之前，如果class object有virtual functions, 它们必须被设定初值，指向适当的virtual tables.\n* （4）在那之前，所有上一层的base class constructors必须被调用，以base class生声明顺序为顺序(与member initialization list中的顺序没有关联)：\n* * 如果base class被列于member initialization list中，那么任何明确指定的参数都应该被传递进去。、\n* * 如果base class没有被列于member initialization list中，而它有default constructor(或default memberwise copy constructor),那么就调用之。\n* * 如果base class是多重继承下的第二或后继的base class，那么this指针必须有所调整。\n* （5）在那之前，所有virtual base class constructors必须被调用，从左到右，从最深到最浅\n* * 如果class被列于member initialization list中，那么如果有任何显式指定的参数，都应该传递过去。若没有列于list之中，而class有一个default constructor，亦应该调用之\n* * 此外，class中的每一个virtual base class subobject的偏移位置(offset)必须在执行期可被存取\n* * 如果class object是最底层(most-derived)的class，其constructors可能被调用，某些用以支持这一行为的机制必须被放进来。\n\n#### 2. 一个实例说明编译器在对象构造的过程中所做的操作。\n有一个基类和其对应的派生类如下：\n```\nclass Point\n{\n  public:\n    Point(float x = 0.0, float y = 0.0);\n    Point(const Point&);     //copy constructor\n    Point& operator=(const Point&);   //copy assignment operator\n    virtual ~Point();       //virtual destructor\n    virtual float z() { return 0.0; }\n  protected:\n    float _x, _y; \n};\n```\n```\nclass Line\n{\n    Point _begin, _end;\n  public:\n    Line(float = 0.0, float = 0.0, float = 0.0, float = 0.0);\n    Line(const Point&, const Point&);\n    draw();\n    //...\n};\n```\n* （1）对于 ``` Line::Line(const Point& begin, const Point& end): _end(end), _begin(begin) {} ```,它会被编译器扩充并转换为：\n```\nLine* Line::Line(Line *this, const Point& begin, const Point& end){\n    this->_begin.Point::Point(begin);\n    this->_end.Point::Point(end);\n    return this;\n}\n```\n* （2）对于``` Line a;```implicit Line destructor会被合成出来(如果Line派生自Point,那么合成出来的destructor将会是virtual。然而由于Line只是内带Point objects而非继承自Point，所以被合成出来的destructor只是nontrivial而已)。在其中，它的member class objects的destructor会被调用(与其构造的相反顺序):\n```\ninline Line::~Line(Line *this){\n    this->_end.Point::~Point();\n    this->_begin.Point::~Point();\n}\n```\n\n* (3) 对于``` Line b=a;```implicit Line copy constructor会被合成出来，成为一个inline public member; \n* (4) 对于``` a=b;``` 同样，implicit assignment operator会被合成出来，成为一个inline public member;\n\n#### 3. 虚拟继承：constructor怎么处理virtual base class的构造？\n试想下面三种类派生情况：\n```\nclass Vertex : virtual public Point{ ... }\nclass Vertex3d : public Point3d, public Vertex{ ... }\nclass PVertex : public Vertex3d { ... }\n```\nVertex的constructor必须调用Point的constructor。然而当Point3d和Vertex同为Vertetx3d的subobjects时，它们对Point constructor的调用操作一定不可以发生，取而代之的是，作为一个最底层的class，Vertex3d有责任将Point初始化，而更往后(往下)继承，则由PVertex来负责完成“被共享之Point subobject”的构造。     \n对于Vertex3d，当调用Point3d和Vertex的constructor时，可以通过如下扩展，把\\_most\\_derived参数设为flase从而不调用Point的构造函数。\n```\n//在virtual base class情况下的constructor扩充内容\nPoint3d* Point3d::Point3d(Point3d* this, bool _most_derived, float x, float y, float z)\n{\n    if(_most_derived != false) this->Point::Point(x, y);\n        \n    this->_vptr_Point3d = _vtbl_Point3d;\n    this->vptr_Point3d_Point = _vpbl_Point3d_Point;\n    this->_z = rhs._z;\n    return this;\n}\n```\n> “virtual base class constructors的被调用”有着明确的定义：只有当一个完整的class object被定义出来时，它才会被调用；如果object只是某个完整object的subject，它就不会被调用。\n\n#### 4. vptr初始化语意学：什么时候设置vptr合适？\nconstructor的执行算法通常如下：\n* (1) 在derived class constructor中，“所有virtual base classes”及“上一层base class”的constructors会被调用\n* (2) 上述完成之后，对象的vptrs被初始化，指向相关的virtual tables\n* (3) 如果有member initialization list的话，将在constructor体内扩展开来。这必须在vptr被设定之后才做，以免有一个virtual member function被调用。\n* (4) 最后，执行程序员所提供的代码。      \n\n## 三、对象复制语意学(Object Copy Semantics)\n#### 1. 怎样显式地拒绝将一个class object指定给另一个class object？\n如果想要禁止将一个class object指定给另一个class object，那么只要将copy assignment operator声明为private,并且不提供其定义即可。\n\n#### 2. 关于copy assignment operator。\n对于编译器来说，class如果有了bitwise copy语意，implicit copy assignment copy就会被视为无用的，从而也不会被合并出来。     \n一个class对于默认的copy assignment operator，在以下情况，不会表现出bitwise copy语意：\n* （1）当class内含一个member object，而其class有一个copy assignment operator时\n* （2）当一个class的base class有一个copy assignment operator时\n* （3）当一个class声明了任何virtual functions(我们一定不要拷贝右端class object的vptr地址，因为它可能是一个derived class object)时\n* （4）当class继承自一个virtual base class(不论base class有没有copy operator)时\n> copy assignment operator需要考虑的是需不需要被合成？什么时候被合成？当多重继承遇到virtual base class共享时，如何避免中间base class对最上层base class的subobject的多重拷贝？          \n**书籍作者的建议是不允许virtual base class的拷贝操作，尽量不要在任何virtual base class中声明数据。**\n\n\n## 四、析构语义学(Semantics of Destruction)\n#### 1. 什么时候需要合成destructor?\n如果class没有定义destructor，那么只有在class内含的member object或base class拥有destructor的情况下，编译器才会自动合成一个出来。否则，destructor被视为不需要，也就不需被合成。\n> 事实上，我们应该拒绝那种被我们称为“对称策略”的奇怪想法：“你已经定义了一个constructor,所以你应该提供一个destructor也是天经地义的事”。我们应该因为“需要”而非“感觉”来提供destructor,更不要因为你不确定是否需要一个destructor，于是就提供它。（取自作者原话）\n\n#### 2. 如果没有destructor,编译会在需要时自动合成，那如果有destructor,编译器又是怎么进行扩展的呢?\n一个由程序员定义的destructor被扩展的方式类似constructors被扩展的方式，但顺序相反：\n* （1） destructor的函数本体现在被执行，也就是说vptr会在程序员的代码执行前被重设(reset)\n* （2）如果object内含一个vptr，那么首先重设(reset)相关的virtual table\n* （3）如果class拥有member class objects。而后者拥有destructors，那么它们会以其声明的顺序的相反顺序被调用\n* （4）如果有任何直接的(上一层)nonvirtual base classes拥有destructors，它们会以其声明顺序的相反顺序被调用\n* （5）如果有任何virtual base classes拥有destructor，而目前讨论的这个class是最尾端(most-derived)的class，那么它们会以其原来的构造顺序的相反顺序被调用。\n\n就像constructor一样，目前对于destructor的一种最佳实现策略就是维护两份destructor实体：\n* 一个complete object实例，总是设定好vptr(s)，并调用virtual base class destructors。\n* 一个base class subobject实例；除非在destructor函数中调用一个virtual function，否则它绝不会调用virtual base class destructors并设定vptr。\n\n一个object的生命结束于其destructor开始执行之时。由于每一个base class constructor都轮番被调用，所以derived object实际上变成了一个完整的object。例如一个PVertex对象归还其内存空间之前，会依次变成一个Vertex3d对象、一个Vertex对象、一个Point3d对象，最后成为一个Point对象。当我们在destructor中调用member functiions时，对象的蜕变会因为vptr的重新设定而受到影响。\n","slug":"深度探索c++对象模型/《深度探索c++对象模型》（五）","published":1,"updated":"2019-05-16T09:33:13.934Z","_id":"cjvqga0qh000879jx85hwoc76","layout":"post","photos":[],"link":"","content":"<p>本章的的主题是构造、析构、拷贝语意学。主要是讨论如何支持class模型，探讨object的整个生命周期。<br><a id=\"more\"></a></p>\n<h3 id=\"前述\"><a href=\"#前述\" class=\"headerlink\" title=\"前述\"></a>前述</h3><blockquote>\n<p>本章的的主题是构造、析构、拷贝语意学。主要是讨论如何支持class模型，探讨object的整个生命周期。</p>\n</blockquote>\n<hr>\n<p>参考书籍及链接：《深度探索c++对象模型》    </p>\n<hr>\n<h2 id=\"0、基础\"><a href=\"#0、基础\" class=\"headerlink\" title=\"0、基础\"></a>0、基础</h2><h4 id=\"1-class-data-member应该何时被初始化？\"><a href=\"#1-class-data-member应该何时被初始化？\" class=\"headerlink\" title=\"1. class data member应该何时被初始化？\"></a>1. class data member应该何时被初始化？</h4><p>一般而言，class的data member应该被初始化，并且只在constructor中或是在class的其他member functions中指定初值。其他任何操作都将破坏封装性质，使class的维护和修改更加困难。</p>\n<h4 id=\"2-关于纯虚函数的几点认识。\"><a href=\"#2-关于纯虚函数的几点认识。\" class=\"headerlink\" title=\"2. 关于纯虚函数的几点认识。\"></a>2. 关于纯虚函数的几点认识。</h4><ul>\n<li>c++中可以定义和调用(invoke)一个pure virtual function：不过它只能被<strong>静态地调用</strong>(用类名调用)，不能经由虚拟机制调用。</li>\n<li>class设计者如果声明就一定要定义pure virtual destructor，因为每一个 derived class destructor会被编译器加以扩展，以静态调用的方式调用其“每一个virtual base class”以及“上一层base class”的destructor。因此，只要缺乏 任何一个base class destructor的定义，就会导致链接失败。<strong>最好的方式就是不要把virtual destructor声明为pure。</strong></li>\n</ul>\n<h4 id=\"3-关于虚拟机制的几点认识。\"><a href=\"#3-关于虚拟机制的几点认识。\" class=\"headerlink\" title=\"3. 关于虚拟机制的几点认识。\"></a>3. 关于虚拟机制的几点认识。</h4><ul>\n<li>类中设计虚函数时应先考虑清楚，不会被derived class改写的函数最好被设计 为virtual function。总靠编译器进行优化并不是好的设计理念。</li>\n<li>决定一个virtual function是否为const需要先想清楚，不必要的地方别用。</li>\n</ul>\n<h2 id=\"一、“无继承”情况下的对象构造\"><a href=\"#一、“无继承”情况下的对象构造\" class=\"headerlink\" title=\"一、“无继承”情况下的对象构造\"></a>一、“无继承”情况下的对象构造</h2><h4 id=\"1-对象的生命周期。\"><a href=\"#1-对象的生命周期。\" class=\"headerlink\" title=\"1.对象的生命周期。\"></a>1.对象的生命周期。</h4><p>一个object的生命，是该object的一个执行期属性。local object的生命对应其所 在的scope。global object的生命和整个程序的生命相同。heap object的生命从 它被new运算符配置出来开始，到它被delete运算符摧毁为止。</p>\n<h4 id=\"2-Plain-OI’-Data-和其相关处理\"><a href=\"#2-Plain-OI’-Data-和其相关处理\" class=\"headerlink\" title=\"2.Plain OI’ Data 和其相关处理\"></a>2.Plain OI’ Data 和其相关处理</h4><p>形如下列的结构，被C++标准称为Plain OI’ Data。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> x, y, z;</span><br><span class=\"line\">&#125;Point;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>如果以C++ 来编译这段码，理论上编译器会为Point声明一个trivial default constructor、一个trivial destructor、一个trivial copy constructor，以及一个trivial copy assignment operator。但实际上，编译器会分析这个声明，并为它贴上Plain of Data标签。</li>\n<li>对于<figure class=\"highlight plain\"><figcaption><span>global; ```理论上,constructor在程序起始处被调用而destructor 在程序的exit()处被调用。然而，事实上那些tirvial members要不是没被定义， 就是没被调用，程序的行为一如它在C中的表现一样。此外，C++ 的所有全局对象都被当作“初始化过的数据”来对待。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 对于``` Point *heap = new Point; ```会被转换为对new运算符的调用。但并没有default constructor施行与new运算符所传回的Point object身上。</span><br><span class=\"line\">* ```*heap = local; ```理论上，这样的指定操作会触发trivial copy assignment operator进行拷贝搬运操作。然而实际上此object是一个Plain old data，所以赋值操作(assignment)将只是像C那样的纯粹位搬移操作。</span><br><span class=\"line\">* ```delete heap; ```会被转换为对delete运算符的调用,观念上，这样的操作会触发Point的trivial destructor。但是一如我们所见，destructor要不是没有被产生就是没有被调用。</span><br><span class=\"line\"></span><br><span class=\"line\">#### 3.抽象数据类型(Abstract Data Type)和其相关处理</span><br><span class=\"line\">以下是Point的第二次声明，在public接口之下多了private数据，提供完整的封装性，但是没有提供virtual function:</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>class Point{<br>public:<br>    Point(float x = 0.0, float y = 0.0, float z = 0.0): _x(x), _y(y),_z(y) { }<br>    //no copy constructor, copy operator or destructor defined<br>private:<br>    float _x, _y, _z;<br>};<br><figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 对于Point，我们不需要定义一个<span class=\"keyword\">copy</span> <span class=\"function\"><span class=\"keyword\">constructor</span>或<span class=\"title\">copy</span> <span class=\"title\">assignment</span> <span class=\"title\">operator</span>，因为默认的位拷贝已经足够，也不需要<span class=\"title\">destructor</span>,因为默认的内存管理方法也已经足够，如果我们不自己定义，编译器也因为判断不会用到而不会产生的函数。</span></span><br><span class=\"line\"><span class=\"function\">* 对于```<span class=\"title\">Point</span> <span class=\"title\">global</span>;</span>  ```<span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">constructor</span>作用于其上。由于<span class=\"title\">global</span>被定义在全局范畴中，其初始化操作将延迟到程序激活时才开始，扩展调用<span class=\"title\">default</span> <span class=\"title\">constructor</span>。如果要将<span class=\"title\">class</span>中的所有成员都设定常 量初值，那么给予一个<span class=\"title\">explicit</span> <span class=\"title\">initialization</span> <span class=\"title\">list</span>会比较有效率些 。</span></span><br><span class=\"line\"><span class=\"function\">* 对于``` <span class=\"title\">Point</span> *<span class=\"title\">heap</span> = <span class=\"title\">new</span> <span class=\"title\">Point</span>;</span> ```会被转换为对<span class=\"keyword\">new</span>运算符的调用。然后调用<span class=\"keyword\">default</span> Point <span class=\"function\"><span class=\"keyword\">Constructor</span>并自行扩展。</span></span><br><span class=\"line\"><span class=\"function\">* ```*<span class=\"title\">heap</span> = <span class=\"title\">local</span>;</span> ```理论上，这样的指定操作会触发trivial <span class=\"keyword\">copy</span> assignment <span class=\"keyword\">operator</span>进行拷贝搬运操作。然而并没有，只进行简单的位拷贝操作。</span><br><span class=\"line\">* ```delete heap; ```，由于没有destrucor,同样不会被调用。</span><br><span class=\"line\"></span><br><span class=\"line\">#### <span class=\"number\">4</span>.在上述情况中加入虚函数又将怎么处理？</span><br><span class=\"line\">将人虚函数之后，<span class=\"keyword\">class</span> object除了多负担一个vptr之外，也引发编译器对Point <span class=\"keyword\">class</span>产生膨胀作用。例如：</span><br></pre></td></tr></table></figure></p>\n<p>class Point{<br>public:<br>    Point(float x = 0.0, float y = 0.0): _x(x), _y(y) { }<br>    //no destructor, copy constructor or copy operator<br>    virtual float z();<br>protected:<br>    float _x, _y;<br>};<br><figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 首先<span class=\"function\"><span class=\"keyword\">constructor</span>将需要附加一些代码用于将<span class=\"title\">vptr</span>初始化。这些代码位于<span class=\"title\">base</span> <span class=\"title\">class</span>构造函数和用户代码之间。</span></span><br></pre></td></tr></table></figure></p>\n<p>Point<em> Point::Point(Point </em>this, float x, float y): _x(x), _y(y)<br>{<br>    this-&gt;_vptr_Point = _vtbl_Point; //设定object的virtual table pointer<br>    this-&gt;_x = x; //扩展member initialization list<br>    this-&gt;_y = y;</p>\n<pre><code>return this; //传回this对象\n</code></pre><p>}<br><figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 其次需要合成一个<span class=\"keyword\">copy</span> <span class=\"function\"><span class=\"keyword\">constructor</span>和一个<span class=\"title\">copy</span> <span class=\"title\">assignment</span> <span class=\"title\">operator</span>，因为直接<span class=\"title\">bitwise</span>操作对于<span class=\"title\">vptr</span>可能是非法的。</span></span><br></pre></td></tr></table></figure></p>\n<p>//copy constructor的内部合成<br>inline Point<em> Point::Point(Point</em> this, const Point&amp; rhs)<br>{<br>    this-&gt;_vptr_Point = _vtbl_Point;//设定object的vptr<br>    //将rhs坐标中的位连续拷贝到this对象<br>    //或是经由member assignment提供一个member…<br>    return this;<br>}<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 一般而言，如果你的设计之中有许多函数都需要以传值方式传回一个local <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">object</span>，此时提供一个<span class=\"title\">copy</span> <span class=\"keyword\">constructor</span>就比较合理，它的出现会触发<span class=\"title\">NRV</span>优化。<span class=\"title\">NRV</span> 优化后就不再需要调用<span class=\"title\">copy</span> <span class=\"keyword\">constructor</span>，因为运算结果已经被直接置于“将被传回 的<span class=\"title\">object</span>”体内了。</span>(有它-&gt;NRV-&gt;不用它？？？？)</span><br><span class=\"line\"></span><br><span class=\"line\">## 二、继承体系下的对象构造</span><br><span class=\"line\">#### <span class=\"number\">1</span>. 编译器会对<span class=\"keyword\">constructor</span>做什么？</span><br><span class=\"line\">像这样```T <span class=\"keyword\">object</span> ```定义一个对象时,会调用<span class=\"keyword\">constructor</span>,其内部做的工作包括：</span><br><span class=\"line\">* （<span class=\"number\">1</span>）记录在member initialization list中的<span class=\"keyword\">data</span> members初始化操作会被放进<span class=\"keyword\">constructor</span>的函数本身，并以members的声明顺序为顺序。</span><br><span class=\"line\">* （<span class=\"number\">2</span>）如果有一个member并没有出现在member initialization list中，但它有一个<span class=\"keyword\">default</span> <span class=\"keyword\">constructor</span>，那么该<span class=\"keyword\">default</span> <span class=\"keyword\">constructor</span>必须被调用。</span><br><span class=\"line\">* （<span class=\"number\">3</span>）在那之前，如果<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">object</span>有<span class=\"title\">virtual</span> <span class=\"title\">functions</span>, <span class=\"type\">它们必须被设定初值，指向适当的virtual tables.</span></span></span><br><span class=\"line\">* （<span class=\"number\">4</span>）在那之前，所有上一层的base <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">constructors</span>必须被调用，以<span class=\"title\">base</span> <span class=\"title\">class</span>生声明顺序为顺序</span>(与member initialization list中的顺序没有关联)：</span><br><span class=\"line\">* * 如果base <span class=\"class\"><span class=\"keyword\">class</span>被列于<span class=\"title\">member</span> <span class=\"title\">initialization</span> <span class=\"title\">list</span>中，那么任何明确指定的参数都应该被传递进去。、</span></span><br><span class=\"line\">* * 如果base <span class=\"class\"><span class=\"keyword\">class</span>没有被列于<span class=\"title\">member</span> <span class=\"title\">initialization</span> <span class=\"title\">list</span>中，而它有<span class=\"title\">default</span> <span class=\"keyword\">constructor</span></span>(或<span class=\"keyword\">default</span> memberwise copy <span class=\"keyword\">constructor</span>),那么就调用之。</span><br><span class=\"line\">* * 如果base <span class=\"class\"><span class=\"keyword\">class</span>是多重继承下的第二或后继的<span class=\"title\">base</span> <span class=\"title\">class</span>，那么<span class=\"title\">this</span>指针必须有所调整。</span></span><br><span class=\"line\">* （<span class=\"number\">5</span>）在那之前，所有virtual base <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">constructors</span>必须被调用，从左到右，从最深到最浅</span></span><br><span class=\"line\">* * 如果<span class=\"class\"><span class=\"keyword\">class</span>被列于<span class=\"title\">member</span> <span class=\"title\">initialization</span> <span class=\"title\">list</span>中，那么如果有任何显式指定的参数，都应该传递过去。若没有列于<span class=\"title\">list</span>之中，而<span class=\"title\">class</span>有一个<span class=\"title\">default</span> <span class=\"keyword\">constructor</span>，亦应该调用之</span></span><br><span class=\"line\">* * 此外，<span class=\"class\"><span class=\"keyword\">class</span>中的每一个<span class=\"title\">virtual</span> <span class=\"title\">base</span> <span class=\"title\">class</span> <span class=\"title\">subobject</span>的偏移位置</span>(offset)必须在执行期可被存取</span><br><span class=\"line\">* * 如果<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">object</span>是最底层</span>(most-derived)的<span class=\"class\"><span class=\"keyword\">class</span>，其<span class=\"title\">constructors</span>可能被调用，某些用以支持这一行为的机制必须被放进来。</span></span><br><span class=\"line\"></span><br><span class=\"line\">#### <span class=\"number\">2</span>. 一个实例说明编译器在对象构造的过程中所做的操作。</span><br><span class=\"line\">有一个基类和其对应的派生类如下：</span><br></pre></td></tr></table></figure></p>\n<p>class Point<br>{<br>  public:<br>    Point(float x = 0.0, float y = 0.0);<br>    Point(const Point&amp;);     //copy constructor<br>    Point&amp; operator=(const Point&amp;);   //copy assignment operator<br>    virtual ~Point();       //virtual destructor<br>    virtual float z() { return 0.0; }<br>  protected:<br>    float _x, _y;<br>};<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Line</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    Point _begin, _end;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Line(<span class=\"keyword\">float</span> = <span class=\"number\">0.0</span>, <span class=\"keyword\">float</span> = <span class=\"number\">0.0</span>, <span class=\"keyword\">float</span> = <span class=\"number\">0.0</span>, <span class=\"keyword\">float</span> = <span class=\"number\">0.0</span>);</span><br><span class=\"line\">    Line(<span class=\"keyword\">const</span> Point&amp;, <span class=\"keyword\">const</span> Point&amp;);</span><br><span class=\"line\">    draw();</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>（1）对于 <figure class=\"highlight plain\"><figcaption><span>Point& begin, const Point& end): _end(end), _begin(begin) &#123;&#125; ```,它会被编译器扩充并转换为：</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\">Line* Line::Line(Line *this, const Point&amp; begin, const Point&amp; end)&#123;</span><br><span class=\"line\">    this-&gt;_begin.Point::Point(begin);</span><br><span class=\"line\">    this-&gt;_end.Point::Point(end);</span><br><span class=\"line\">    return this;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</li>\n<li><p>（2）对于<figure class=\"highlight plain\"><figcaption><span>a;```implicit Line destructor会被合成出来(如果Line派生自Point,那么合成出来的destructor将会是virtual。然而由于Line只是内带Point objects而非继承自Point，所以被合成出来的destructor只是nontrivial而已)。在其中，它的member class objects的destructor会被调用(与其构造的相反顺序):</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\">inline Line::~Line(Line *this)&#123;</span><br><span class=\"line\">    this-&gt;_end.Point::~Point();</span><br><span class=\"line\">    this-&gt;_begin.Point::~Point();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</li>\n<li><p>(3) 对于<figure class=\"highlight plain\"><figcaption><span>b</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* (4) 对于``` a=b;``` 同样，implicit assignment operator会被合成出来，成为一个inline public member;</span><br><span class=\"line\"></span><br><span class=\"line\">#### 3. 虚拟继承：constructor怎么处理virtual base class的构造？</span><br><span class=\"line\">试想下面三种类派生情况：</span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<p>class Vertex : virtual public Point{ … }<br>class Vertex3d : public Point3d, public Vertex{ … }<br>class PVertex : public Vertex3d { … }<br><figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vertex的<span class=\"function\"><span class=\"keyword\">constructor</span>必须调用<span class=\"title\">Point</span>的<span class=\"title\">constructor</span>。然而当<span class=\"title\">Point3d</span>和<span class=\"title\">Vertex</span>同为<span class=\"title\">Vertetx3d</span>的<span class=\"title\">subobjects</span>时，它们对<span class=\"title\">Point</span> <span class=\"title\">constructor</span>的调用操作一定不可以发生，取而代之的是，作为一个最底层的<span class=\"title\">class</span>，<span class=\"title\">Vertex3d</span>有责任将<span class=\"title\">Point</span>初始化，而更往后<span class=\"params\">(往下)</span>继承，则由<span class=\"title\">PVertex</span>来负责完成“被共享之<span class=\"title\">Point</span> <span class=\"title\">subobject</span>”的构造。     </span></span><br><span class=\"line\"><span class=\"function\">对于<span class=\"title\">Vertex3d</span>，当调用<span class=\"title\">Point3d</span>和<span class=\"title\">Vertex</span>的<span class=\"title\">constructor</span>时，可以通过如下扩展，把\\_<span class=\"title\">most</span>\\_<span class=\"title\">derived</span>参数设为<span class=\"title\">flase</span>从而不调用<span class=\"title\">Point</span>的构造函数。</span></span><br></pre></td></tr></table></figure></p>\n<p>//在virtual base class情况下的constructor扩充内容<br>Point3d<em> Point3d::Point3d(Point3d</em> this, bool _most_derived, float x, float y, float z)<br>{<br>    if(_most_derived != false) this-&gt;Point::Point(x, y);</p>\n<pre><code>this-&gt;_vptr_Point3d = _vtbl_Point3d;\nthis-&gt;vptr_Point3d_Point = _vpbl_Point3d_Point;\nthis-&gt;_z = rhs._z;\nreturn this;\n</code></pre><p>}<br><code>`</code></p>\n<blockquote>\n<p>“virtual base class constructors的被调用”有着明确的定义：只有当一个完整的class object被定义出来时，它才会被调用；如果object只是某个完整object的subject，它就不会被调用。</p>\n</blockquote>\n<h4 id=\"4-vptr初始化语意学：什么时候设置vptr合适？\"><a href=\"#4-vptr初始化语意学：什么时候设置vptr合适？\" class=\"headerlink\" title=\"4. vptr初始化语意学：什么时候设置vptr合适？\"></a>4. vptr初始化语意学：什么时候设置vptr合适？</h4><p>constructor的执行算法通常如下：</p>\n<ul>\n<li>(1) 在derived class constructor中，“所有virtual base classes”及“上一层base class”的constructors会被调用</li>\n<li>(2) 上述完成之后，对象的vptrs被初始化，指向相关的virtual tables</li>\n<li>(3) 如果有member initialization list的话，将在constructor体内扩展开来。这必须在vptr被设定之后才做，以免有一个virtual member function被调用。</li>\n<li>(4) 最后，执行程序员所提供的代码。      </li>\n</ul>\n<h2 id=\"三、对象复制语意学-Object-Copy-Semantics\"><a href=\"#三、对象复制语意学-Object-Copy-Semantics\" class=\"headerlink\" title=\"三、对象复制语意学(Object Copy Semantics)\"></a>三、对象复制语意学(Object Copy Semantics)</h2><h4 id=\"1-怎样显式地拒绝将一个class-object指定给另一个class-object？\"><a href=\"#1-怎样显式地拒绝将一个class-object指定给另一个class-object？\" class=\"headerlink\" title=\"1. 怎样显式地拒绝将一个class object指定给另一个class object？\"></a>1. 怎样显式地拒绝将一个class object指定给另一个class object？</h4><p>如果想要禁止将一个class object指定给另一个class object，那么只要将copy assignment operator声明为private,并且不提供其定义即可。</p>\n<h4 id=\"2-关于copy-assignment-operator。\"><a href=\"#2-关于copy-assignment-operator。\" class=\"headerlink\" title=\"2. 关于copy assignment operator。\"></a>2. 关于copy assignment operator。</h4><p>对于编译器来说，class如果有了bitwise copy语意，implicit copy assignment copy就会被视为无用的，从而也不会被合并出来。<br>一个class对于默认的copy assignment operator，在以下情况，不会表现出bitwise copy语意：</p>\n<ul>\n<li>（1）当class内含一个member object，而其class有一个copy assignment operator时</li>\n<li>（2）当一个class的base class有一个copy assignment operator时</li>\n<li>（3）当一个class声明了任何virtual functions(我们一定不要拷贝右端class object的vptr地址，因为它可能是一个derived class object)时</li>\n<li>（4）当class继承自一个virtual base class(不论base class有没有copy operator)时<blockquote>\n<p>copy assignment operator需要考虑的是需不需要被合成？什么时候被合成？当多重继承遇到virtual base class共享时，如何避免中间base class对最上层base class的subobject的多重拷贝？<br><strong>书籍作者的建议是不允许virtual base class的拷贝操作，尽量不要在任何virtual base class中声明数据。</strong></p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"四、析构语义学-Semantics-of-Destruction\"><a href=\"#四、析构语义学-Semantics-of-Destruction\" class=\"headerlink\" title=\"四、析构语义学(Semantics of Destruction)\"></a>四、析构语义学(Semantics of Destruction)</h2><h4 id=\"1-什么时候需要合成destructor\"><a href=\"#1-什么时候需要合成destructor\" class=\"headerlink\" title=\"1. 什么时候需要合成destructor?\"></a>1. 什么时候需要合成destructor?</h4><p>如果class没有定义destructor，那么只有在class内含的member object或base class拥有destructor的情况下，编译器才会自动合成一个出来。否则，destructor被视为不需要，也就不需被合成。</p>\n<blockquote>\n<p>事实上，我们应该拒绝那种被我们称为“对称策略”的奇怪想法：“你已经定义了一个constructor,所以你应该提供一个destructor也是天经地义的事”。我们应该因为“需要”而非“感觉”来提供destructor,更不要因为你不确定是否需要一个destructor，于是就提供它。（取自作者原话）</p>\n</blockquote>\n<h4 id=\"2-如果没有destructor-编译会在需要时自动合成，那如果有destructor-编译器又是怎么进行扩展的呢\"><a href=\"#2-如果没有destructor-编译会在需要时自动合成，那如果有destructor-编译器又是怎么进行扩展的呢\" class=\"headerlink\" title=\"2. 如果没有destructor,编译会在需要时自动合成，那如果有destructor,编译器又是怎么进行扩展的呢?\"></a>2. 如果没有destructor,编译会在需要时自动合成，那如果有destructor,编译器又是怎么进行扩展的呢?</h4><p>一个由程序员定义的destructor被扩展的方式类似constructors被扩展的方式，但顺序相反：</p>\n<ul>\n<li>（1） destructor的函数本体现在被执行，也就是说vptr会在程序员的代码执行前被重设(reset)</li>\n<li>（2）如果object内含一个vptr，那么首先重设(reset)相关的virtual table</li>\n<li>（3）如果class拥有member class objects。而后者拥有destructors，那么它们会以其声明的顺序的相反顺序被调用</li>\n<li>（4）如果有任何直接的(上一层)nonvirtual base classes拥有destructors，它们会以其声明顺序的相反顺序被调用</li>\n<li>（5）如果有任何virtual base classes拥有destructor，而目前讨论的这个class是最尾端(most-derived)的class，那么它们会以其原来的构造顺序的相反顺序被调用。</li>\n</ul>\n<p>就像constructor一样，目前对于destructor的一种最佳实现策略就是维护两份destructor实体：</p>\n<ul>\n<li>一个complete object实例，总是设定好vptr(s)，并调用virtual base class destructors。</li>\n<li>一个base class subobject实例；除非在destructor函数中调用一个virtual function，否则它绝不会调用virtual base class destructors并设定vptr。</li>\n</ul>\n<p>一个object的生命结束于其destructor开始执行之时。由于每一个base class constructor都轮番被调用，所以derived object实际上变成了一个完整的object。例如一个PVertex对象归还其内存空间之前，会依次变成一个Vertex3d对象、一个Vertex对象、一个Point3d对象，最后成为一个Point对象。当我们在destructor中调用member functiions时，对象的蜕变会因为vptr的重新设定而受到影响。</p>\n","site":{"data":{}},"excerpt":"<p>本章的的主题是构造、析构、拷贝语意学。主要是讨论如何支持class模型，探讨object的整个生命周期。<br>","more":"</p>\n<h3 id=\"前述\"><a href=\"#前述\" class=\"headerlink\" title=\"前述\"></a>前述</h3><blockquote>\n<p>本章的的主题是构造、析构、拷贝语意学。主要是讨论如何支持class模型，探讨object的整个生命周期。</p>\n</blockquote>\n<hr>\n<p>参考书籍及链接：《深度探索c++对象模型》    </p>\n<hr>\n<h2 id=\"0、基础\"><a href=\"#0、基础\" class=\"headerlink\" title=\"0、基础\"></a>0、基础</h2><h4 id=\"1-class-data-member应该何时被初始化？\"><a href=\"#1-class-data-member应该何时被初始化？\" class=\"headerlink\" title=\"1. class data member应该何时被初始化？\"></a>1. class data member应该何时被初始化？</h4><p>一般而言，class的data member应该被初始化，并且只在constructor中或是在class的其他member functions中指定初值。其他任何操作都将破坏封装性质，使class的维护和修改更加困难。</p>\n<h4 id=\"2-关于纯虚函数的几点认识。\"><a href=\"#2-关于纯虚函数的几点认识。\" class=\"headerlink\" title=\"2. 关于纯虚函数的几点认识。\"></a>2. 关于纯虚函数的几点认识。</h4><ul>\n<li>c++中可以定义和调用(invoke)一个pure virtual function：不过它只能被<strong>静态地调用</strong>(用类名调用)，不能经由虚拟机制调用。</li>\n<li>class设计者如果声明就一定要定义pure virtual destructor，因为每一个 derived class destructor会被编译器加以扩展，以静态调用的方式调用其“每一个virtual base class”以及“上一层base class”的destructor。因此，只要缺乏 任何一个base class destructor的定义，就会导致链接失败。<strong>最好的方式就是不要把virtual destructor声明为pure。</strong></li>\n</ul>\n<h4 id=\"3-关于虚拟机制的几点认识。\"><a href=\"#3-关于虚拟机制的几点认识。\" class=\"headerlink\" title=\"3. 关于虚拟机制的几点认识。\"></a>3. 关于虚拟机制的几点认识。</h4><ul>\n<li>类中设计虚函数时应先考虑清楚，不会被derived class改写的函数最好被设计 为virtual function。总靠编译器进行优化并不是好的设计理念。</li>\n<li>决定一个virtual function是否为const需要先想清楚，不必要的地方别用。</li>\n</ul>\n<h2 id=\"一、“无继承”情况下的对象构造\"><a href=\"#一、“无继承”情况下的对象构造\" class=\"headerlink\" title=\"一、“无继承”情况下的对象构造\"></a>一、“无继承”情况下的对象构造</h2><h4 id=\"1-对象的生命周期。\"><a href=\"#1-对象的生命周期。\" class=\"headerlink\" title=\"1.对象的生命周期。\"></a>1.对象的生命周期。</h4><p>一个object的生命，是该object的一个执行期属性。local object的生命对应其所 在的scope。global object的生命和整个程序的生命相同。heap object的生命从 它被new运算符配置出来开始，到它被delete运算符摧毁为止。</p>\n<h4 id=\"2-Plain-OI’-Data-和其相关处理\"><a href=\"#2-Plain-OI’-Data-和其相关处理\" class=\"headerlink\" title=\"2.Plain OI’ Data 和其相关处理\"></a>2.Plain OI’ Data 和其相关处理</h4><p>形如下列的结构，被C++标准称为Plain OI’ Data。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> x, y, z;</span><br><span class=\"line\">&#125;Point;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>如果以C++ 来编译这段码，理论上编译器会为Point声明一个trivial default constructor、一个trivial destructor、一个trivial copy constructor，以及一个trivial copy assignment operator。但实际上，编译器会分析这个声明，并为它贴上Plain of Data标签。</li>\n<li>对于<figure class=\"highlight plain\"><figcaption><span>global; ```理论上,constructor在程序起始处被调用而destructor 在程序的exit()处被调用。然而，事实上那些tirvial members要不是没被定义， 就是没被调用，程序的行为一如它在C中的表现一样。此外，C++ 的所有全局对象都被当作“初始化过的数据”来对待。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 对于``` Point *heap = new Point; ```会被转换为对new运算符的调用。但并没有default constructor施行与new运算符所传回的Point object身上。</span><br><span class=\"line\">* ```*heap = local; ```理论上，这样的指定操作会触发trivial copy assignment operator进行拷贝搬运操作。然而实际上此object是一个Plain old data，所以赋值操作(assignment)将只是像C那样的纯粹位搬移操作。</span><br><span class=\"line\">* ```delete heap; ```会被转换为对delete运算符的调用,观念上，这样的操作会触发Point的trivial destructor。但是一如我们所见，destructor要不是没有被产生就是没有被调用。</span><br><span class=\"line\"></span><br><span class=\"line\">#### 3.抽象数据类型(Abstract Data Type)和其相关处理</span><br><span class=\"line\">以下是Point的第二次声明，在public接口之下多了private数据，提供完整的封装性，但是没有提供virtual function:</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>class Point{<br>public:<br>    Point(float x = 0.0, float y = 0.0, float z = 0.0): _x(x), _y(y),_z(y) { }<br>    //no copy constructor, copy operator or destructor defined<br>private:<br>    float _x, _y, _z;<br>};<br><figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 对于Point，我们不需要定义一个<span class=\"keyword\">copy</span> <span class=\"function\"><span class=\"keyword\">constructor</span>或<span class=\"title\">copy</span> <span class=\"title\">assignment</span> <span class=\"title\">operator</span>，因为默认的位拷贝已经足够，也不需要<span class=\"title\">destructor</span>,因为默认的内存管理方法也已经足够，如果我们不自己定义，编译器也因为判断不会用到而不会产生的函数。</span></span><br><span class=\"line\"><span class=\"function\">* 对于```<span class=\"title\">Point</span> <span class=\"title\">global</span>;</span>  ```<span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">constructor</span>作用于其上。由于<span class=\"title\">global</span>被定义在全局范畴中，其初始化操作将延迟到程序激活时才开始，扩展调用<span class=\"title\">default</span> <span class=\"title\">constructor</span>。如果要将<span class=\"title\">class</span>中的所有成员都设定常 量初值，那么给予一个<span class=\"title\">explicit</span> <span class=\"title\">initialization</span> <span class=\"title\">list</span>会比较有效率些 。</span></span><br><span class=\"line\"><span class=\"function\">* 对于``` <span class=\"title\">Point</span> *<span class=\"title\">heap</span> = <span class=\"title\">new</span> <span class=\"title\">Point</span>;</span> ```会被转换为对<span class=\"keyword\">new</span>运算符的调用。然后调用<span class=\"keyword\">default</span> Point <span class=\"function\"><span class=\"keyword\">Constructor</span>并自行扩展。</span></span><br><span class=\"line\"><span class=\"function\">* ```*<span class=\"title\">heap</span> = <span class=\"title\">local</span>;</span> ```理论上，这样的指定操作会触发trivial <span class=\"keyword\">copy</span> assignment <span class=\"keyword\">operator</span>进行拷贝搬运操作。然而并没有，只进行简单的位拷贝操作。</span><br><span class=\"line\">* ```delete heap; ```，由于没有destrucor,同样不会被调用。</span><br><span class=\"line\"></span><br><span class=\"line\">#### <span class=\"number\">4</span>.在上述情况中加入虚函数又将怎么处理？</span><br><span class=\"line\">将人虚函数之后，<span class=\"keyword\">class</span> object除了多负担一个vptr之外，也引发编译器对Point <span class=\"keyword\">class</span>产生膨胀作用。例如：</span><br></pre></td></tr></table></figure></p>\n<p>class Point{<br>public:<br>    Point(float x = 0.0, float y = 0.0): _x(x), _y(y) { }<br>    //no destructor, copy constructor or copy operator<br>    virtual float z();<br>protected:<br>    float _x, _y;<br>};<br><figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 首先<span class=\"function\"><span class=\"keyword\">constructor</span>将需要附加一些代码用于将<span class=\"title\">vptr</span>初始化。这些代码位于<span class=\"title\">base</span> <span class=\"title\">class</span>构造函数和用户代码之间。</span></span><br></pre></td></tr></table></figure></p>\n<p>Point<em> Point::Point(Point </em>this, float x, float y): _x(x), _y(y)<br>{<br>    this-&gt;_vptr_Point = _vtbl_Point; //设定object的virtual table pointer<br>    this-&gt;_x = x; //扩展member initialization list<br>    this-&gt;_y = y;</p>\n<pre><code>return this; //传回this对象\n</code></pre><p>}<br><figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 其次需要合成一个<span class=\"keyword\">copy</span> <span class=\"function\"><span class=\"keyword\">constructor</span>和一个<span class=\"title\">copy</span> <span class=\"title\">assignment</span> <span class=\"title\">operator</span>，因为直接<span class=\"title\">bitwise</span>操作对于<span class=\"title\">vptr</span>可能是非法的。</span></span><br></pre></td></tr></table></figure></p>\n<p>//copy constructor的内部合成<br>inline Point<em> Point::Point(Point</em> this, const Point&amp; rhs)<br>{<br>    this-&gt;_vptr_Point = _vtbl_Point;//设定object的vptr<br>    //将rhs坐标中的位连续拷贝到this对象<br>    //或是经由member assignment提供一个member…<br>    return this;<br>}<br><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 一般而言，如果你的设计之中有许多函数都需要以传值方式传回一个local <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">object</span>，此时提供一个<span class=\"title\">copy</span> <span class=\"keyword\">constructor</span>就比较合理，它的出现会触发<span class=\"title\">NRV</span>优化。<span class=\"title\">NRV</span> 优化后就不再需要调用<span class=\"title\">copy</span> <span class=\"keyword\">constructor</span>，因为运算结果已经被直接置于“将被传回 的<span class=\"title\">object</span>”体内了。</span>(有它-&gt;NRV-&gt;不用它？？？？)</span><br><span class=\"line\"></span><br><span class=\"line\">## 二、继承体系下的对象构造</span><br><span class=\"line\">#### <span class=\"number\">1</span>. 编译器会对<span class=\"keyword\">constructor</span>做什么？</span><br><span class=\"line\">像这样```T <span class=\"keyword\">object</span> ```定义一个对象时,会调用<span class=\"keyword\">constructor</span>,其内部做的工作包括：</span><br><span class=\"line\">* （<span class=\"number\">1</span>）记录在member initialization list中的<span class=\"keyword\">data</span> members初始化操作会被放进<span class=\"keyword\">constructor</span>的函数本身，并以members的声明顺序为顺序。</span><br><span class=\"line\">* （<span class=\"number\">2</span>）如果有一个member并没有出现在member initialization list中，但它有一个<span class=\"keyword\">default</span> <span class=\"keyword\">constructor</span>，那么该<span class=\"keyword\">default</span> <span class=\"keyword\">constructor</span>必须被调用。</span><br><span class=\"line\">* （<span class=\"number\">3</span>）在那之前，如果<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">object</span>有<span class=\"title\">virtual</span> <span class=\"title\">functions</span>, <span class=\"type\">它们必须被设定初值，指向适当的virtual tables.</span></span></span><br><span class=\"line\">* （<span class=\"number\">4</span>）在那之前，所有上一层的base <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">constructors</span>必须被调用，以<span class=\"title\">base</span> <span class=\"title\">class</span>生声明顺序为顺序</span>(与member initialization list中的顺序没有关联)：</span><br><span class=\"line\">* * 如果base <span class=\"class\"><span class=\"keyword\">class</span>被列于<span class=\"title\">member</span> <span class=\"title\">initialization</span> <span class=\"title\">list</span>中，那么任何明确指定的参数都应该被传递进去。、</span></span><br><span class=\"line\">* * 如果base <span class=\"class\"><span class=\"keyword\">class</span>没有被列于<span class=\"title\">member</span> <span class=\"title\">initialization</span> <span class=\"title\">list</span>中，而它有<span class=\"title\">default</span> <span class=\"keyword\">constructor</span></span>(或<span class=\"keyword\">default</span> memberwise copy <span class=\"keyword\">constructor</span>),那么就调用之。</span><br><span class=\"line\">* * 如果base <span class=\"class\"><span class=\"keyword\">class</span>是多重继承下的第二或后继的<span class=\"title\">base</span> <span class=\"title\">class</span>，那么<span class=\"title\">this</span>指针必须有所调整。</span></span><br><span class=\"line\">* （<span class=\"number\">5</span>）在那之前，所有virtual base <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">constructors</span>必须被调用，从左到右，从最深到最浅</span></span><br><span class=\"line\">* * 如果<span class=\"class\"><span class=\"keyword\">class</span>被列于<span class=\"title\">member</span> <span class=\"title\">initialization</span> <span class=\"title\">list</span>中，那么如果有任何显式指定的参数，都应该传递过去。若没有列于<span class=\"title\">list</span>之中，而<span class=\"title\">class</span>有一个<span class=\"title\">default</span> <span class=\"keyword\">constructor</span>，亦应该调用之</span></span><br><span class=\"line\">* * 此外，<span class=\"class\"><span class=\"keyword\">class</span>中的每一个<span class=\"title\">virtual</span> <span class=\"title\">base</span> <span class=\"title\">class</span> <span class=\"title\">subobject</span>的偏移位置</span>(offset)必须在执行期可被存取</span><br><span class=\"line\">* * 如果<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">object</span>是最底层</span>(most-derived)的<span class=\"class\"><span class=\"keyword\">class</span>，其<span class=\"title\">constructors</span>可能被调用，某些用以支持这一行为的机制必须被放进来。</span></span><br><span class=\"line\"></span><br><span class=\"line\">#### <span class=\"number\">2</span>. 一个实例说明编译器在对象构造的过程中所做的操作。</span><br><span class=\"line\">有一个基类和其对应的派生类如下：</span><br></pre></td></tr></table></figure></p>\n<p>class Point<br>{<br>  public:<br>    Point(float x = 0.0, float y = 0.0);<br>    Point(const Point&amp;);     //copy constructor<br>    Point&amp; operator=(const Point&amp;);   //copy assignment operator<br>    virtual ~Point();       //virtual destructor<br>    virtual float z() { return 0.0; }<br>  protected:<br>    float _x, _y;<br>};<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Line</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    Point _begin, _end;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    Line(<span class=\"keyword\">float</span> = <span class=\"number\">0.0</span>, <span class=\"keyword\">float</span> = <span class=\"number\">0.0</span>, <span class=\"keyword\">float</span> = <span class=\"number\">0.0</span>, <span class=\"keyword\">float</span> = <span class=\"number\">0.0</span>);</span><br><span class=\"line\">    Line(<span class=\"keyword\">const</span> Point&amp;, <span class=\"keyword\">const</span> Point&amp;);</span><br><span class=\"line\">    draw();</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><p>（1）对于 <figure class=\"highlight plain\"><figcaption><span>Point& begin, const Point& end): _end(end), _begin(begin) &#123;&#125; ```,它会被编译器扩充并转换为：</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\">Line* Line::Line(Line *this, const Point&amp; begin, const Point&amp; end)&#123;</span><br><span class=\"line\">    this-&gt;_begin.Point::Point(begin);</span><br><span class=\"line\">    this-&gt;_end.Point::Point(end);</span><br><span class=\"line\">    return this;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</li>\n<li><p>（2）对于<figure class=\"highlight plain\"><figcaption><span>a;```implicit Line destructor会被合成出来(如果Line派生自Point,那么合成出来的destructor将会是virtual。然而由于Line只是内带Point objects而非继承自Point，所以被合成出来的destructor只是nontrivial而已)。在其中，它的member class objects的destructor会被调用(与其构造的相反顺序):</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\">inline Line::~Line(Line *this)&#123;</span><br><span class=\"line\">    this-&gt;_end.Point::~Point();</span><br><span class=\"line\">    this-&gt;_begin.Point::~Point();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</li>\n<li><p>(3) 对于<figure class=\"highlight plain\"><figcaption><span>b</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* (4) 对于``` a=b;``` 同样，implicit assignment operator会被合成出来，成为一个inline public member;</span><br><span class=\"line\"></span><br><span class=\"line\">#### 3. 虚拟继承：constructor怎么处理virtual base class的构造？</span><br><span class=\"line\">试想下面三种类派生情况：</span><br></pre></td></tr></table></figure></p>\n</li>\n</ul>\n<p>class Vertex : virtual public Point{ … }<br>class Vertex3d : public Point3d, public Vertex{ … }<br>class PVertex : public Vertex3d { … }<br><figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vertex的<span class=\"function\"><span class=\"keyword\">constructor</span>必须调用<span class=\"title\">Point</span>的<span class=\"title\">constructor</span>。然而当<span class=\"title\">Point3d</span>和<span class=\"title\">Vertex</span>同为<span class=\"title\">Vertetx3d</span>的<span class=\"title\">subobjects</span>时，它们对<span class=\"title\">Point</span> <span class=\"title\">constructor</span>的调用操作一定不可以发生，取而代之的是，作为一个最底层的<span class=\"title\">class</span>，<span class=\"title\">Vertex3d</span>有责任将<span class=\"title\">Point</span>初始化，而更往后<span class=\"params\">(往下)</span>继承，则由<span class=\"title\">PVertex</span>来负责完成“被共享之<span class=\"title\">Point</span> <span class=\"title\">subobject</span>”的构造。     </span></span><br><span class=\"line\"><span class=\"function\">对于<span class=\"title\">Vertex3d</span>，当调用<span class=\"title\">Point3d</span>和<span class=\"title\">Vertex</span>的<span class=\"title\">constructor</span>时，可以通过如下扩展，把\\_<span class=\"title\">most</span>\\_<span class=\"title\">derived</span>参数设为<span class=\"title\">flase</span>从而不调用<span class=\"title\">Point</span>的构造函数。</span></span><br></pre></td></tr></table></figure></p>\n<p>//在virtual base class情况下的constructor扩充内容<br>Point3d<em> Point3d::Point3d(Point3d</em> this, bool _most_derived, float x, float y, float z)<br>{<br>    if(_most_derived != false) this-&gt;Point::Point(x, y);</p>\n<pre><code>this-&gt;_vptr_Point3d = _vtbl_Point3d;\nthis-&gt;vptr_Point3d_Point = _vpbl_Point3d_Point;\nthis-&gt;_z = rhs._z;\nreturn this;\n</code></pre><p>}<br><code>`</code></p>\n<blockquote>\n<p>“virtual base class constructors的被调用”有着明确的定义：只有当一个完整的class object被定义出来时，它才会被调用；如果object只是某个完整object的subject，它就不会被调用。</p>\n</blockquote>\n<h4 id=\"4-vptr初始化语意学：什么时候设置vptr合适？\"><a href=\"#4-vptr初始化语意学：什么时候设置vptr合适？\" class=\"headerlink\" title=\"4. vptr初始化语意学：什么时候设置vptr合适？\"></a>4. vptr初始化语意学：什么时候设置vptr合适？</h4><p>constructor的执行算法通常如下：</p>\n<ul>\n<li>(1) 在derived class constructor中，“所有virtual base classes”及“上一层base class”的constructors会被调用</li>\n<li>(2) 上述完成之后，对象的vptrs被初始化，指向相关的virtual tables</li>\n<li>(3) 如果有member initialization list的话，将在constructor体内扩展开来。这必须在vptr被设定之后才做，以免有一个virtual member function被调用。</li>\n<li>(4) 最后，执行程序员所提供的代码。      </li>\n</ul>\n<h2 id=\"三、对象复制语意学-Object-Copy-Semantics\"><a href=\"#三、对象复制语意学-Object-Copy-Semantics\" class=\"headerlink\" title=\"三、对象复制语意学(Object Copy Semantics)\"></a>三、对象复制语意学(Object Copy Semantics)</h2><h4 id=\"1-怎样显式地拒绝将一个class-object指定给另一个class-object？\"><a href=\"#1-怎样显式地拒绝将一个class-object指定给另一个class-object？\" class=\"headerlink\" title=\"1. 怎样显式地拒绝将一个class object指定给另一个class object？\"></a>1. 怎样显式地拒绝将一个class object指定给另一个class object？</h4><p>如果想要禁止将一个class object指定给另一个class object，那么只要将copy assignment operator声明为private,并且不提供其定义即可。</p>\n<h4 id=\"2-关于copy-assignment-operator。\"><a href=\"#2-关于copy-assignment-operator。\" class=\"headerlink\" title=\"2. 关于copy assignment operator。\"></a>2. 关于copy assignment operator。</h4><p>对于编译器来说，class如果有了bitwise copy语意，implicit copy assignment copy就会被视为无用的，从而也不会被合并出来。<br>一个class对于默认的copy assignment operator，在以下情况，不会表现出bitwise copy语意：</p>\n<ul>\n<li>（1）当class内含一个member object，而其class有一个copy assignment operator时</li>\n<li>（2）当一个class的base class有一个copy assignment operator时</li>\n<li>（3）当一个class声明了任何virtual functions(我们一定不要拷贝右端class object的vptr地址，因为它可能是一个derived class object)时</li>\n<li>（4）当class继承自一个virtual base class(不论base class有没有copy operator)时<blockquote>\n<p>copy assignment operator需要考虑的是需不需要被合成？什么时候被合成？当多重继承遇到virtual base class共享时，如何避免中间base class对最上层base class的subobject的多重拷贝？<br><strong>书籍作者的建议是不允许virtual base class的拷贝操作，尽量不要在任何virtual base class中声明数据。</strong></p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"四、析构语义学-Semantics-of-Destruction\"><a href=\"#四、析构语义学-Semantics-of-Destruction\" class=\"headerlink\" title=\"四、析构语义学(Semantics of Destruction)\"></a>四、析构语义学(Semantics of Destruction)</h2><h4 id=\"1-什么时候需要合成destructor\"><a href=\"#1-什么时候需要合成destructor\" class=\"headerlink\" title=\"1. 什么时候需要合成destructor?\"></a>1. 什么时候需要合成destructor?</h4><p>如果class没有定义destructor，那么只有在class内含的member object或base class拥有destructor的情况下，编译器才会自动合成一个出来。否则，destructor被视为不需要，也就不需被合成。</p>\n<blockquote>\n<p>事实上，我们应该拒绝那种被我们称为“对称策略”的奇怪想法：“你已经定义了一个constructor,所以你应该提供一个destructor也是天经地义的事”。我们应该因为“需要”而非“感觉”来提供destructor,更不要因为你不确定是否需要一个destructor，于是就提供它。（取自作者原话）</p>\n</blockquote>\n<h4 id=\"2-如果没有destructor-编译会在需要时自动合成，那如果有destructor-编译器又是怎么进行扩展的呢\"><a href=\"#2-如果没有destructor-编译会在需要时自动合成，那如果有destructor-编译器又是怎么进行扩展的呢\" class=\"headerlink\" title=\"2. 如果没有destructor,编译会在需要时自动合成，那如果有destructor,编译器又是怎么进行扩展的呢?\"></a>2. 如果没有destructor,编译会在需要时自动合成，那如果有destructor,编译器又是怎么进行扩展的呢?</h4><p>一个由程序员定义的destructor被扩展的方式类似constructors被扩展的方式，但顺序相反：</p>\n<ul>\n<li>（1） destructor的函数本体现在被执行，也就是说vptr会在程序员的代码执行前被重设(reset)</li>\n<li>（2）如果object内含一个vptr，那么首先重设(reset)相关的virtual table</li>\n<li>（3）如果class拥有member class objects。而后者拥有destructors，那么它们会以其声明的顺序的相反顺序被调用</li>\n<li>（4）如果有任何直接的(上一层)nonvirtual base classes拥有destructors，它们会以其声明顺序的相反顺序被调用</li>\n<li>（5）如果有任何virtual base classes拥有destructor，而目前讨论的这个class是最尾端(most-derived)的class，那么它们会以其原来的构造顺序的相反顺序被调用。</li>\n</ul>\n<p>就像constructor一样，目前对于destructor的一种最佳实现策略就是维护两份destructor实体：</p>\n<ul>\n<li>一个complete object实例，总是设定好vptr(s)，并调用virtual base class destructors。</li>\n<li>一个base class subobject实例；除非在destructor函数中调用一个virtual function，否则它绝不会调用virtual base class destructors并设定vptr。</li>\n</ul>\n<p>一个object的生命结束于其destructor开始执行之时。由于每一个base class constructor都轮番被调用，所以derived object实际上变成了一个完整的object。例如一个PVertex对象归还其内存空间之前，会依次变成一个Vertex3d对象、一个Vertex对象、一个Point3d对象，最后成为一个Point对象。当我们在destructor中调用member functiions时，对象的蜕变会因为vptr的重新设定而受到影响。</p>"},{"title":"《深度探索c++对象模型》（六）执行期语意学","date":"2019-05-16T08:44:12.000Z","toc":true,"comments":1,"_content":"\n本章的的主题是执行器语意学，查看执期的某些对象模型行为。包括零时性对象的生命及其死亡，以及对new运算符和delete预算符的支持。\n<!--more-->\n\n### 前述\n> 本章的的主题是执行器语意学，查看执期的某些对象模型行为。包括零时性对象的生命及其死亡，以及对new运算符和delete预算符的支持。\n------------------------------------\n参考书籍及链接：《深度探索c\\+\\+对象模型》    \n\n------------------------------------\n## 0、基础\n实际上，一个简单的操作，其背后所隐藏的意义都要经过编译器进行适当的解析，编译器所作的工作可能会超出我们的想象许多，编译器所做的这些填充操作最后都会在执行期一一执行，本章就是要看执行期所发生的转换。\n\n## 一、对象的构造和析构\n#### 1. 关于构造和析构\n构造通常在object被定义之后，而destructor要放在每一个离开点之前。一般而言我们会把object尽可能放置在使用它的那个程序区段附近，这么做可以节省非必要的对象产生操作和摧毁操作。\n> 我们很多时候习惯把变量和object的定义放在函数的开始部分，这使得部分不必要的destructor不得不被调用，增加了部分开销。\n\n#### 2. 全局对象\nC++ 保证，一定会在main()函数中第一次用到global object之前，把它构造出来，而在main() 函数结束之前把global object摧毁掉。global object如果有constructor和destructor的话， 我们说它需要静态的初始化操作和内存释放操作。   \nC++程序中所有的global objects都被放置在程序的data segment中。如果显式指定给它一个值， 此object 将以该值为初值。否则object配置到的内存内容为0。虽然class object在编译时期可以 被放置于data segment中并且内容为0，但constructor一直要到程序启动(startup)时才会实施。  \n\n#### 3. 局部静态对象\n关于局部静态对象，注意两点：    \n（1）即使其所在的函数被调用多次，对应的constructor也只能执行一次。    \n（2）即使其所在的函数被调用多次，对应的deconstructor也只能执行一次。    \n为了能只执行一次对应的constructor，编译器引入一个临时性变量用于进行判断，初始时临时性变量为false，当local static object被构建好后，临时性变量变为true。而destructor则根据该 临时性是否为true决定是否析构local static object。\n\n#### 4. 对象数组\nC\\+\\+编译器之一cfront提供一个被命名为ve\\_new()函数，产生出以class objects构造而 成的数组。在vec\\_new()中，constructor施行于elem_count个元素之上;在vec_delete()中，destructor被施行于elem\\_count个元素身上。\n```\nPoint knots[10] = {Point(),Point(1.0, 1.0, 0.5),-1.0};\n```\n对于上述这种明显获得初值的元素，vec\\_new()不再有必要。对于那些尚未被初始化的元素，vec_new()的施行方式就像面对“由class elements组成的数组，而该数组没有explicit initialization list”一样。类似下面这样：\n```\n//明确初始化前3个元素\nPoint::Point(&knots[0]);\nPoint::Point(&knots[1], 1.0, 1.0, 0.5);\nPoint::Point(&knots[2], -1.0, 0.0, 0.0);\n//以vec_new初始化后7个元素\nvec_new(&knots + 3, sizeof(Point), 7, &Point::Point, 0);\n```\n\n## 二、new和delete运算符\n#### 1.new和delete对内置类型的处理。\n```\nint *pi = new int(5);\n```\n对于如上的语句，实际分为如下两个步骤完成：     \n（1）通过适当的new运算符配置所需的内存。    \n（2）给配置得来的对象设立初值。   \n```\n//实际执行过程\nint *pi;\nif(pi = _new(sizeof(int)))  *pi = 5; //成功了才初始化\n\n//delete运算符的情况类似\nif(pi != 0)   _delete(pi);\n```\n#### 2.construct如何配置一个class object？\n以constructor来配置一个class object，处理类似如下：\n```\nPoint3d *origin = new Point3d;\n//被转换为：\nPoint3d *origin;\nif(origin  = _new(sizeof(Point3d)))  origin = Point3d::Point3d(origin);\n\n//对于delete origin，转换结果类似于：\nif(origin != 0)   \n{\n   Point3d::~Point3d(origin);\n   _delete(origin);\n}\n```\nnew运算符实际上总是以标准的C malloc()完成，虽然并没有规定一定得这么做不可。相同情况，delete运算符总是以标准的C free()完成。\n\n#### 3.针对数组的new语意\n* 对于像```int *p_array = new int[5];```这样的语句，vec\\_new()不会真正被调用，因为它 的主要功能是把default constructor施行于class objects所组成的数组的每一个元素身上。\n* 对于```simple_aggr *p_aggr = new simple_aggr[5];```,vec\\_new()也不会被调用，因为simple\\_aggr并没有定义一个constructor或destructor，所以配置数组以及清除p\\_aggr数组的操作，只是单纯地获得内存和释放内存而已，这些操作由new和delete运算符来完成就绰绰有余了。\n\n然而如果class定义有一个default constructo，某些版本的vec_new()就会被调用，配置并构 造class objects所组成的数组，如第一节中所示那样。  \n* 寻找数组维度，对于delete运算符的效率带来极大的冲击，所以才导致这样的妥协：只有在中括号出现时，编译器才寻找数组的维度，否则它便假设只有单独一个objects要被删除。\n\n#### 4.Placement Operator new的语意\n有一个预先定义好的重载的(overloaded) new运算符，称为placement operator new，它需要第二个参数，类型为void*，调用方式如下：\n```\nPoint2w *ptw = new(arena) Point2w;\n```\n其中arena指向内存中的一个区块，用以放置新产生出来的Point2w object。这个预先定义好的placement operator new的实现方法简直是出乎意料的平凡，它只要将“获得的指针”(上例为arena)所指的地址传回。\n> 用这个的意义是什么呢？\n\n\n## 三、临时性对象\n#### 1.编译器什么时候产生临时性对象和摧毁临时性对象？\n是否会导致一个临时性对象，视编译器的进取性以及程序上下语境而定。C\\+\\+ Standard允许编译器对于临时性对象的产生有完全的自由度。    \nc\\+\\+标准指出，临时性对象的被摧毁，应该是对完整表达式求值过程中的最后一个步骤，该完整表达式造成临时性对象的产生。\n\n#### 2.什么是完整表达式？\n非正式地说，完整表达式是被涵括的表达式中最外围的那个。\n```\n((objA > 1024) && (objB > 1024) ? objA + objB : foo(objA, objB));\n```\n对于上述表达式，一共有五个子算式，内带一个\"? : 完整表达式\"中。任何一个子表达式所产生的任何一个临时对象，都应该在完整表达式被求值完成后，才可以毁去。\n\n#### 3.关于临时性对象生命规则的的两个例外。\n临时性对象的生命规则有两个例外：\n* 第一个例外发生在表达式被用来初始化一个object时，C++ Standard要求说：凡含有表 达式执行结果的临时性对象，应该存留到object的初始化操作完成为止。\n* 临时性对象的生命规则的第二个例外是\"当一个临时性对象被一个reference绑定\"时。如果一个临时性对象被绑定于一个reference，对象将残留，直到被初始化之reference的生命结束，或直到临时对象的生命范畴(scope)结束——视哪一种情况先到达而定。","source":"_posts/深度探索c++对象模型/《深度探索c++对象模型》（六）.md","raw":"---\ntitle: 《深度探索c++对象模型》（六）执行期语意学\ndate: 2019-05-16 16:44:12\ntoc: true\ncomments: true\ntags:\n  - C++基础\ncategories:\n  - C++基础\n---\n\n本章的的主题是执行器语意学，查看执期的某些对象模型行为。包括零时性对象的生命及其死亡，以及对new运算符和delete预算符的支持。\n<!--more-->\n\n### 前述\n> 本章的的主题是执行器语意学，查看执期的某些对象模型行为。包括零时性对象的生命及其死亡，以及对new运算符和delete预算符的支持。\n------------------------------------\n参考书籍及链接：《深度探索c\\+\\+对象模型》    \n\n------------------------------------\n## 0、基础\n实际上，一个简单的操作，其背后所隐藏的意义都要经过编译器进行适当的解析，编译器所作的工作可能会超出我们的想象许多，编译器所做的这些填充操作最后都会在执行期一一执行，本章就是要看执行期所发生的转换。\n\n## 一、对象的构造和析构\n#### 1. 关于构造和析构\n构造通常在object被定义之后，而destructor要放在每一个离开点之前。一般而言我们会把object尽可能放置在使用它的那个程序区段附近，这么做可以节省非必要的对象产生操作和摧毁操作。\n> 我们很多时候习惯把变量和object的定义放在函数的开始部分，这使得部分不必要的destructor不得不被调用，增加了部分开销。\n\n#### 2. 全局对象\nC++ 保证，一定会在main()函数中第一次用到global object之前，把它构造出来，而在main() 函数结束之前把global object摧毁掉。global object如果有constructor和destructor的话， 我们说它需要静态的初始化操作和内存释放操作。   \nC++程序中所有的global objects都被放置在程序的data segment中。如果显式指定给它一个值， 此object 将以该值为初值。否则object配置到的内存内容为0。虽然class object在编译时期可以 被放置于data segment中并且内容为0，但constructor一直要到程序启动(startup)时才会实施。  \n\n#### 3. 局部静态对象\n关于局部静态对象，注意两点：    \n（1）即使其所在的函数被调用多次，对应的constructor也只能执行一次。    \n（2）即使其所在的函数被调用多次，对应的deconstructor也只能执行一次。    \n为了能只执行一次对应的constructor，编译器引入一个临时性变量用于进行判断，初始时临时性变量为false，当local static object被构建好后，临时性变量变为true。而destructor则根据该 临时性是否为true决定是否析构local static object。\n\n#### 4. 对象数组\nC\\+\\+编译器之一cfront提供一个被命名为ve\\_new()函数，产生出以class objects构造而 成的数组。在vec\\_new()中，constructor施行于elem_count个元素之上;在vec_delete()中，destructor被施行于elem\\_count个元素身上。\n```\nPoint knots[10] = {Point(),Point(1.0, 1.0, 0.5),-1.0};\n```\n对于上述这种明显获得初值的元素，vec\\_new()不再有必要。对于那些尚未被初始化的元素，vec_new()的施行方式就像面对“由class elements组成的数组，而该数组没有explicit initialization list”一样。类似下面这样：\n```\n//明确初始化前3个元素\nPoint::Point(&knots[0]);\nPoint::Point(&knots[1], 1.0, 1.0, 0.5);\nPoint::Point(&knots[2], -1.0, 0.0, 0.0);\n//以vec_new初始化后7个元素\nvec_new(&knots + 3, sizeof(Point), 7, &Point::Point, 0);\n```\n\n## 二、new和delete运算符\n#### 1.new和delete对内置类型的处理。\n```\nint *pi = new int(5);\n```\n对于如上的语句，实际分为如下两个步骤完成：     \n（1）通过适当的new运算符配置所需的内存。    \n（2）给配置得来的对象设立初值。   \n```\n//实际执行过程\nint *pi;\nif(pi = _new(sizeof(int)))  *pi = 5; //成功了才初始化\n\n//delete运算符的情况类似\nif(pi != 0)   _delete(pi);\n```\n#### 2.construct如何配置一个class object？\n以constructor来配置一个class object，处理类似如下：\n```\nPoint3d *origin = new Point3d;\n//被转换为：\nPoint3d *origin;\nif(origin  = _new(sizeof(Point3d)))  origin = Point3d::Point3d(origin);\n\n//对于delete origin，转换结果类似于：\nif(origin != 0)   \n{\n   Point3d::~Point3d(origin);\n   _delete(origin);\n}\n```\nnew运算符实际上总是以标准的C malloc()完成，虽然并没有规定一定得这么做不可。相同情况，delete运算符总是以标准的C free()完成。\n\n#### 3.针对数组的new语意\n* 对于像```int *p_array = new int[5];```这样的语句，vec\\_new()不会真正被调用，因为它 的主要功能是把default constructor施行于class objects所组成的数组的每一个元素身上。\n* 对于```simple_aggr *p_aggr = new simple_aggr[5];```,vec\\_new()也不会被调用，因为simple\\_aggr并没有定义一个constructor或destructor，所以配置数组以及清除p\\_aggr数组的操作，只是单纯地获得内存和释放内存而已，这些操作由new和delete运算符来完成就绰绰有余了。\n\n然而如果class定义有一个default constructo，某些版本的vec_new()就会被调用，配置并构 造class objects所组成的数组，如第一节中所示那样。  \n* 寻找数组维度，对于delete运算符的效率带来极大的冲击，所以才导致这样的妥协：只有在中括号出现时，编译器才寻找数组的维度，否则它便假设只有单独一个objects要被删除。\n\n#### 4.Placement Operator new的语意\n有一个预先定义好的重载的(overloaded) new运算符，称为placement operator new，它需要第二个参数，类型为void*，调用方式如下：\n```\nPoint2w *ptw = new(arena) Point2w;\n```\n其中arena指向内存中的一个区块，用以放置新产生出来的Point2w object。这个预先定义好的placement operator new的实现方法简直是出乎意料的平凡，它只要将“获得的指针”(上例为arena)所指的地址传回。\n> 用这个的意义是什么呢？\n\n\n## 三、临时性对象\n#### 1.编译器什么时候产生临时性对象和摧毁临时性对象？\n是否会导致一个临时性对象，视编译器的进取性以及程序上下语境而定。C\\+\\+ Standard允许编译器对于临时性对象的产生有完全的自由度。    \nc\\+\\+标准指出，临时性对象的被摧毁，应该是对完整表达式求值过程中的最后一个步骤，该完整表达式造成临时性对象的产生。\n\n#### 2.什么是完整表达式？\n非正式地说，完整表达式是被涵括的表达式中最外围的那个。\n```\n((objA > 1024) && (objB > 1024) ? objA + objB : foo(objA, objB));\n```\n对于上述表达式，一共有五个子算式，内带一个\"? : 完整表达式\"中。任何一个子表达式所产生的任何一个临时对象，都应该在完整表达式被求值完成后，才可以毁去。\n\n#### 3.关于临时性对象生命规则的的两个例外。\n临时性对象的生命规则有两个例外：\n* 第一个例外发生在表达式被用来初始化一个object时，C++ Standard要求说：凡含有表 达式执行结果的临时性对象，应该存留到object的初始化操作完成为止。\n* 临时性对象的生命规则的第二个例外是\"当一个临时性对象被一个reference绑定\"时。如果一个临时性对象被绑定于一个reference，对象将残留，直到被初始化之reference的生命结束，或直到临时对象的生命范畴(scope)结束——视哪一种情况先到达而定。","slug":"深度探索c++对象模型/《深度探索c++对象模型》（六）","published":1,"updated":"2019-05-16T09:33:24.301Z","_id":"cjvqga0qk000c79jxxlu53r90","layout":"post","photos":[],"link":"","content":"<p>本章的的主题是执行器语意学，查看执期的某些对象模型行为。包括零时性对象的生命及其死亡，以及对new运算符和delete预算符的支持。<br><a id=\"more\"></a></p>\n<h3 id=\"前述\"><a href=\"#前述\" class=\"headerlink\" title=\"前述\"></a>前述</h3><blockquote>\n<p>本章的的主题是执行器语意学，查看执期的某些对象模型行为。包括零时性对象的生命及其死亡，以及对new运算符和delete预算符的支持。</p>\n</blockquote>\n<hr>\n<p>参考书籍及链接：《深度探索c++对象模型》    </p>\n<hr>\n<h2 id=\"0、基础\"><a href=\"#0、基础\" class=\"headerlink\" title=\"0、基础\"></a>0、基础</h2><p>实际上，一个简单的操作，其背后所隐藏的意义都要经过编译器进行适当的解析，编译器所作的工作可能会超出我们的想象许多，编译器所做的这些填充操作最后都会在执行期一一执行，本章就是要看执行期所发生的转换。</p>\n<h2 id=\"一、对象的构造和析构\"><a href=\"#一、对象的构造和析构\" class=\"headerlink\" title=\"一、对象的构造和析构\"></a>一、对象的构造和析构</h2><h4 id=\"1-关于构造和析构\"><a href=\"#1-关于构造和析构\" class=\"headerlink\" title=\"1. 关于构造和析构\"></a>1. 关于构造和析构</h4><p>构造通常在object被定义之后，而destructor要放在每一个离开点之前。一般而言我们会把object尽可能放置在使用它的那个程序区段附近，这么做可以节省非必要的对象产生操作和摧毁操作。</p>\n<blockquote>\n<p>我们很多时候习惯把变量和object的定义放在函数的开始部分，这使得部分不必要的destructor不得不被调用，增加了部分开销。</p>\n</blockquote>\n<h4 id=\"2-全局对象\"><a href=\"#2-全局对象\" class=\"headerlink\" title=\"2. 全局对象\"></a>2. 全局对象</h4><p>C++ 保证，一定会在main()函数中第一次用到global object之前，把它构造出来，而在main() 函数结束之前把global object摧毁掉。global object如果有constructor和destructor的话， 我们说它需要静态的初始化操作和内存释放操作。<br>C++程序中所有的global objects都被放置在程序的data segment中。如果显式指定给它一个值， 此object 将以该值为初值。否则object配置到的内存内容为0。虽然class object在编译时期可以 被放置于data segment中并且内容为0，但constructor一直要到程序启动(startup)时才会实施。  </p>\n<h4 id=\"3-局部静态对象\"><a href=\"#3-局部静态对象\" class=\"headerlink\" title=\"3. 局部静态对象\"></a>3. 局部静态对象</h4><p>关于局部静态对象，注意两点：<br>（1）即使其所在的函数被调用多次，对应的constructor也只能执行一次。<br>（2）即使其所在的函数被调用多次，对应的deconstructor也只能执行一次。<br>为了能只执行一次对应的constructor，编译器引入一个临时性变量用于进行判断，初始时临时性变量为false，当local static object被构建好后，临时性变量变为true。而destructor则根据该 临时性是否为true决定是否析构local static object。</p>\n<h4 id=\"4-对象数组\"><a href=\"#4-对象数组\" class=\"headerlink\" title=\"4. 对象数组\"></a>4. 对象数组</h4><p>C++编译器之一cfront提供一个被命名为ve_new()函数，产生出以class objects构造而 成的数组。在vec_new()中，constructor施行于elem_count个元素之上;在vec_delete()中，destructor被施行于elem_count个元素身上。<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Point knots[<span class=\"number\">10</span>] = &#123;Point(),Point(<span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">0.5</span>),<span class=\"number\">-1.0</span>&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>对于上述这种明显获得初值的元素，vec_new()不再有必要。对于那些尚未被初始化的元素，vec_new()的施行方式就像面对“由class elements组成的数组，而该数组没有explicit initialization list”一样。类似下面这样：<br><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//明确初始化前3个元素</span></span><br><span class=\"line\"><span class=\"symbol\">Point:</span>:Point(<span class=\"variable\">&amp;knots</span>[<span class=\"number\">0</span>]);</span><br><span class=\"line\"><span class=\"symbol\">Point:</span>:Point(<span class=\"variable\">&amp;knots</span>[<span class=\"number\">1</span>], <span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">0.5</span>);</span><br><span class=\"line\"><span class=\"symbol\">Point:</span>:Point(<span class=\"variable\">&amp;knots</span>[<span class=\"number\">2</span>], <span class=\"number\">-1.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//以vec_new初始化后7个元素</span></span><br><span class=\"line\">vec_new(<span class=\"variable\">&amp;knots</span> + <span class=\"number\">3</span>, sizeof(Point), <span class=\"number\">7</span>, &amp;<span class=\"symbol\">Point::</span>Point, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"二、new和delete运算符\"><a href=\"#二、new和delete运算符\" class=\"headerlink\" title=\"二、new和delete运算符\"></a>二、new和delete运算符</h2><h4 id=\"1-new和delete对内置类型的处理。\"><a href=\"#1-new和delete对内置类型的处理。\" class=\"headerlink\" title=\"1.new和delete对内置类型的处理。\"></a>1.new和delete对内置类型的处理。</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> *pi = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure>\n<p>对于如上的语句，实际分为如下两个步骤完成：<br>（1）通过适当的new运算符配置所需的内存。<br>（2）给配置得来的对象设立初值。<br><figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实际执行过程</span></span><br><span class=\"line\">int *<span class=\"literal\">pi</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">pi</span> = <span class=\"variable\">_new</span>(<span class=\"built_in\">sizeof</span>(int)))  *<span class=\"literal\">pi</span> = <span class=\"number\">5</span>; <span class=\"comment\">//成功了才初始化</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//delete运算符的情况类似</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">pi</span> != <span class=\"number\">0</span>)   <span class=\"variable\">_delete</span>(<span class=\"literal\">pi</span>);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-construct如何配置一个class-object？\"><a href=\"#2-construct如何配置一个class-object？\" class=\"headerlink\" title=\"2.construct如何配置一个class object？\"></a>2.construct如何配置一个class object？</h4><p>以constructor来配置一个class object，处理类似如下：<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Point3d *<span class=\"built_in\">origin</span> = <span class=\"built_in\">new</span> Point3d;</span><br><span class=\"line\">//被转换为：</span><br><span class=\"line\">Point3d *<span class=\"built_in\">origin</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">origin</span>  = _new(sizeof(Point3d)))  <span class=\"built_in\">origin</span> = Point3d::Point3d(<span class=\"built_in\">origin</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">//对于<span class=\"built_in\">delete</span> <span class=\"built_in\">origin</span>，转换结果类似于：</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">origin</span> != <span class=\"number\">0</span>)   </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   Point3d::~Point3d(<span class=\"built_in\">origin</span>);</span><br><span class=\"line\">   _delete(<span class=\"built_in\">origin</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>new运算符实际上总是以标准的C malloc()完成，虽然并没有规定一定得这么做不可。相同情况，delete运算符总是以标准的C free()完成。</p>\n<h4 id=\"3-针对数组的new语意\"><a href=\"#3-针对数组的new语意\" class=\"headerlink\" title=\"3.针对数组的new语意\"></a>3.针对数组的new语意</h4><ul>\n<li>对于像<figure class=\"highlight plain\"><figcaption><span>*p_array </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 对于```simple_aggr *p_aggr = new simple_aggr[5];```,vec\\_new()也不会被调用，因为simple\\_aggr并没有定义一个constructor或destructor，所以配置数组以及清除p\\_aggr数组的操作，只是单纯地获得内存和释放内存而已，这些操作由new和delete运算符来完成就绰绰有余了。</span><br><span class=\"line\"></span><br><span class=\"line\">然而如果class定义有一个default constructo，某些版本的vec_new()就会被调用，配置并构 造class objects所组成的数组，如第一节中所示那样。  </span><br><span class=\"line\">* 寻找数组维度，对于delete运算符的效率带来极大的冲击，所以才导致这样的妥协：只有在中括号出现时，编译器才寻找数组的维度，否则它便假设只有单独一个objects要被删除。</span><br><span class=\"line\"></span><br><span class=\"line\">#### 4.Placement Operator new的语意</span><br><span class=\"line\">有一个预先定义好的重载的(overloaded) new运算符，称为placement operator new，它需要第二个参数，类型为void*，调用方式如下：</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>Point2w *ptw = new(arena) Point2w;<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其中arena指向内存中的一个区块，用以放置新产生出来的Point2w object。这个预先定义好的placement operator new的实现方法简直是出乎意料的平凡，它只要将“获得的指针”(上例为arena)所指的地址传回。</span><br><span class=\"line\">&gt; 用这个的意义是什么呢？</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 三、临时性对象</span><br><span class=\"line\">#### <span class=\"number\">1.</span>编译器什么时候产生临时性对象和摧毁临时性对象？</span><br><span class=\"line\">是否会导致一个临时性对象，视编译器的进取性以及程序上下语境而定。C\\+\\+ Standard允许编译器对于临时性对象的产生有完全的自由度。    </span><br><span class=\"line\">c\\+\\+标准指出，临时性对象的被摧毁，应该是对完整表达式求值过程中的最后一个步骤，该完整表达式造成临时性对象的产生。</span><br><span class=\"line\"></span><br><span class=\"line\">#### <span class=\"number\">2.</span>什么是完整表达式？</span><br><span class=\"line\">非正式地说，完整表达式是被涵括的表达式中最外围的那个。</span><br></pre></td></tr></table></figure></p>\n<p>((objA &gt; 1024) &amp;&amp; (objB &gt; 1024) ? objA + objB : foo(objA, objB));<br><code>`</code><br>对于上述表达式，一共有五个子算式，内带一个”? : 完整表达式”中。任何一个子表达式所产生的任何一个临时对象，都应该在完整表达式被求值完成后，才可以毁去。</p>\n<h4 id=\"3-关于临时性对象生命规则的的两个例外。\"><a href=\"#3-关于临时性对象生命规则的的两个例外。\" class=\"headerlink\" title=\"3.关于临时性对象生命规则的的两个例外。\"></a>3.关于临时性对象生命规则的的两个例外。</h4><p>临时性对象的生命规则有两个例外：</p>\n<ul>\n<li>第一个例外发生在表达式被用来初始化一个object时，C++ Standard要求说：凡含有表 达式执行结果的临时性对象，应该存留到object的初始化操作完成为止。</li>\n<li>临时性对象的生命规则的第二个例外是”当一个临时性对象被一个reference绑定”时。如果一个临时性对象被绑定于一个reference，对象将残留，直到被初始化之reference的生命结束，或直到临时对象的生命范畴(scope)结束——视哪一种情况先到达而定。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>本章的的主题是执行器语意学，查看执期的某些对象模型行为。包括零时性对象的生命及其死亡，以及对new运算符和delete预算符的支持。<br>","more":"</p>\n<h3 id=\"前述\"><a href=\"#前述\" class=\"headerlink\" title=\"前述\"></a>前述</h3><blockquote>\n<p>本章的的主题是执行器语意学，查看执期的某些对象模型行为。包括零时性对象的生命及其死亡，以及对new运算符和delete预算符的支持。</p>\n</blockquote>\n<hr>\n<p>参考书籍及链接：《深度探索c++对象模型》    </p>\n<hr>\n<h2 id=\"0、基础\"><a href=\"#0、基础\" class=\"headerlink\" title=\"0、基础\"></a>0、基础</h2><p>实际上，一个简单的操作，其背后所隐藏的意义都要经过编译器进行适当的解析，编译器所作的工作可能会超出我们的想象许多，编译器所做的这些填充操作最后都会在执行期一一执行，本章就是要看执行期所发生的转换。</p>\n<h2 id=\"一、对象的构造和析构\"><a href=\"#一、对象的构造和析构\" class=\"headerlink\" title=\"一、对象的构造和析构\"></a>一、对象的构造和析构</h2><h4 id=\"1-关于构造和析构\"><a href=\"#1-关于构造和析构\" class=\"headerlink\" title=\"1. 关于构造和析构\"></a>1. 关于构造和析构</h4><p>构造通常在object被定义之后，而destructor要放在每一个离开点之前。一般而言我们会把object尽可能放置在使用它的那个程序区段附近，这么做可以节省非必要的对象产生操作和摧毁操作。</p>\n<blockquote>\n<p>我们很多时候习惯把变量和object的定义放在函数的开始部分，这使得部分不必要的destructor不得不被调用，增加了部分开销。</p>\n</blockquote>\n<h4 id=\"2-全局对象\"><a href=\"#2-全局对象\" class=\"headerlink\" title=\"2. 全局对象\"></a>2. 全局对象</h4><p>C++ 保证，一定会在main()函数中第一次用到global object之前，把它构造出来，而在main() 函数结束之前把global object摧毁掉。global object如果有constructor和destructor的话， 我们说它需要静态的初始化操作和内存释放操作。<br>C++程序中所有的global objects都被放置在程序的data segment中。如果显式指定给它一个值， 此object 将以该值为初值。否则object配置到的内存内容为0。虽然class object在编译时期可以 被放置于data segment中并且内容为0，但constructor一直要到程序启动(startup)时才会实施。  </p>\n<h4 id=\"3-局部静态对象\"><a href=\"#3-局部静态对象\" class=\"headerlink\" title=\"3. 局部静态对象\"></a>3. 局部静态对象</h4><p>关于局部静态对象，注意两点：<br>（1）即使其所在的函数被调用多次，对应的constructor也只能执行一次。<br>（2）即使其所在的函数被调用多次，对应的deconstructor也只能执行一次。<br>为了能只执行一次对应的constructor，编译器引入一个临时性变量用于进行判断，初始时临时性变量为false，当local static object被构建好后，临时性变量变为true。而destructor则根据该 临时性是否为true决定是否析构local static object。</p>\n<h4 id=\"4-对象数组\"><a href=\"#4-对象数组\" class=\"headerlink\" title=\"4. 对象数组\"></a>4. 对象数组</h4><p>C++编译器之一cfront提供一个被命名为ve_new()函数，产生出以class objects构造而 成的数组。在vec_new()中，constructor施行于elem_count个元素之上;在vec_delete()中，destructor被施行于elem_count个元素身上。<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Point knots[<span class=\"number\">10</span>] = &#123;Point(),Point(<span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">0.5</span>),<span class=\"number\">-1.0</span>&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>对于上述这种明显获得初值的元素，vec_new()不再有必要。对于那些尚未被初始化的元素，vec_new()的施行方式就像面对“由class elements组成的数组，而该数组没有explicit initialization list”一样。类似下面这样：<br><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//明确初始化前3个元素</span></span><br><span class=\"line\"><span class=\"symbol\">Point:</span>:Point(<span class=\"variable\">&amp;knots</span>[<span class=\"number\">0</span>]);</span><br><span class=\"line\"><span class=\"symbol\">Point:</span>:Point(<span class=\"variable\">&amp;knots</span>[<span class=\"number\">1</span>], <span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">0.5</span>);</span><br><span class=\"line\"><span class=\"symbol\">Point:</span>:Point(<span class=\"variable\">&amp;knots</span>[<span class=\"number\">2</span>], <span class=\"number\">-1.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>);</span><br><span class=\"line\"><span class=\"comment\">//以vec_new初始化后7个元素</span></span><br><span class=\"line\">vec_new(<span class=\"variable\">&amp;knots</span> + <span class=\"number\">3</span>, sizeof(Point), <span class=\"number\">7</span>, &amp;<span class=\"symbol\">Point::</span>Point, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"二、new和delete运算符\"><a href=\"#二、new和delete运算符\" class=\"headerlink\" title=\"二、new和delete运算符\"></a>二、new和delete运算符</h2><h4 id=\"1-new和delete对内置类型的处理。\"><a href=\"#1-new和delete对内置类型的处理。\" class=\"headerlink\" title=\"1.new和delete对内置类型的处理。\"></a>1.new和delete对内置类型的处理。</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> *pi = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure>\n<p>对于如上的语句，实际分为如下两个步骤完成：<br>（1）通过适当的new运算符配置所需的内存。<br>（2）给配置得来的对象设立初值。<br><figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实际执行过程</span></span><br><span class=\"line\">int *<span class=\"literal\">pi</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">pi</span> = <span class=\"variable\">_new</span>(<span class=\"built_in\">sizeof</span>(int)))  *<span class=\"literal\">pi</span> = <span class=\"number\">5</span>; <span class=\"comment\">//成功了才初始化</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//delete运算符的情况类似</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"literal\">pi</span> != <span class=\"number\">0</span>)   <span class=\"variable\">_delete</span>(<span class=\"literal\">pi</span>);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-construct如何配置一个class-object？\"><a href=\"#2-construct如何配置一个class-object？\" class=\"headerlink\" title=\"2.construct如何配置一个class object？\"></a>2.construct如何配置一个class object？</h4><p>以constructor来配置一个class object，处理类似如下：<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Point3d *<span class=\"built_in\">origin</span> = <span class=\"built_in\">new</span> Point3d;</span><br><span class=\"line\">//被转换为：</span><br><span class=\"line\">Point3d *<span class=\"built_in\">origin</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">origin</span>  = _new(sizeof(Point3d)))  <span class=\"built_in\">origin</span> = Point3d::Point3d(<span class=\"built_in\">origin</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">//对于<span class=\"built_in\">delete</span> <span class=\"built_in\">origin</span>，转换结果类似于：</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">origin</span> != <span class=\"number\">0</span>)   </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   Point3d::~Point3d(<span class=\"built_in\">origin</span>);</span><br><span class=\"line\">   _delete(<span class=\"built_in\">origin</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>new运算符实际上总是以标准的C malloc()完成，虽然并没有规定一定得这么做不可。相同情况，delete运算符总是以标准的C free()完成。</p>\n<h4 id=\"3-针对数组的new语意\"><a href=\"#3-针对数组的new语意\" class=\"headerlink\" title=\"3.针对数组的new语意\"></a>3.针对数组的new语意</h4><ul>\n<li>对于像<figure class=\"highlight plain\"><figcaption><span>*p_array </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 对于```simple_aggr *p_aggr = new simple_aggr[5];```,vec\\_new()也不会被调用，因为simple\\_aggr并没有定义一个constructor或destructor，所以配置数组以及清除p\\_aggr数组的操作，只是单纯地获得内存和释放内存而已，这些操作由new和delete运算符来完成就绰绰有余了。</span><br><span class=\"line\"></span><br><span class=\"line\">然而如果class定义有一个default constructo，某些版本的vec_new()就会被调用，配置并构 造class objects所组成的数组，如第一节中所示那样。  </span><br><span class=\"line\">* 寻找数组维度，对于delete运算符的效率带来极大的冲击，所以才导致这样的妥协：只有在中括号出现时，编译器才寻找数组的维度，否则它便假设只有单独一个objects要被删除。</span><br><span class=\"line\"></span><br><span class=\"line\">#### 4.Placement Operator new的语意</span><br><span class=\"line\">有一个预先定义好的重载的(overloaded) new运算符，称为placement operator new，它需要第二个参数，类型为void*，调用方式如下：</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>Point2w *ptw = new(arena) Point2w;<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">其中arena指向内存中的一个区块，用以放置新产生出来的Point2w object。这个预先定义好的placement operator new的实现方法简直是出乎意料的平凡，它只要将“获得的指针”(上例为arena)所指的地址传回。</span><br><span class=\"line\">&gt; 用这个的意义是什么呢？</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 三、临时性对象</span><br><span class=\"line\">#### <span class=\"number\">1.</span>编译器什么时候产生临时性对象和摧毁临时性对象？</span><br><span class=\"line\">是否会导致一个临时性对象，视编译器的进取性以及程序上下语境而定。C\\+\\+ Standard允许编译器对于临时性对象的产生有完全的自由度。    </span><br><span class=\"line\">c\\+\\+标准指出，临时性对象的被摧毁，应该是对完整表达式求值过程中的最后一个步骤，该完整表达式造成临时性对象的产生。</span><br><span class=\"line\"></span><br><span class=\"line\">#### <span class=\"number\">2.</span>什么是完整表达式？</span><br><span class=\"line\">非正式地说，完整表达式是被涵括的表达式中最外围的那个。</span><br></pre></td></tr></table></figure></p>\n<p>((objA &gt; 1024) &amp;&amp; (objB &gt; 1024) ? objA + objB : foo(objA, objB));<br><code>`</code><br>对于上述表达式，一共有五个子算式，内带一个”? : 完整表达式”中。任何一个子表达式所产生的任何一个临时对象，都应该在完整表达式被求值完成后，才可以毁去。</p>\n<h4 id=\"3-关于临时性对象生命规则的的两个例外。\"><a href=\"#3-关于临时性对象生命规则的的两个例外。\" class=\"headerlink\" title=\"3.关于临时性对象生命规则的的两个例外。\"></a>3.关于临时性对象生命规则的的两个例外。</h4><p>临时性对象的生命规则有两个例外：</p>\n<ul>\n<li>第一个例外发生在表达式被用来初始化一个object时，C++ Standard要求说：凡含有表 达式执行结果的临时性对象，应该存留到object的初始化操作完成为止。</li>\n<li>临时性对象的生命规则的第二个例外是”当一个临时性对象被一个reference绑定”时。如果一个临时性对象被绑定于一个reference，对象将残留，直到被初始化之reference的生命结束，或直到临时对象的生命范畴(scope)结束——视哪一种情况先到达而定。</li>\n</ul>"},{"title":"《深度探索c++对象模型》（四）Function语意学","date":"2019-05-16T08:44:12.000Z","toc":true,"comments":1,"_content":"\nFunction是c\\+\\+中的又一大重要部分， 本章的的主题是Function语意学，主要是探究编译器对class中的static member function、nonstatic member function和virtual member function所做的处理，并用实际测试分析其使用对代码效率的影响。同时也会进一步探究“指向member function”的指针和Inline function的原理和效率。\n<!--more-->\n\n### 前述\n> Function是c\\+\\+中的又一大重要部分， 本章的的主题是Function语意学，主要是探究编译器对class中的static member function、nonstatic member function和virtual member function所做的处理，并用实际测试分析其使用对代码效率的影响。同时也会进一步探究“指向member function”的指针和Inline function的原理和效率。\n\n------------------------------------\n参考书籍及链接：《深度探索c\\+\\+对象模型》    \n\n------------------------------------\n## 一、Member function的各种调用方式\n#### 1. Nonstatic Member Function是怎么被调用的？\nC\\+\\+的设计准则之一就是：nonstatic member function至少必须和一般的nonmember function有相同的效率。     \n在c\\+\\+中，member function会被被编译器转化为nonmember function，然后执行期被调用，转化过程如下：\n* 1. 改写函数原型，以安插一个额外的参数(this指针)到member function中，用以提供一个存取管道，使class object得以将此函数调用。\n* 2. 将每一个“对nonstatic data member的存取操作”改为经由this指针来存取。\n* 3. 将member function重新写成一个外部函数。将函数名称经过“mangling”处理，使它在程序中称为独一无二的词汇。\n\n#### 2. 编译器为什么要进行名称处理（name mangling）？怎么处理？\n继承所带来的重复变量名、函数的重载等都需要编译器能唯一识别，这时候就需要就需要进行名称处理。一般而言，member的名称前面会加上class的名称，形成独一无二的命名，有时候member function的名称也需要加上参数类型等。    \n\n#### 3. Virtual Member Functions是如何被调用的？\n\n编译器内部会对virtual member function进行如下转换：\n```\nptr->f();   //f()为virtual member function\n\n（*ptr->vptr[1](ptr);//内部转化结果\n```\n* vptr表示编译器产生的指针，指向virtual table。  \n* 1 是virtual table slot的索引值，关联到normalize()函数。   \n* 第二个ptr表示this指针。  \n\n#### 4. Static Member Functions有什么特性？如何被调用的？\nstatic member functions的主要特性是它没有this指针。以下的次要特性统统根源于其主要特性：\n* 它不能够直接存取其class中的nonstatic members\n* 它不能够被声明为const、volatile或virtual\n* 它不需要经由class object才被调用，虽然大部分时候它是这样被调用的。    \n\n如果取一个static member function的地址，获得的将是其在内存中的位置，也就是其地址。由于static member function没有this指针，所以其地址的类型并不是一个“指向class member of function的指针”，而是一个“nonmember函数指针”。\n\n## 二、Virtual Member function\n#### 1. 什么是多态？\nC++中，多态表示以“一个public base class 的指针（或reference)，寻址出一个derived class object”。\n> runtime type identification(RTTI)\n\n#### 2. 为了能方便class指针在执行期找到对应的函数实例，就需要编译器决定是否需要给class添加额外信息，那么，到底何时才需要这份信息？\n答案是在必须支持某种形式之“执行期多态”的时候，要鉴定哪些classes展现多态特性，就需要额外的执行期信息。\n识别一个class是否支持多态，唯一适当的方法就是看看它是否有任何virtual function。只要class拥有一个virtual function，它就需要这份额外的执行期信息。\n\n#### 3. 什么样的额外信息是我们需要存储起来的？\n在实现上，编译器可以做到在每一个多态对象的class object身上增加两个members:     \n* 一个字符串或数字，表示class的类型\n* 一个指针，指向表格，表格中带有程序的virtual function的执行期地址。\n\n#### 4. 执行期如何找到对应的virtual function地址？\n执行期要做的，只是在特定的virtual table slot中激活virtual function。这些active virtual function包括：\n* 这一class所定义的函数实例。它会改写(overriding)一个可能存在的base class virtual function函数实例。\n* 继承自base class的函数实例。这是在derived class决定不改写virtual function时才会出现的情况\n* 一个pure\\_virtual\\_called()函数实例，它既可以扮演pure virtual function的空间保卫者角色，也可以当做执行期异常处理函数(有时候会用到)。  \n\n每一个virtual function都被指派一个固定的索引值，这个索引在整个继承体系中保持与特定的virtual function的关系。执行期通过vptr和对应的slot获得对应的virtual function地址并进行调用。\n\n\n> 在一个单一继承体系中，virtual function机制的行为十分良好，不但有效率而且很容易塑造出模型来。但是在多重继承和虚拟继承中，对virtual function的支持就没有那么美好了。\n\n#### 5. 多重继承下virtual function编译器需要做什么？\n当把一个从heap中配置而得的Derived对象的地址，指定给一个Base2指针时，编译器需要如下处理：\n```\nBase2 *pbase2 = new Derived;\n\n//编译器会做的处理\nDerived *tmp = new Derived;\nBase2 *pbase2 = tmp ? tmp + sizeof(Base1) : 0;//转移以支持第二个base class\n```\n当要删除pbase2所指的对象时，指针必须被再一次调整，以求再一次指向Derived对象的起始处(推测它还指向Derived对象)。然而上述的offset加法却不能够在编译时期直接设定，因为pbase2所指的真正对象只有在执行期才能确定。\n\n#### 6. 多重继承下virtual function带来的负担是什么？\n在多重继承之下，一个derived class内含n-1个额外的virtual tables，n表示其上一层base classes的个数(因此，单一继承将不会有额外的virtual tables)。     \n针对每一个virtual tables，Derived对象中有对应的vptr。vptrs将在constructor(s)中被设定初值。\n\n#### 7.Thunk技术是什么？用来做什么？ \noffset的大小，以及把offset加到this指针上头的那一小段**程序代码**，必须经由编译器在某个地方插入。较有效率的解决办法是利用所谓的thunk。所谓thunk是以小段assembly代码，用来：\n* (1) 以适当的offset值调整this指针\n* (2) 跳到virtual function去。\nThunk技术允许virtual table slot继续内含一个简单的指针，因此多重继承不需要任何空间上的额外负担。Slots中的地址可以直接指向virtual function，也可以指向一个相关的thunk(如果需要调整this指针的话)。\n\n#### 8.哪些情况，第二或后继的base class会影响对virtual functions的支持？\n有以下三种情况，第二或后继的base class会影响对virtual functions的支持。\n* 第一种情况是，通过一个\"指向第二个base class\"的指针，调用derived class virtual function。例如：\n```\nBase2 *ptr = new Derived;\n\n//调用Derived::~Derived\n//ptr指向Derived对象中的Base2 subobject；\n//为了能够正确执行，ptr必须调整指向Derived对象的起始处。\ndelete ptr;\n```\n* 第二种情况是第一种情况的变化，通过一个“指向derived class”的指针，调用第二个base class中一个继承而来的virtual function。例如：\n```\nDerived *pder = new Derived;\n\n//调用Base2::mumble()\n//在此情况下，derived class指针必须再次调整，以指向第二个base subobject。\npder->mumble();\n```\n* 第三种情况发生于一个语言扩充性质之下：允许一个virtual function的返回值类型有所变化，可能是base type，也可能是publicly derived type。\n```\nBase2 *pb = new Derived;\n\n//调用Derived * Derived::clone()\n//当进行pb1->clone()时，pb1会被调整指向Derived对象的起始地址\n//于是clone()的Derived版会被调用；\n//它会传回一个指针，指向一个新的Derived对象，该对象的地址在被指定给pb2之前\n//必须先经过调整，以指向Base2 subobject。\nBase2 *pb2 = pb->clone();\n```\n\n#### 9.虚拟继承下virtual functions呢？\n当一个virtual base class从另一个virtual base class派生而来，并且两者都支持virtual functions和nonstatic data members时，编译器对于virtual base class的支持简直就像进了迷宫一样。**不要在一个virtual base class中声明nonstatic data members**，否则你将距离复杂的深渊越来越近。\n\n## 三、函数的效率\nnonmemeber、static member或nonstatic member函数都被转换为完全相同形式，所以三者效率完全相同。      \n导入virtual function之后，class constructor将获得参数以设定virtual table指针。所以每多一层继承，就会多增加一个额外的vptr设定。\n> constructor的额外操作在多次调用的情况下可能会拖低效率，减少常用函数中的局部对象可以在一定程度上提高效率。\n\n## 四、指向Member Function的指针\n#### 1.指向nonstatic member function的指针是如何工作的？\n取一个nonstatic data member的地址，如果该函数是nonvirtual，得到的结果是它在内存中真正的地址。然而这个值也是不完全的。它也需要被绑定于某个class object的地址上，才能够通过它调用该函数。所有的nonstatic member functions都需要对象的地址(以参数this指出)。\n```\ndouble  ( Point::*pmf)(); //member function的指针名\npmf = &Point::y; //获得对应的member function地址\n(origin.*coord)(); //调用方式,origin是一个object,指针(ptr->*corrd)();\n(coord)(&origin); //编译器内部转化\n```\n\n#### 2.指向nonstatic member function的指针会带来负担吗？\n看情况，如果并不用于virtual function、多重继承、virtual base class等情况的话，并不会比使用一个“nonmember function指针”的成本高。\n但上述三种情况对于“member function指针”的类型以及调用都太过于复杂。\n\n#### 3.虚拟机制能在使用“指向member function的指针”的情况下运行吗？如果能，又是怎样实现的？\n对一个nonstatic member function取其地址，将获得该函数在内存中的地址。然而面对一个virtual function，其地址在编译时期是未知的，取其地址所能获得的只是其在virtual table中的索引值。\n```\n&Point::x();  //x()为非虚函数，得其内存地址 \n&Point::z();  //z()为虚函数，得其索引值\n\n(*ptr->vptr[(int)pmf])(ptr);//pmf指向virtual函数时的调用方式\n```\n为了使pmf能支持上述两种情况，编译器必须定义函数指针使它能够(1)含有两种数值,(2)更重要的是其数值可以被区别代表内存地址还是virtual table中的索引值。\n\n#### 4.在多重继承下，指向Member Functions的指针如何工作？\n为了让指向member functions的指针也能够支持多重继承和虚拟继承，Stroustrup设计了下面一个结构体：\n```\nstruct _mptr\n{\n    int delta; //delta字段表示this指针的offset值\n    int index; //virtual table索引,不用时设为-1\n    union{\n        protofunc faddr; //nonvirtual member function地址\n        int v_offset; //v_offset字段放的是一个virtual base class的vptr位置。\n    };\n};\n\n(ptr->*pmf)();//原始调用\n// 编译器转换\n(pmf.index < 0) ? ( *pmf.faddr )( ptr) : (* ptr->vptr[pmf.index](ptr));\n```\nMicrosoft就供应了三种风味，以减少不必要的字段：\n* 1. 一个单一继承实例(其中带有vcall thunk地址或是faddr)\n* 2. 一个多重继承实例(其中带有faddr和delta、vcall thunk地址)\n* 3. 一个虚拟继承实例(其中带有四个members)\n\n## 五、Inline Functions\n#### 1.Inline Function有什么优点？\n为了处理类内部数据，有时候会用friend function进行操作。然而如果我们将这些函数声明为inline，我们就可以保持直接存取members 的那种高效率，同时也能兼顾函数的封装性，此外，也不用再用friend。\n\n#### 2.Inline Function什么时候被展开？\n编译器会决定是否将Inline Functiong按照一个expression进行展开。处理一个inline函数，有两个阶段：\n* 1. 分析函数定义，以决定函数的“intrinsic inline ability”。“intrinsic” (本质的，固有的)一词在这里意指“与编译器相关”，如果函数因其复杂度，或因其建构问题，被判断不可成为inline，它会被转为一个static函数，并在“被编译模块”内产生对应的函数语义。\n* 2. 真正的inline函数扩展操作是在调用的那一点上。这会带来参数的求值操作(evaluation)以及临时性对象的管理。\n同样在扩展点上，编译器将决定这个调用是否“不可为inline”。\n\n\n#### 3.Inline Function如何处理形式参数？\n扩展Inline function时，每一个形式参数都会被对应的实际参数取代。如果实际参数是一个常量表达式，我们可以在替换之前先完成其求值操作；后继的inline替换，就可以把常量直接“绑”上去。如果既不是常量表达式，也不是带有副作用的表达式，那么就直接替换之。\n例如：\n```\ninline int bar(){\n    int minval;\n    int val1 = 1024;\n    int val2 = 2048;\n    \n    minval = min(val1, val2);  /*(1)*/ \n    minval = min(1024, 2048);  /*(2)*/\n    minval = min(foo(), bar() + 1); /*(3)*/\n    return minval;\n}\n```\n(1) 处形参无副作用，直接展开：``` minval = val1 < val2 ? val1 : val2; ```     \n(2) 处那一行直接拥抱常量：``` minval = 1024;  ```      \n(3) 处那一行则引发参数的副作用，它需要导入一个临时对象，以避免重复求值:\n```\nint t1;\nint t2;\nminval = (t1 = foo()), (t2 = bar() + 1),\n        t1 < t2 ? t1 : t2;\n```\n#### 4.Inline Function如何处理局部变量？\n一般而言，inline函数中的每一个局部变量都必须被放在函数调用的一个封闭区段中，拥有一个独一无二的名称。\n如果inline函数以单一表达式扩展多次，则每次扩展都需要自己的一组局部变量。如果inline函数以分离的多个式子被扩展多次，那么只需一组局部变量，就可以重复使用(译注：因为它们被放在一个封闭区段中，有自己的scope)\n```\nminval=min(val1,val2)+min(foo(),foo()+1);//这就是单一表达式，进行两次扩展，多出两组变量\n```\n\n#### 5.Inline Function的缺点。\n一个inline函数如果被调用太多次，会产生大量的扩展码，使程序大小暴涨。参数带有副作用或者以一个单一表达式做多重调用、或者其本身有多个局部变量，都会产生大量局部变量，当然，编译器有可能帮你处理，也可能不会。     \n> **对于既要安全又要效率的程序，inline函数提供了一个强有力的工具。然而，与non-inline函数比起来，他们需要更加小心地处理。**\n","source":"_posts/深度探索c++对象模型/《深度探索c++对象模型》（四）.md","raw":"---\ntitle: 《深度探索c++对象模型》（四）Function语意学\ndate: 2019-05-16 16:44:12\ntoc: true\ncomments: true\ntags:\n  - C++基础\ncategories:\n  - C++基础\n---\n\nFunction是c\\+\\+中的又一大重要部分， 本章的的主题是Function语意学，主要是探究编译器对class中的static member function、nonstatic member function和virtual member function所做的处理，并用实际测试分析其使用对代码效率的影响。同时也会进一步探究“指向member function”的指针和Inline function的原理和效率。\n<!--more-->\n\n### 前述\n> Function是c\\+\\+中的又一大重要部分， 本章的的主题是Function语意学，主要是探究编译器对class中的static member function、nonstatic member function和virtual member function所做的处理，并用实际测试分析其使用对代码效率的影响。同时也会进一步探究“指向member function”的指针和Inline function的原理和效率。\n\n------------------------------------\n参考书籍及链接：《深度探索c\\+\\+对象模型》    \n\n------------------------------------\n## 一、Member function的各种调用方式\n#### 1. Nonstatic Member Function是怎么被调用的？\nC\\+\\+的设计准则之一就是：nonstatic member function至少必须和一般的nonmember function有相同的效率。     \n在c\\+\\+中，member function会被被编译器转化为nonmember function，然后执行期被调用，转化过程如下：\n* 1. 改写函数原型，以安插一个额外的参数(this指针)到member function中，用以提供一个存取管道，使class object得以将此函数调用。\n* 2. 将每一个“对nonstatic data member的存取操作”改为经由this指针来存取。\n* 3. 将member function重新写成一个外部函数。将函数名称经过“mangling”处理，使它在程序中称为独一无二的词汇。\n\n#### 2. 编译器为什么要进行名称处理（name mangling）？怎么处理？\n继承所带来的重复变量名、函数的重载等都需要编译器能唯一识别，这时候就需要就需要进行名称处理。一般而言，member的名称前面会加上class的名称，形成独一无二的命名，有时候member function的名称也需要加上参数类型等。    \n\n#### 3. Virtual Member Functions是如何被调用的？\n\n编译器内部会对virtual member function进行如下转换：\n```\nptr->f();   //f()为virtual member function\n\n（*ptr->vptr[1](ptr);//内部转化结果\n```\n* vptr表示编译器产生的指针，指向virtual table。  \n* 1 是virtual table slot的索引值，关联到normalize()函数。   \n* 第二个ptr表示this指针。  \n\n#### 4. Static Member Functions有什么特性？如何被调用的？\nstatic member functions的主要特性是它没有this指针。以下的次要特性统统根源于其主要特性：\n* 它不能够直接存取其class中的nonstatic members\n* 它不能够被声明为const、volatile或virtual\n* 它不需要经由class object才被调用，虽然大部分时候它是这样被调用的。    \n\n如果取一个static member function的地址，获得的将是其在内存中的位置，也就是其地址。由于static member function没有this指针，所以其地址的类型并不是一个“指向class member of function的指针”，而是一个“nonmember函数指针”。\n\n## 二、Virtual Member function\n#### 1. 什么是多态？\nC++中，多态表示以“一个public base class 的指针（或reference)，寻址出一个derived class object”。\n> runtime type identification(RTTI)\n\n#### 2. 为了能方便class指针在执行期找到对应的函数实例，就需要编译器决定是否需要给class添加额外信息，那么，到底何时才需要这份信息？\n答案是在必须支持某种形式之“执行期多态”的时候，要鉴定哪些classes展现多态特性，就需要额外的执行期信息。\n识别一个class是否支持多态，唯一适当的方法就是看看它是否有任何virtual function。只要class拥有一个virtual function，它就需要这份额外的执行期信息。\n\n#### 3. 什么样的额外信息是我们需要存储起来的？\n在实现上，编译器可以做到在每一个多态对象的class object身上增加两个members:     \n* 一个字符串或数字，表示class的类型\n* 一个指针，指向表格，表格中带有程序的virtual function的执行期地址。\n\n#### 4. 执行期如何找到对应的virtual function地址？\n执行期要做的，只是在特定的virtual table slot中激活virtual function。这些active virtual function包括：\n* 这一class所定义的函数实例。它会改写(overriding)一个可能存在的base class virtual function函数实例。\n* 继承自base class的函数实例。这是在derived class决定不改写virtual function时才会出现的情况\n* 一个pure\\_virtual\\_called()函数实例，它既可以扮演pure virtual function的空间保卫者角色，也可以当做执行期异常处理函数(有时候会用到)。  \n\n每一个virtual function都被指派一个固定的索引值，这个索引在整个继承体系中保持与特定的virtual function的关系。执行期通过vptr和对应的slot获得对应的virtual function地址并进行调用。\n\n\n> 在一个单一继承体系中，virtual function机制的行为十分良好，不但有效率而且很容易塑造出模型来。但是在多重继承和虚拟继承中，对virtual function的支持就没有那么美好了。\n\n#### 5. 多重继承下virtual function编译器需要做什么？\n当把一个从heap中配置而得的Derived对象的地址，指定给一个Base2指针时，编译器需要如下处理：\n```\nBase2 *pbase2 = new Derived;\n\n//编译器会做的处理\nDerived *tmp = new Derived;\nBase2 *pbase2 = tmp ? tmp + sizeof(Base1) : 0;//转移以支持第二个base class\n```\n当要删除pbase2所指的对象时，指针必须被再一次调整，以求再一次指向Derived对象的起始处(推测它还指向Derived对象)。然而上述的offset加法却不能够在编译时期直接设定，因为pbase2所指的真正对象只有在执行期才能确定。\n\n#### 6. 多重继承下virtual function带来的负担是什么？\n在多重继承之下，一个derived class内含n-1个额外的virtual tables，n表示其上一层base classes的个数(因此，单一继承将不会有额外的virtual tables)。     \n针对每一个virtual tables，Derived对象中有对应的vptr。vptrs将在constructor(s)中被设定初值。\n\n#### 7.Thunk技术是什么？用来做什么？ \noffset的大小，以及把offset加到this指针上头的那一小段**程序代码**，必须经由编译器在某个地方插入。较有效率的解决办法是利用所谓的thunk。所谓thunk是以小段assembly代码，用来：\n* (1) 以适当的offset值调整this指针\n* (2) 跳到virtual function去。\nThunk技术允许virtual table slot继续内含一个简单的指针，因此多重继承不需要任何空间上的额外负担。Slots中的地址可以直接指向virtual function，也可以指向一个相关的thunk(如果需要调整this指针的话)。\n\n#### 8.哪些情况，第二或后继的base class会影响对virtual functions的支持？\n有以下三种情况，第二或后继的base class会影响对virtual functions的支持。\n* 第一种情况是，通过一个\"指向第二个base class\"的指针，调用derived class virtual function。例如：\n```\nBase2 *ptr = new Derived;\n\n//调用Derived::~Derived\n//ptr指向Derived对象中的Base2 subobject；\n//为了能够正确执行，ptr必须调整指向Derived对象的起始处。\ndelete ptr;\n```\n* 第二种情况是第一种情况的变化，通过一个“指向derived class”的指针，调用第二个base class中一个继承而来的virtual function。例如：\n```\nDerived *pder = new Derived;\n\n//调用Base2::mumble()\n//在此情况下，derived class指针必须再次调整，以指向第二个base subobject。\npder->mumble();\n```\n* 第三种情况发生于一个语言扩充性质之下：允许一个virtual function的返回值类型有所变化，可能是base type，也可能是publicly derived type。\n```\nBase2 *pb = new Derived;\n\n//调用Derived * Derived::clone()\n//当进行pb1->clone()时，pb1会被调整指向Derived对象的起始地址\n//于是clone()的Derived版会被调用；\n//它会传回一个指针，指向一个新的Derived对象，该对象的地址在被指定给pb2之前\n//必须先经过调整，以指向Base2 subobject。\nBase2 *pb2 = pb->clone();\n```\n\n#### 9.虚拟继承下virtual functions呢？\n当一个virtual base class从另一个virtual base class派生而来，并且两者都支持virtual functions和nonstatic data members时，编译器对于virtual base class的支持简直就像进了迷宫一样。**不要在一个virtual base class中声明nonstatic data members**，否则你将距离复杂的深渊越来越近。\n\n## 三、函数的效率\nnonmemeber、static member或nonstatic member函数都被转换为完全相同形式，所以三者效率完全相同。      \n导入virtual function之后，class constructor将获得参数以设定virtual table指针。所以每多一层继承，就会多增加一个额外的vptr设定。\n> constructor的额外操作在多次调用的情况下可能会拖低效率，减少常用函数中的局部对象可以在一定程度上提高效率。\n\n## 四、指向Member Function的指针\n#### 1.指向nonstatic member function的指针是如何工作的？\n取一个nonstatic data member的地址，如果该函数是nonvirtual，得到的结果是它在内存中真正的地址。然而这个值也是不完全的。它也需要被绑定于某个class object的地址上，才能够通过它调用该函数。所有的nonstatic member functions都需要对象的地址(以参数this指出)。\n```\ndouble  ( Point::*pmf)(); //member function的指针名\npmf = &Point::y; //获得对应的member function地址\n(origin.*coord)(); //调用方式,origin是一个object,指针(ptr->*corrd)();\n(coord)(&origin); //编译器内部转化\n```\n\n#### 2.指向nonstatic member function的指针会带来负担吗？\n看情况，如果并不用于virtual function、多重继承、virtual base class等情况的话，并不会比使用一个“nonmember function指针”的成本高。\n但上述三种情况对于“member function指针”的类型以及调用都太过于复杂。\n\n#### 3.虚拟机制能在使用“指向member function的指针”的情况下运行吗？如果能，又是怎样实现的？\n对一个nonstatic member function取其地址，将获得该函数在内存中的地址。然而面对一个virtual function，其地址在编译时期是未知的，取其地址所能获得的只是其在virtual table中的索引值。\n```\n&Point::x();  //x()为非虚函数，得其内存地址 \n&Point::z();  //z()为虚函数，得其索引值\n\n(*ptr->vptr[(int)pmf])(ptr);//pmf指向virtual函数时的调用方式\n```\n为了使pmf能支持上述两种情况，编译器必须定义函数指针使它能够(1)含有两种数值,(2)更重要的是其数值可以被区别代表内存地址还是virtual table中的索引值。\n\n#### 4.在多重继承下，指向Member Functions的指针如何工作？\n为了让指向member functions的指针也能够支持多重继承和虚拟继承，Stroustrup设计了下面一个结构体：\n```\nstruct _mptr\n{\n    int delta; //delta字段表示this指针的offset值\n    int index; //virtual table索引,不用时设为-1\n    union{\n        protofunc faddr; //nonvirtual member function地址\n        int v_offset; //v_offset字段放的是一个virtual base class的vptr位置。\n    };\n};\n\n(ptr->*pmf)();//原始调用\n// 编译器转换\n(pmf.index < 0) ? ( *pmf.faddr )( ptr) : (* ptr->vptr[pmf.index](ptr));\n```\nMicrosoft就供应了三种风味，以减少不必要的字段：\n* 1. 一个单一继承实例(其中带有vcall thunk地址或是faddr)\n* 2. 一个多重继承实例(其中带有faddr和delta、vcall thunk地址)\n* 3. 一个虚拟继承实例(其中带有四个members)\n\n## 五、Inline Functions\n#### 1.Inline Function有什么优点？\n为了处理类内部数据，有时候会用friend function进行操作。然而如果我们将这些函数声明为inline，我们就可以保持直接存取members 的那种高效率，同时也能兼顾函数的封装性，此外，也不用再用friend。\n\n#### 2.Inline Function什么时候被展开？\n编译器会决定是否将Inline Functiong按照一个expression进行展开。处理一个inline函数，有两个阶段：\n* 1. 分析函数定义，以决定函数的“intrinsic inline ability”。“intrinsic” (本质的，固有的)一词在这里意指“与编译器相关”，如果函数因其复杂度，或因其建构问题，被判断不可成为inline，它会被转为一个static函数，并在“被编译模块”内产生对应的函数语义。\n* 2. 真正的inline函数扩展操作是在调用的那一点上。这会带来参数的求值操作(evaluation)以及临时性对象的管理。\n同样在扩展点上，编译器将决定这个调用是否“不可为inline”。\n\n\n#### 3.Inline Function如何处理形式参数？\n扩展Inline function时，每一个形式参数都会被对应的实际参数取代。如果实际参数是一个常量表达式，我们可以在替换之前先完成其求值操作；后继的inline替换，就可以把常量直接“绑”上去。如果既不是常量表达式，也不是带有副作用的表达式，那么就直接替换之。\n例如：\n```\ninline int bar(){\n    int minval;\n    int val1 = 1024;\n    int val2 = 2048;\n    \n    minval = min(val1, val2);  /*(1)*/ \n    minval = min(1024, 2048);  /*(2)*/\n    minval = min(foo(), bar() + 1); /*(3)*/\n    return minval;\n}\n```\n(1) 处形参无副作用，直接展开：``` minval = val1 < val2 ? val1 : val2; ```     \n(2) 处那一行直接拥抱常量：``` minval = 1024;  ```      \n(3) 处那一行则引发参数的副作用，它需要导入一个临时对象，以避免重复求值:\n```\nint t1;\nint t2;\nminval = (t1 = foo()), (t2 = bar() + 1),\n        t1 < t2 ? t1 : t2;\n```\n#### 4.Inline Function如何处理局部变量？\n一般而言，inline函数中的每一个局部变量都必须被放在函数调用的一个封闭区段中，拥有一个独一无二的名称。\n如果inline函数以单一表达式扩展多次，则每次扩展都需要自己的一组局部变量。如果inline函数以分离的多个式子被扩展多次，那么只需一组局部变量，就可以重复使用(译注：因为它们被放在一个封闭区段中，有自己的scope)\n```\nminval=min(val1,val2)+min(foo(),foo()+1);//这就是单一表达式，进行两次扩展，多出两组变量\n```\n\n#### 5.Inline Function的缺点。\n一个inline函数如果被调用太多次，会产生大量的扩展码，使程序大小暴涨。参数带有副作用或者以一个单一表达式做多重调用、或者其本身有多个局部变量，都会产生大量局部变量，当然，编译器有可能帮你处理，也可能不会。     \n> **对于既要安全又要效率的程序，inline函数提供了一个强有力的工具。然而，与non-inline函数比起来，他们需要更加小心地处理。**\n","slug":"深度探索c++对象模型/《深度探索c++对象模型》（四）","published":1,"updated":"2019-05-16T09:33:51.139Z","_id":"cjvqga0ql000e79jx29yeaosu","layout":"post","photos":[],"link":"","content":"<p>Function是c++中的又一大重要部分， 本章的的主题是Function语意学，主要是探究编译器对class中的static member function、nonstatic member function和virtual member function所做的处理，并用实际测试分析其使用对代码效率的影响。同时也会进一步探究“指向member function”的指针和Inline function的原理和效率。<br><a id=\"more\"></a></p>\n<h3 id=\"前述\"><a href=\"#前述\" class=\"headerlink\" title=\"前述\"></a>前述</h3><blockquote>\n<p>Function是c++中的又一大重要部分， 本章的的主题是Function语意学，主要是探究编译器对class中的static member function、nonstatic member function和virtual member function所做的处理，并用实际测试分析其使用对代码效率的影响。同时也会进一步探究“指向member function”的指针和Inline function的原理和效率。</p>\n</blockquote>\n<hr>\n<p>参考书籍及链接：《深度探索c++对象模型》    </p>\n<hr>\n<h2 id=\"一、Member-function的各种调用方式\"><a href=\"#一、Member-function的各种调用方式\" class=\"headerlink\" title=\"一、Member function的各种调用方式\"></a>一、Member function的各种调用方式</h2><h4 id=\"1-Nonstatic-Member-Function是怎么被调用的？\"><a href=\"#1-Nonstatic-Member-Function是怎么被调用的？\" class=\"headerlink\" title=\"1. Nonstatic Member Function是怎么被调用的？\"></a>1. Nonstatic Member Function是怎么被调用的？</h4><p>C++的设计准则之一就是：nonstatic member function至少必须和一般的nonmember function有相同的效率。<br>在c++中，member function会被被编译器转化为nonmember function，然后执行期被调用，转化过程如下：</p>\n<ul>\n<li><ol>\n<li>改写函数原型，以安插一个额外的参数(this指针)到member function中，用以提供一个存取管道，使class object得以将此函数调用。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>将每一个“对nonstatic data member的存取操作”改为经由this指针来存取。</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>将member function重新写成一个外部函数。将函数名称经过“mangling”处理，使它在程序中称为独一无二的词汇。</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"2-编译器为什么要进行名称处理（name-mangling）？怎么处理？\"><a href=\"#2-编译器为什么要进行名称处理（name-mangling）？怎么处理？\" class=\"headerlink\" title=\"2. 编译器为什么要进行名称处理（name mangling）？怎么处理？\"></a>2. 编译器为什么要进行名称处理（name mangling）？怎么处理？</h4><p>继承所带来的重复变量名、函数的重载等都需要编译器能唯一识别，这时候就需要就需要进行名称处理。一般而言，member的名称前面会加上class的名称，形成独一无二的命名，有时候member function的名称也需要加上参数类型等。    </p>\n<h4 id=\"3-Virtual-Member-Functions是如何被调用的？\"><a href=\"#3-Virtual-Member-Functions是如何被调用的？\" class=\"headerlink\" title=\"3. Virtual Member Functions是如何被调用的？\"></a>3. Virtual Member Functions是如何被调用的？</h4><p>编译器内部会对virtual member function进行如下转换：<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ptr-&gt;f();   //f()为virtual member function</span><br><span class=\"line\"></span><br><span class=\"line\">（*ptr-&gt;vptr[<span class=\"string\">1</span>](<span class=\"link\">ptr</span>);//内部转化结果</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>vptr表示编译器产生的指针，指向virtual table。  </li>\n<li>1 是virtual table slot的索引值，关联到normalize()函数。   </li>\n<li>第二个ptr表示this指针。  </li>\n</ul>\n<h4 id=\"4-Static-Member-Functions有什么特性？如何被调用的？\"><a href=\"#4-Static-Member-Functions有什么特性？如何被调用的？\" class=\"headerlink\" title=\"4. Static Member Functions有什么特性？如何被调用的？\"></a>4. Static Member Functions有什么特性？如何被调用的？</h4><p>static member functions的主要特性是它没有this指针。以下的次要特性统统根源于其主要特性：</p>\n<ul>\n<li>它不能够直接存取其class中的nonstatic members</li>\n<li>它不能够被声明为const、volatile或virtual</li>\n<li>它不需要经由class object才被调用，虽然大部分时候它是这样被调用的。    </li>\n</ul>\n<p>如果取一个static member function的地址，获得的将是其在内存中的位置，也就是其地址。由于static member function没有this指针，所以其地址的类型并不是一个“指向class member of function的指针”，而是一个“nonmember函数指针”。</p>\n<h2 id=\"二、Virtual-Member-function\"><a href=\"#二、Virtual-Member-function\" class=\"headerlink\" title=\"二、Virtual Member function\"></a>二、Virtual Member function</h2><h4 id=\"1-什么是多态？\"><a href=\"#1-什么是多态？\" class=\"headerlink\" title=\"1. 什么是多态？\"></a>1. 什么是多态？</h4><p>C++中，多态表示以“一个public base class 的指针（或reference)，寻址出一个derived class object”。</p>\n<blockquote>\n<p>runtime type identification(RTTI)</p>\n</blockquote>\n<h4 id=\"2-为了能方便class指针在执行期找到对应的函数实例，就需要编译器决定是否需要给class添加额外信息，那么，到底何时才需要这份信息？\"><a href=\"#2-为了能方便class指针在执行期找到对应的函数实例，就需要编译器决定是否需要给class添加额外信息，那么，到底何时才需要这份信息？\" class=\"headerlink\" title=\"2. 为了能方便class指针在执行期找到对应的函数实例，就需要编译器决定是否需要给class添加额外信息，那么，到底何时才需要这份信息？\"></a>2. 为了能方便class指针在执行期找到对应的函数实例，就需要编译器决定是否需要给class添加额外信息，那么，到底何时才需要这份信息？</h4><p>答案是在必须支持某种形式之“执行期多态”的时候，要鉴定哪些classes展现多态特性，就需要额外的执行期信息。<br>识别一个class是否支持多态，唯一适当的方法就是看看它是否有任何virtual function。只要class拥有一个virtual function，它就需要这份额外的执行期信息。</p>\n<h4 id=\"3-什么样的额外信息是我们需要存储起来的？\"><a href=\"#3-什么样的额外信息是我们需要存储起来的？\" class=\"headerlink\" title=\"3. 什么样的额外信息是我们需要存储起来的？\"></a>3. 什么样的额外信息是我们需要存储起来的？</h4><p>在实现上，编译器可以做到在每一个多态对象的class object身上增加两个members:     </p>\n<ul>\n<li>一个字符串或数字，表示class的类型</li>\n<li>一个指针，指向表格，表格中带有程序的virtual function的执行期地址。</li>\n</ul>\n<h4 id=\"4-执行期如何找到对应的virtual-function地址？\"><a href=\"#4-执行期如何找到对应的virtual-function地址？\" class=\"headerlink\" title=\"4. 执行期如何找到对应的virtual function地址？\"></a>4. 执行期如何找到对应的virtual function地址？</h4><p>执行期要做的，只是在特定的virtual table slot中激活virtual function。这些active virtual function包括：</p>\n<ul>\n<li>这一class所定义的函数实例。它会改写(overriding)一个可能存在的base class virtual function函数实例。</li>\n<li>继承自base class的函数实例。这是在derived class决定不改写virtual function时才会出现的情况</li>\n<li>一个pure_virtual_called()函数实例，它既可以扮演pure virtual function的空间保卫者角色，也可以当做执行期异常处理函数(有时候会用到)。  </li>\n</ul>\n<p>每一个virtual function都被指派一个固定的索引值，这个索引在整个继承体系中保持与特定的virtual function的关系。执行期通过vptr和对应的slot获得对应的virtual function地址并进行调用。</p>\n<blockquote>\n<p>在一个单一继承体系中，virtual function机制的行为十分良好，不但有效率而且很容易塑造出模型来。但是在多重继承和虚拟继承中，对virtual function的支持就没有那么美好了。</p>\n</blockquote>\n<h4 id=\"5-多重继承下virtual-function编译器需要做什么？\"><a href=\"#5-多重继承下virtual-function编译器需要做什么？\" class=\"headerlink\" title=\"5. 多重继承下virtual function编译器需要做什么？\"></a>5. 多重继承下virtual function编译器需要做什么？</h4><p>当把一个从heap中配置而得的Derived对象的地址，指定给一个Base2指针时，编译器需要如下处理：<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Base2 *pbase2 = <span class=\"keyword\">new</span> <span class=\"type\">Derived</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//编译器会做的处理</span></span><br><span class=\"line\">Derived *tmp = <span class=\"keyword\">new</span> <span class=\"type\">Derived</span>;</span><br><span class=\"line\">Base2 *pbase2 = tmp ? tmp + sizeof(Base1) : <span class=\"type\">0</span>;<span class=\"comment\">//转移以支持第二个base class</span></span><br></pre></td></tr></table></figure></p>\n<p>当要删除pbase2所指的对象时，指针必须被再一次调整，以求再一次指向Derived对象的起始处(推测它还指向Derived对象)。然而上述的offset加法却不能够在编译时期直接设定，因为pbase2所指的真正对象只有在执行期才能确定。</p>\n<h4 id=\"6-多重继承下virtual-function带来的负担是什么？\"><a href=\"#6-多重继承下virtual-function带来的负担是什么？\" class=\"headerlink\" title=\"6. 多重继承下virtual function带来的负担是什么？\"></a>6. 多重继承下virtual function带来的负担是什么？</h4><p>在多重继承之下，一个derived class内含n-1个额外的virtual tables，n表示其上一层base classes的个数(因此，单一继承将不会有额外的virtual tables)。<br>针对每一个virtual tables，Derived对象中有对应的vptr。vptrs将在constructor(s)中被设定初值。</p>\n<h4 id=\"7-Thunk技术是什么？用来做什么？\"><a href=\"#7-Thunk技术是什么？用来做什么？\" class=\"headerlink\" title=\"7.Thunk技术是什么？用来做什么？\"></a>7.Thunk技术是什么？用来做什么？</h4><p>offset的大小，以及把offset加到this指针上头的那一小段<strong>程序代码</strong>，必须经由编译器在某个地方插入。较有效率的解决办法是利用所谓的thunk。所谓thunk是以小段assembly代码，用来：</p>\n<ul>\n<li>(1) 以适当的offset值调整this指针</li>\n<li>(2) 跳到virtual function去。<br>Thunk技术允许virtual table slot继续内含一个简单的指针，因此多重继承不需要任何空间上的额外负担。Slots中的地址可以直接指向virtual function，也可以指向一个相关的thunk(如果需要调整this指针的话)。</li>\n</ul>\n<h4 id=\"8-哪些情况，第二或后继的base-class会影响对virtual-functions的支持？\"><a href=\"#8-哪些情况，第二或后继的base-class会影响对virtual-functions的支持？\" class=\"headerlink\" title=\"8.哪些情况，第二或后继的base class会影响对virtual functions的支持？\"></a>8.哪些情况，第二或后继的base class会影响对virtual functions的支持？</h4><p>有以下三种情况，第二或后继的base class会影响对virtual functions的支持。</p>\n<ul>\n<li><p>第一种情况是，通过一个”指向第二个base class”的指针，调用derived class virtual function。例如：</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Base2 *ptr = <span class=\"keyword\">new</span> Derived;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用Derived::~Derived</span></span><br><span class=\"line\"><span class=\"comment\">//ptr指向Derived对象中的Base2 subobject；</span></span><br><span class=\"line\"><span class=\"comment\">//为了能够正确执行，ptr必须调整指向Derived对象的起始处。</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> ptr;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第二种情况是第一种情况的变化，通过一个“指向derived class”的指针，调用第二个base class中一个继承而来的virtual function。例如：</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Derived *pder = <span class=\"keyword\">new</span> <span class=\"type\">Derived</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用Base2::mumble()</span></span><br><span class=\"line\"><span class=\"comment\">//在此情况下，derived class指针必须再次调整，以指向第二个base subobject。</span></span><br><span class=\"line\">pder-&gt;mumble();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第三种情况发生于一个语言扩充性质之下：允许一个virtual function的返回值类型有所变化，可能是base type，也可能是publicly derived type。</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Base2 *pb = <span class=\"keyword\">new</span> <span class=\"type\">Derived</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用Derived * Derived::clone()</span></span><br><span class=\"line\"><span class=\"comment\">//当进行pb1-&gt;clone()时，pb1会被调整指向Derived对象的起始地址</span></span><br><span class=\"line\"><span class=\"comment\">//于是clone()的Derived版会被调用；</span></span><br><span class=\"line\"><span class=\"comment\">//它会传回一个指针，指向一个新的Derived对象，该对象的地址在被指定给pb2之前</span></span><br><span class=\"line\"><span class=\"comment\">//必须先经过调整，以指向Base2 subobject。</span></span><br><span class=\"line\">Base2 *pb2 = pb-&gt;clone();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"9-虚拟继承下virtual-functions呢？\"><a href=\"#9-虚拟继承下virtual-functions呢？\" class=\"headerlink\" title=\"9.虚拟继承下virtual functions呢？\"></a>9.虚拟继承下virtual functions呢？</h4><p>当一个virtual base class从另一个virtual base class派生而来，并且两者都支持virtual functions和nonstatic data members时，编译器对于virtual base class的支持简直就像进了迷宫一样。<strong>不要在一个virtual base class中声明nonstatic data members</strong>，否则你将距离复杂的深渊越来越近。</p>\n<h2 id=\"三、函数的效率\"><a href=\"#三、函数的效率\" class=\"headerlink\" title=\"三、函数的效率\"></a>三、函数的效率</h2><p>nonmemeber、static member或nonstatic member函数都被转换为完全相同形式，所以三者效率完全相同。<br>导入virtual function之后，class constructor将获得参数以设定virtual table指针。所以每多一层继承，就会多增加一个额外的vptr设定。</p>\n<blockquote>\n<p>constructor的额外操作在多次调用的情况下可能会拖低效率，减少常用函数中的局部对象可以在一定程度上提高效率。</p>\n</blockquote>\n<h2 id=\"四、指向Member-Function的指针\"><a href=\"#四、指向Member-Function的指针\" class=\"headerlink\" title=\"四、指向Member Function的指针\"></a>四、指向Member Function的指针</h2><h4 id=\"1-指向nonstatic-member-function的指针是如何工作的？\"><a href=\"#1-指向nonstatic-member-function的指针是如何工作的？\" class=\"headerlink\" title=\"1.指向nonstatic member function的指针是如何工作的？\"></a>1.指向nonstatic member function的指针是如何工作的？</h4><p>取一个nonstatic data member的地址，如果该函数是nonvirtual，得到的结果是它在内存中真正的地址。然而这个值也是不完全的。它也需要被绑定于某个class object的地址上，才能够通过它调用该函数。所有的nonstatic member functions都需要对象的地址(以参数this指出)。<br><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">double  ( <span class=\"symbol\">Point::</span>*pmf)(); <span class=\"comment\">//member function的指针名</span></span><br><span class=\"line\">pmf = &amp;<span class=\"symbol\">Point::</span>y; <span class=\"comment\">//获得对应的member function地址</span></span><br><span class=\"line\">(origin.*coord)(); <span class=\"comment\">//调用方式,origin是一个object,指针(ptr-&gt;*corrd)();</span></span><br><span class=\"line\">(coord)(<span class=\"variable\">&amp;origin</span>); <span class=\"comment\">//编译器内部转化</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-指向nonstatic-member-function的指针会带来负担吗？\"><a href=\"#2-指向nonstatic-member-function的指针会带来负担吗？\" class=\"headerlink\" title=\"2.指向nonstatic member function的指针会带来负担吗？\"></a>2.指向nonstatic member function的指针会带来负担吗？</h4><p>看情况，如果并不用于virtual function、多重继承、virtual base class等情况的话，并不会比使用一个“nonmember function指针”的成本高。<br>但上述三种情况对于“member function指针”的类型以及调用都太过于复杂。</p>\n<h4 id=\"3-虚拟机制能在使用“指向member-function的指针”的情况下运行吗？如果能，又是怎样实现的？\"><a href=\"#3-虚拟机制能在使用“指向member-function的指针”的情况下运行吗？如果能，又是怎样实现的？\" class=\"headerlink\" title=\"3.虚拟机制能在使用“指向member function的指针”的情况下运行吗？如果能，又是怎样实现的？\"></a>3.虚拟机制能在使用“指向member function的指针”的情况下运行吗？如果能，又是怎样实现的？</h4><p>对一个nonstatic member function取其地址，将获得该函数在内存中的地址。然而面对一个virtual function，其地址在编译时期是未知的，取其地址所能获得的只是其在virtual table中的索引值。<br><figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;Point::x();  <span class=\"comment\">//x()为非虚函数，得其内存地址 </span></span><br><span class=\"line\">&amp;Point::z();  <span class=\"comment\">//z()为虚函数，得其索引值</span></span><br><span class=\"line\"></span><br><span class=\"line\">(*ptr-&gt;vptr[(<span class=\"keyword\">int</span>)pmf])(ptr);<span class=\"comment\">//pmf指向virtual函数时的调用方式</span></span><br></pre></td></tr></table></figure></p>\n<p>为了使pmf能支持上述两种情况，编译器必须定义函数指针使它能够(1)含有两种数值,(2)更重要的是其数值可以被区别代表内存地址还是virtual table中的索引值。</p>\n<h4 id=\"4-在多重继承下，指向Member-Functions的指针如何工作？\"><a href=\"#4-在多重继承下，指向Member-Functions的指针如何工作？\" class=\"headerlink\" title=\"4.在多重继承下，指向Member Functions的指针如何工作？\"></a>4.在多重继承下，指向Member Functions的指针如何工作？</h4><p>为了让指向member functions的指针也能够支持多重继承和虚拟继承，Stroustrup设计了下面一个结构体：<br><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">_mptr</span></span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int delta; <span class=\"regexp\">//delta</span>字段表示this指针的offset值</span><br><span class=\"line\">    int index; <span class=\"regexp\">//virtual</span> table索引,不用时设为-<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">union</span>&#123;</span></span><br><span class=\"line\">        protofunc faddr; <span class=\"regexp\">//nonvirtual</span> member function地址</span><br><span class=\"line\">        int v_offset; <span class=\"regexp\">//v</span>_offset字段放的是一个virtual base <span class=\"class\"><span class=\"keyword\">class</span>的<span class=\"title\">vptr</span>位置。</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">(ptr-&gt;*pmf)();<span class=\"regexp\">//</span>原始调用</span><br><span class=\"line\">/<span class=\"regexp\">/ 编译器转换</span></span><br><span class=\"line\"><span class=\"regexp\">(pmf.index &lt; 0) ? ( *pmf.faddr )( ptr) : (* ptr-&gt;vptr[pmf.index](ptr));</span></span><br></pre></td></tr></table></figure></p>\n<p>Microsoft就供应了三种风味，以减少不必要的字段：</p>\n<ul>\n<li><ol>\n<li>一个单一继承实例(其中带有vcall thunk地址或是faddr)</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>一个多重继承实例(其中带有faddr和delta、vcall thunk地址)</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>一个虚拟继承实例(其中带有四个members)</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"五、Inline-Functions\"><a href=\"#五、Inline-Functions\" class=\"headerlink\" title=\"五、Inline Functions\"></a>五、Inline Functions</h2><h4 id=\"1-Inline-Function有什么优点？\"><a href=\"#1-Inline-Function有什么优点？\" class=\"headerlink\" title=\"1.Inline Function有什么优点？\"></a>1.Inline Function有什么优点？</h4><p>为了处理类内部数据，有时候会用friend function进行操作。然而如果我们将这些函数声明为inline，我们就可以保持直接存取members 的那种高效率，同时也能兼顾函数的封装性，此外，也不用再用friend。</p>\n<h4 id=\"2-Inline-Function什么时候被展开？\"><a href=\"#2-Inline-Function什么时候被展开？\" class=\"headerlink\" title=\"2.Inline Function什么时候被展开？\"></a>2.Inline Function什么时候被展开？</h4><p>编译器会决定是否将Inline Functiong按照一个expression进行展开。处理一个inline函数，有两个阶段：</p>\n<ul>\n<li><ol>\n<li>分析函数定义，以决定函数的“intrinsic inline ability”。“intrinsic” (本质的，固有的)一词在这里意指“与编译器相关”，如果函数因其复杂度，或因其建构问题，被判断不可成为inline，它会被转为一个static函数，并在“被编译模块”内产生对应的函数语义。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>真正的inline函数扩展操作是在调用的那一点上。这会带来参数的求值操作(evaluation)以及临时性对象的管理。<br>同样在扩展点上，编译器将决定这个调用是否“不可为inline”。</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"3-Inline-Function如何处理形式参数？\"><a href=\"#3-Inline-Function如何处理形式参数？\" class=\"headerlink\" title=\"3.Inline Function如何处理形式参数？\"></a>3.Inline Function如何处理形式参数？</h4><p>扩展Inline function时，每一个形式参数都会被对应的实际参数取代。如果实际参数是一个常量表达式，我们可以在替换之前先完成其求值操作；后继的inline替换，就可以把常量直接“绑”上去。如果既不是常量表达式，也不是带有副作用的表达式，那么就直接替换之。<br>例如：<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> bar()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> minval;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val1 = <span class=\"number\">1024</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val2 = <span class=\"number\">2048</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    minval = <span class=\"built_in\">min</span>(val1, val2);  <span class=\"comment\">/*(1)*/</span> </span><br><span class=\"line\">    minval = <span class=\"built_in\">min</span>(<span class=\"number\">1024</span>, <span class=\"number\">2048</span>);  <span class=\"comment\">/*(2)*/</span></span><br><span class=\"line\">    minval = <span class=\"built_in\">min</span>(foo(), bar() + <span class=\"number\">1</span>); <span class=\"comment\">/*(3)*/</span></span><br><span class=\"line\">    <span class=\"built_in\">return</span> minval;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>(1) 处形参无副作用，直接展开：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(2) 处那一行直接拥抱常量：``` minval = 1024;  ```      </span><br><span class=\"line\">(3) 处那一行则引发参数的副作用，它需要导入一个临时对象，以避免重复求值:</span><br></pre></td></tr></table></figure></p>\n<p>int t1;<br>int t2;<br>minval = (t1 = foo()), (t2 = bar() + 1),<br>        t1 &lt; t2 ? t1 : t2;<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#### <span class=\"number\">4.</span>Inline Function如何处理局部变量？</span><br><span class=\"line\">一般而言，<span class=\"keyword\">inline</span>函数中的每一个局部变量都必须被放在函数调用的一个封闭区段中，拥有一个独一无二的名称。</span><br><span class=\"line\">如果<span class=\"keyword\">inline</span>函数以单一表达式扩展多次，则每次扩展都需要自己的一组局部变量。如果<span class=\"keyword\">inline</span>函数以分离的多个式子被扩展多次，那么只需一组局部变量，就可以重复使用(译注：因为它们被放在一个封闭区段中，有自己的scope)</span><br></pre></td></tr></table></figure></p>\n<p>minval=min(val1,val2)+min(foo(),foo()+1);//这就是单一表达式，进行两次扩展，多出两组变量<br><code>`</code></p>\n<h4 id=\"5-Inline-Function的缺点。\"><a href=\"#5-Inline-Function的缺点。\" class=\"headerlink\" title=\"5.Inline Function的缺点。\"></a>5.Inline Function的缺点。</h4><p>一个inline函数如果被调用太多次，会产生大量的扩展码，使程序大小暴涨。参数带有副作用或者以一个单一表达式做多重调用、或者其本身有多个局部变量，都会产生大量局部变量，当然，编译器有可能帮你处理，也可能不会。     </p>\n<blockquote>\n<p><strong>对于既要安全又要效率的程序，inline函数提供了一个强有力的工具。然而，与non-inline函数比起来，他们需要更加小心地处理。</strong></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>Function是c++中的又一大重要部分， 本章的的主题是Function语意学，主要是探究编译器对class中的static member function、nonstatic member function和virtual member function所做的处理，并用实际测试分析其使用对代码效率的影响。同时也会进一步探究“指向member function”的指针和Inline function的原理和效率。<br>","more":"</p>\n<h3 id=\"前述\"><a href=\"#前述\" class=\"headerlink\" title=\"前述\"></a>前述</h3><blockquote>\n<p>Function是c++中的又一大重要部分， 本章的的主题是Function语意学，主要是探究编译器对class中的static member function、nonstatic member function和virtual member function所做的处理，并用实际测试分析其使用对代码效率的影响。同时也会进一步探究“指向member function”的指针和Inline function的原理和效率。</p>\n</blockquote>\n<hr>\n<p>参考书籍及链接：《深度探索c++对象模型》    </p>\n<hr>\n<h2 id=\"一、Member-function的各种调用方式\"><a href=\"#一、Member-function的各种调用方式\" class=\"headerlink\" title=\"一、Member function的各种调用方式\"></a>一、Member function的各种调用方式</h2><h4 id=\"1-Nonstatic-Member-Function是怎么被调用的？\"><a href=\"#1-Nonstatic-Member-Function是怎么被调用的？\" class=\"headerlink\" title=\"1. Nonstatic Member Function是怎么被调用的？\"></a>1. Nonstatic Member Function是怎么被调用的？</h4><p>C++的设计准则之一就是：nonstatic member function至少必须和一般的nonmember function有相同的效率。<br>在c++中，member function会被被编译器转化为nonmember function，然后执行期被调用，转化过程如下：</p>\n<ul>\n<li><ol>\n<li>改写函数原型，以安插一个额外的参数(this指针)到member function中，用以提供一个存取管道，使class object得以将此函数调用。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>将每一个“对nonstatic data member的存取操作”改为经由this指针来存取。</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>将member function重新写成一个外部函数。将函数名称经过“mangling”处理，使它在程序中称为独一无二的词汇。</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"2-编译器为什么要进行名称处理（name-mangling）？怎么处理？\"><a href=\"#2-编译器为什么要进行名称处理（name-mangling）？怎么处理？\" class=\"headerlink\" title=\"2. 编译器为什么要进行名称处理（name mangling）？怎么处理？\"></a>2. 编译器为什么要进行名称处理（name mangling）？怎么处理？</h4><p>继承所带来的重复变量名、函数的重载等都需要编译器能唯一识别，这时候就需要就需要进行名称处理。一般而言，member的名称前面会加上class的名称，形成独一无二的命名，有时候member function的名称也需要加上参数类型等。    </p>\n<h4 id=\"3-Virtual-Member-Functions是如何被调用的？\"><a href=\"#3-Virtual-Member-Functions是如何被调用的？\" class=\"headerlink\" title=\"3. Virtual Member Functions是如何被调用的？\"></a>3. Virtual Member Functions是如何被调用的？</h4><p>编译器内部会对virtual member function进行如下转换：<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ptr-&gt;f();   //f()为virtual member function</span><br><span class=\"line\"></span><br><span class=\"line\">（*ptr-&gt;vptr[<span class=\"string\">1</span>](<span class=\"link\">ptr</span>);//内部转化结果</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>vptr表示编译器产生的指针，指向virtual table。  </li>\n<li>1 是virtual table slot的索引值，关联到normalize()函数。   </li>\n<li>第二个ptr表示this指针。  </li>\n</ul>\n<h4 id=\"4-Static-Member-Functions有什么特性？如何被调用的？\"><a href=\"#4-Static-Member-Functions有什么特性？如何被调用的？\" class=\"headerlink\" title=\"4. Static Member Functions有什么特性？如何被调用的？\"></a>4. Static Member Functions有什么特性？如何被调用的？</h4><p>static member functions的主要特性是它没有this指针。以下的次要特性统统根源于其主要特性：</p>\n<ul>\n<li>它不能够直接存取其class中的nonstatic members</li>\n<li>它不能够被声明为const、volatile或virtual</li>\n<li>它不需要经由class object才被调用，虽然大部分时候它是这样被调用的。    </li>\n</ul>\n<p>如果取一个static member function的地址，获得的将是其在内存中的位置，也就是其地址。由于static member function没有this指针，所以其地址的类型并不是一个“指向class member of function的指针”，而是一个“nonmember函数指针”。</p>\n<h2 id=\"二、Virtual-Member-function\"><a href=\"#二、Virtual-Member-function\" class=\"headerlink\" title=\"二、Virtual Member function\"></a>二、Virtual Member function</h2><h4 id=\"1-什么是多态？\"><a href=\"#1-什么是多态？\" class=\"headerlink\" title=\"1. 什么是多态？\"></a>1. 什么是多态？</h4><p>C++中，多态表示以“一个public base class 的指针（或reference)，寻址出一个derived class object”。</p>\n<blockquote>\n<p>runtime type identification(RTTI)</p>\n</blockquote>\n<h4 id=\"2-为了能方便class指针在执行期找到对应的函数实例，就需要编译器决定是否需要给class添加额外信息，那么，到底何时才需要这份信息？\"><a href=\"#2-为了能方便class指针在执行期找到对应的函数实例，就需要编译器决定是否需要给class添加额外信息，那么，到底何时才需要这份信息？\" class=\"headerlink\" title=\"2. 为了能方便class指针在执行期找到对应的函数实例，就需要编译器决定是否需要给class添加额外信息，那么，到底何时才需要这份信息？\"></a>2. 为了能方便class指针在执行期找到对应的函数实例，就需要编译器决定是否需要给class添加额外信息，那么，到底何时才需要这份信息？</h4><p>答案是在必须支持某种形式之“执行期多态”的时候，要鉴定哪些classes展现多态特性，就需要额外的执行期信息。<br>识别一个class是否支持多态，唯一适当的方法就是看看它是否有任何virtual function。只要class拥有一个virtual function，它就需要这份额外的执行期信息。</p>\n<h4 id=\"3-什么样的额外信息是我们需要存储起来的？\"><a href=\"#3-什么样的额外信息是我们需要存储起来的？\" class=\"headerlink\" title=\"3. 什么样的额外信息是我们需要存储起来的？\"></a>3. 什么样的额外信息是我们需要存储起来的？</h4><p>在实现上，编译器可以做到在每一个多态对象的class object身上增加两个members:     </p>\n<ul>\n<li>一个字符串或数字，表示class的类型</li>\n<li>一个指针，指向表格，表格中带有程序的virtual function的执行期地址。</li>\n</ul>\n<h4 id=\"4-执行期如何找到对应的virtual-function地址？\"><a href=\"#4-执行期如何找到对应的virtual-function地址？\" class=\"headerlink\" title=\"4. 执行期如何找到对应的virtual function地址？\"></a>4. 执行期如何找到对应的virtual function地址？</h4><p>执行期要做的，只是在特定的virtual table slot中激活virtual function。这些active virtual function包括：</p>\n<ul>\n<li>这一class所定义的函数实例。它会改写(overriding)一个可能存在的base class virtual function函数实例。</li>\n<li>继承自base class的函数实例。这是在derived class决定不改写virtual function时才会出现的情况</li>\n<li>一个pure_virtual_called()函数实例，它既可以扮演pure virtual function的空间保卫者角色，也可以当做执行期异常处理函数(有时候会用到)。  </li>\n</ul>\n<p>每一个virtual function都被指派一个固定的索引值，这个索引在整个继承体系中保持与特定的virtual function的关系。执行期通过vptr和对应的slot获得对应的virtual function地址并进行调用。</p>\n<blockquote>\n<p>在一个单一继承体系中，virtual function机制的行为十分良好，不但有效率而且很容易塑造出模型来。但是在多重继承和虚拟继承中，对virtual function的支持就没有那么美好了。</p>\n</blockquote>\n<h4 id=\"5-多重继承下virtual-function编译器需要做什么？\"><a href=\"#5-多重继承下virtual-function编译器需要做什么？\" class=\"headerlink\" title=\"5. 多重继承下virtual function编译器需要做什么？\"></a>5. 多重继承下virtual function编译器需要做什么？</h4><p>当把一个从heap中配置而得的Derived对象的地址，指定给一个Base2指针时，编译器需要如下处理：<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Base2 *pbase2 = <span class=\"keyword\">new</span> <span class=\"type\">Derived</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//编译器会做的处理</span></span><br><span class=\"line\">Derived *tmp = <span class=\"keyword\">new</span> <span class=\"type\">Derived</span>;</span><br><span class=\"line\">Base2 *pbase2 = tmp ? tmp + sizeof(Base1) : <span class=\"type\">0</span>;<span class=\"comment\">//转移以支持第二个base class</span></span><br></pre></td></tr></table></figure></p>\n<p>当要删除pbase2所指的对象时，指针必须被再一次调整，以求再一次指向Derived对象的起始处(推测它还指向Derived对象)。然而上述的offset加法却不能够在编译时期直接设定，因为pbase2所指的真正对象只有在执行期才能确定。</p>\n<h4 id=\"6-多重继承下virtual-function带来的负担是什么？\"><a href=\"#6-多重继承下virtual-function带来的负担是什么？\" class=\"headerlink\" title=\"6. 多重继承下virtual function带来的负担是什么？\"></a>6. 多重继承下virtual function带来的负担是什么？</h4><p>在多重继承之下，一个derived class内含n-1个额外的virtual tables，n表示其上一层base classes的个数(因此，单一继承将不会有额外的virtual tables)。<br>针对每一个virtual tables，Derived对象中有对应的vptr。vptrs将在constructor(s)中被设定初值。</p>\n<h4 id=\"7-Thunk技术是什么？用来做什么？\"><a href=\"#7-Thunk技术是什么？用来做什么？\" class=\"headerlink\" title=\"7.Thunk技术是什么？用来做什么？\"></a>7.Thunk技术是什么？用来做什么？</h4><p>offset的大小，以及把offset加到this指针上头的那一小段<strong>程序代码</strong>，必须经由编译器在某个地方插入。较有效率的解决办法是利用所谓的thunk。所谓thunk是以小段assembly代码，用来：</p>\n<ul>\n<li>(1) 以适当的offset值调整this指针</li>\n<li>(2) 跳到virtual function去。<br>Thunk技术允许virtual table slot继续内含一个简单的指针，因此多重继承不需要任何空间上的额外负担。Slots中的地址可以直接指向virtual function，也可以指向一个相关的thunk(如果需要调整this指针的话)。</li>\n</ul>\n<h4 id=\"8-哪些情况，第二或后继的base-class会影响对virtual-functions的支持？\"><a href=\"#8-哪些情况，第二或后继的base-class会影响对virtual-functions的支持？\" class=\"headerlink\" title=\"8.哪些情况，第二或后继的base class会影响对virtual functions的支持？\"></a>8.哪些情况，第二或后继的base class会影响对virtual functions的支持？</h4><p>有以下三种情况，第二或后继的base class会影响对virtual functions的支持。</p>\n<ul>\n<li><p>第一种情况是，通过一个”指向第二个base class”的指针，调用derived class virtual function。例如：</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Base2 *ptr = <span class=\"keyword\">new</span> Derived;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用Derived::~Derived</span></span><br><span class=\"line\"><span class=\"comment\">//ptr指向Derived对象中的Base2 subobject；</span></span><br><span class=\"line\"><span class=\"comment\">//为了能够正确执行，ptr必须调整指向Derived对象的起始处。</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> ptr;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第二种情况是第一种情况的变化，通过一个“指向derived class”的指针，调用第二个base class中一个继承而来的virtual function。例如：</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Derived *pder = <span class=\"keyword\">new</span> <span class=\"type\">Derived</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用Base2::mumble()</span></span><br><span class=\"line\"><span class=\"comment\">//在此情况下，derived class指针必须再次调整，以指向第二个base subobject。</span></span><br><span class=\"line\">pder-&gt;mumble();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第三种情况发生于一个语言扩充性质之下：允许一个virtual function的返回值类型有所变化，可能是base type，也可能是publicly derived type。</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Base2 *pb = <span class=\"keyword\">new</span> <span class=\"type\">Derived</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用Derived * Derived::clone()</span></span><br><span class=\"line\"><span class=\"comment\">//当进行pb1-&gt;clone()时，pb1会被调整指向Derived对象的起始地址</span></span><br><span class=\"line\"><span class=\"comment\">//于是clone()的Derived版会被调用；</span></span><br><span class=\"line\"><span class=\"comment\">//它会传回一个指针，指向一个新的Derived对象，该对象的地址在被指定给pb2之前</span></span><br><span class=\"line\"><span class=\"comment\">//必须先经过调整，以指向Base2 subobject。</span></span><br><span class=\"line\">Base2 *pb2 = pb-&gt;clone();</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"9-虚拟继承下virtual-functions呢？\"><a href=\"#9-虚拟继承下virtual-functions呢？\" class=\"headerlink\" title=\"9.虚拟继承下virtual functions呢？\"></a>9.虚拟继承下virtual functions呢？</h4><p>当一个virtual base class从另一个virtual base class派生而来，并且两者都支持virtual functions和nonstatic data members时，编译器对于virtual base class的支持简直就像进了迷宫一样。<strong>不要在一个virtual base class中声明nonstatic data members</strong>，否则你将距离复杂的深渊越来越近。</p>\n<h2 id=\"三、函数的效率\"><a href=\"#三、函数的效率\" class=\"headerlink\" title=\"三、函数的效率\"></a>三、函数的效率</h2><p>nonmemeber、static member或nonstatic member函数都被转换为完全相同形式，所以三者效率完全相同。<br>导入virtual function之后，class constructor将获得参数以设定virtual table指针。所以每多一层继承，就会多增加一个额外的vptr设定。</p>\n<blockquote>\n<p>constructor的额外操作在多次调用的情况下可能会拖低效率，减少常用函数中的局部对象可以在一定程度上提高效率。</p>\n</blockquote>\n<h2 id=\"四、指向Member-Function的指针\"><a href=\"#四、指向Member-Function的指针\" class=\"headerlink\" title=\"四、指向Member Function的指针\"></a>四、指向Member Function的指针</h2><h4 id=\"1-指向nonstatic-member-function的指针是如何工作的？\"><a href=\"#1-指向nonstatic-member-function的指针是如何工作的？\" class=\"headerlink\" title=\"1.指向nonstatic member function的指针是如何工作的？\"></a>1.指向nonstatic member function的指针是如何工作的？</h4><p>取一个nonstatic data member的地址，如果该函数是nonvirtual，得到的结果是它在内存中真正的地址。然而这个值也是不完全的。它也需要被绑定于某个class object的地址上，才能够通过它调用该函数。所有的nonstatic member functions都需要对象的地址(以参数this指出)。<br><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">double  ( <span class=\"symbol\">Point::</span>*pmf)(); <span class=\"comment\">//member function的指针名</span></span><br><span class=\"line\">pmf = &amp;<span class=\"symbol\">Point::</span>y; <span class=\"comment\">//获得对应的member function地址</span></span><br><span class=\"line\">(origin.*coord)(); <span class=\"comment\">//调用方式,origin是一个object,指针(ptr-&gt;*corrd)();</span></span><br><span class=\"line\">(coord)(<span class=\"variable\">&amp;origin</span>); <span class=\"comment\">//编译器内部转化</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-指向nonstatic-member-function的指针会带来负担吗？\"><a href=\"#2-指向nonstatic-member-function的指针会带来负担吗？\" class=\"headerlink\" title=\"2.指向nonstatic member function的指针会带来负担吗？\"></a>2.指向nonstatic member function的指针会带来负担吗？</h4><p>看情况，如果并不用于virtual function、多重继承、virtual base class等情况的话，并不会比使用一个“nonmember function指针”的成本高。<br>但上述三种情况对于“member function指针”的类型以及调用都太过于复杂。</p>\n<h4 id=\"3-虚拟机制能在使用“指向member-function的指针”的情况下运行吗？如果能，又是怎样实现的？\"><a href=\"#3-虚拟机制能在使用“指向member-function的指针”的情况下运行吗？如果能，又是怎样实现的？\" class=\"headerlink\" title=\"3.虚拟机制能在使用“指向member function的指针”的情况下运行吗？如果能，又是怎样实现的？\"></a>3.虚拟机制能在使用“指向member function的指针”的情况下运行吗？如果能，又是怎样实现的？</h4><p>对一个nonstatic member function取其地址，将获得该函数在内存中的地址。然而面对一个virtual function，其地址在编译时期是未知的，取其地址所能获得的只是其在virtual table中的索引值。<br><figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;Point::x();  <span class=\"comment\">//x()为非虚函数，得其内存地址 </span></span><br><span class=\"line\">&amp;Point::z();  <span class=\"comment\">//z()为虚函数，得其索引值</span></span><br><span class=\"line\"></span><br><span class=\"line\">(*ptr-&gt;vptr[(<span class=\"keyword\">int</span>)pmf])(ptr);<span class=\"comment\">//pmf指向virtual函数时的调用方式</span></span><br></pre></td></tr></table></figure></p>\n<p>为了使pmf能支持上述两种情况，编译器必须定义函数指针使它能够(1)含有两种数值,(2)更重要的是其数值可以被区别代表内存地址还是virtual table中的索引值。</p>\n<h4 id=\"4-在多重继承下，指向Member-Functions的指针如何工作？\"><a href=\"#4-在多重继承下，指向Member-Functions的指针如何工作？\" class=\"headerlink\" title=\"4.在多重继承下，指向Member Functions的指针如何工作？\"></a>4.在多重继承下，指向Member Functions的指针如何工作？</h4><p>为了让指向member functions的指针也能够支持多重继承和虚拟继承，Stroustrup设计了下面一个结构体：<br><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">_mptr</span></span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int delta; <span class=\"regexp\">//delta</span>字段表示this指针的offset值</span><br><span class=\"line\">    int index; <span class=\"regexp\">//virtual</span> table索引,不用时设为-<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">union</span>&#123;</span></span><br><span class=\"line\">        protofunc faddr; <span class=\"regexp\">//nonvirtual</span> member function地址</span><br><span class=\"line\">        int v_offset; <span class=\"regexp\">//v</span>_offset字段放的是一个virtual base <span class=\"class\"><span class=\"keyword\">class</span>的<span class=\"title\">vptr</span>位置。</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">(ptr-&gt;*pmf)();<span class=\"regexp\">//</span>原始调用</span><br><span class=\"line\">/<span class=\"regexp\">/ 编译器转换</span></span><br><span class=\"line\"><span class=\"regexp\">(pmf.index &lt; 0) ? ( *pmf.faddr )( ptr) : (* ptr-&gt;vptr[pmf.index](ptr));</span></span><br></pre></td></tr></table></figure></p>\n<p>Microsoft就供应了三种风味，以减少不必要的字段：</p>\n<ul>\n<li><ol>\n<li>一个单一继承实例(其中带有vcall thunk地址或是faddr)</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>一个多重继承实例(其中带有faddr和delta、vcall thunk地址)</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>一个虚拟继承实例(其中带有四个members)</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"五、Inline-Functions\"><a href=\"#五、Inline-Functions\" class=\"headerlink\" title=\"五、Inline Functions\"></a>五、Inline Functions</h2><h4 id=\"1-Inline-Function有什么优点？\"><a href=\"#1-Inline-Function有什么优点？\" class=\"headerlink\" title=\"1.Inline Function有什么优点？\"></a>1.Inline Function有什么优点？</h4><p>为了处理类内部数据，有时候会用friend function进行操作。然而如果我们将这些函数声明为inline，我们就可以保持直接存取members 的那种高效率，同时也能兼顾函数的封装性，此外，也不用再用friend。</p>\n<h4 id=\"2-Inline-Function什么时候被展开？\"><a href=\"#2-Inline-Function什么时候被展开？\" class=\"headerlink\" title=\"2.Inline Function什么时候被展开？\"></a>2.Inline Function什么时候被展开？</h4><p>编译器会决定是否将Inline Functiong按照一个expression进行展开。处理一个inline函数，有两个阶段：</p>\n<ul>\n<li><ol>\n<li>分析函数定义，以决定函数的“intrinsic inline ability”。“intrinsic” (本质的，固有的)一词在这里意指“与编译器相关”，如果函数因其复杂度，或因其建构问题，被判断不可成为inline，它会被转为一个static函数，并在“被编译模块”内产生对应的函数语义。</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>真正的inline函数扩展操作是在调用的那一点上。这会带来参数的求值操作(evaluation)以及临时性对象的管理。<br>同样在扩展点上，编译器将决定这个调用是否“不可为inline”。</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"3-Inline-Function如何处理形式参数？\"><a href=\"#3-Inline-Function如何处理形式参数？\" class=\"headerlink\" title=\"3.Inline Function如何处理形式参数？\"></a>3.Inline Function如何处理形式参数？</h4><p>扩展Inline function时，每一个形式参数都会被对应的实际参数取代。如果实际参数是一个常量表达式，我们可以在替换之前先完成其求值操作；后继的inline替换，就可以把常量直接“绑”上去。如果既不是常量表达式，也不是带有副作用的表达式，那么就直接替换之。<br>例如：<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> bar()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> minval;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val1 = <span class=\"number\">1024</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> val2 = <span class=\"number\">2048</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    minval = <span class=\"built_in\">min</span>(val1, val2);  <span class=\"comment\">/*(1)*/</span> </span><br><span class=\"line\">    minval = <span class=\"built_in\">min</span>(<span class=\"number\">1024</span>, <span class=\"number\">2048</span>);  <span class=\"comment\">/*(2)*/</span></span><br><span class=\"line\">    minval = <span class=\"built_in\">min</span>(foo(), bar() + <span class=\"number\">1</span>); <span class=\"comment\">/*(3)*/</span></span><br><span class=\"line\">    <span class=\"built_in\">return</span> minval;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>(1) 处形参无副作用，直接展开：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(2) 处那一行直接拥抱常量：``` minval = 1024;  ```      </span><br><span class=\"line\">(3) 处那一行则引发参数的副作用，它需要导入一个临时对象，以避免重复求值:</span><br></pre></td></tr></table></figure></p>\n<p>int t1;<br>int t2;<br>minval = (t1 = foo()), (t2 = bar() + 1),<br>        t1 &lt; t2 ? t1 : t2;<br><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#### <span class=\"number\">4.</span>Inline Function如何处理局部变量？</span><br><span class=\"line\">一般而言，<span class=\"keyword\">inline</span>函数中的每一个局部变量都必须被放在函数调用的一个封闭区段中，拥有一个独一无二的名称。</span><br><span class=\"line\">如果<span class=\"keyword\">inline</span>函数以单一表达式扩展多次，则每次扩展都需要自己的一组局部变量。如果<span class=\"keyword\">inline</span>函数以分离的多个式子被扩展多次，那么只需一组局部变量，就可以重复使用(译注：因为它们被放在一个封闭区段中，有自己的scope)</span><br></pre></td></tr></table></figure></p>\n<p>minval=min(val1,val2)+min(foo(),foo()+1);//这就是单一表达式，进行两次扩展，多出两组变量<br><code>`</code></p>\n<h4 id=\"5-Inline-Function的缺点。\"><a href=\"#5-Inline-Function的缺点。\" class=\"headerlink\" title=\"5.Inline Function的缺点。\"></a>5.Inline Function的缺点。</h4><p>一个inline函数如果被调用太多次，会产生大量的扩展码，使程序大小暴涨。参数带有副作用或者以一个单一表达式做多重调用、或者其本身有多个局部变量，都会产生大量局部变量，当然，编译器有可能帮你处理，也可能不会。     </p>\n<blockquote>\n<p><strong>对于既要安全又要效率的程序，inline函数提供了一个强有力的工具。然而，与non-inline函数比起来，他们需要更加小心地处理。</strong></p>\n</blockquote>"},{"title":"1.保卫方案","date":"2019-05-16T08:44:12.000Z","toc":true,"comments":1,"_content":"\n战争游戏的至关重要环节就要到来了，这次的结果将决定王国的生死存亡，小B负责首都的防卫工作。首都位于一个四面环山的盆地中，周围的n个小山构成一个环，作为预警措施，小B计划在每个小山上设置一个观察哨，日夜不停的瞭望周围发生的情况。 一旦发生外地入侵事件，山顶上的岗哨将点燃烽烟，若两个岗哨所在的山峰之间没有更高的山峰遮挡且两者之间有相连通路，则岗哨可以观察到另一个山峰上的烽烟是否点燃。由于小山处于环上，任意两个小山之间存在两个不同的连接通路。满足上述不遮挡的条件下，一座山峰上岗哨点燃的烽烟至少可以通过一条通路被另一端观察到。对于任意相邻的岗哨，一端的岗哨一定可以发现一端点燃的烽烟。 小B设计的这种保卫方案的一个重要特性是能够观测到对方烽烟的岗哨对的数量，她希望你能够帮她解决这个问题。\n<!--more-->\n\n## 保卫方案 \n------------------------------------------------------------\n> 题目原链接：https://www.nowcoder.com/practice/e1967ae812ea42e7a3ce57ee1f83b686?tpId=85&tqId=29878&rp=2&ru=/activity/oj&qru=/ta/2017test/question-ranking\n\n### 1.题目描述   \n战争游戏的至关重要环节就要到来了，这次的结果将决定王国的生死存亡，小B负责首都的防卫工作。首都位于一个四面环山的盆地中，周围的n个小山构成一个环，作为预警措施，小B计划在每个小山上设置一个观察哨，日夜不停的瞭望周围发生的情况。 一旦发生外地入侵事件，山顶上的岗哨将点燃烽烟，若两个岗哨所在的山峰之间没有更高的山峰遮挡且两者之间有相连通路，则岗哨可以观察到另一个山峰上的烽烟是否点燃。由于小山处于环上，任意两个小山之间存在两个不同的连接通路。满足上述不遮挡的条件下，一座山峰上岗哨点燃的烽烟至少可以通过一条通路被另一端观察到。对于任意相邻的岗哨，一端的岗哨一定可以发现一端点燃的烽烟。 小B设计的这种保卫方案的一个重要特性是能够观测到对方烽烟的岗哨对的数量，她希望你能够帮她解决这个问题。\n\n### 2.输入描述\n> 输入中有多组测试数据，每一组测试数据的第一行为一个整数n(3<=n<=10^6),为首都周围的小山数量，第二行为n个整数，依次表示为小山的高度h（1<=h<=10^9）.\n\n### 3.输出描述\n> 对每组测试数据，在单独的一行中输出能相互观察到的岗哨的对数。\n\n### 4.示例\n输入\n```\n5\n1 2 4 5 3\n```\n输出\n```\n7\n```\n\n\n\n### 5.解题思路\n这个题想了好长时间，但是一直没想出来怎么做，参考了大神的解体思路后，总算想清楚了，原链接如下：http://www.cnblogs.com/mengmz/p/7263915.html。\n\n分析题目可知，对于山峰a,如果能在它的左边和右边分别找到最近且比它大的b和c，那么b能看到a，a能看到c，即整体计数对应加2。那么题目可以分为如下两种情况进行讨论：  \n* 对于数组中无重复数字出现的情况，在构成环的全部元素当中，最大值和次大值只有一边存在比它大的数，但能彼此看到，故计数值加1。除了这两个元素外，剩下的n-2个元素都能在左边和右边分别找到比它大的数，故计数值加（n-1）*2。即总的结果为：1+（n-2）*2。      \n* 对于有重复数字出现的情况，假设有一组序列为a,a,b,b,b,c,c且a>b,c>b。a,b,c分别出现的次数为2,3,2，b各元素能互相看见，故b自身能构成的组合数为：c(3,2)=3*(3-2)/2。同时所有的b都能看到最后一个a和第一个c，所以计数值加3+3。如果用N1,N2,N3分别表示a,b,c出现的话，则总的结果为：c(N2,2)+2*N2;\n\n分析完两种情况后，现在我们需要求出每一个数和两边大于这个数的情况，采用单调栈来解决，具体求解过程如下: \n* （1）读取所有数据，放入数组V，计数值count=0。\n* （2）新建数组P，遍历数组V，将V中的元素消除重复后放入P中，并记录下每个元素重复的次数。同时找出最大的元素max和其在P中下标max_i。\n* （3）创建堆栈S，然后从max_i开始遍历所有P中元素。进行如下操作：\n     > * 若堆栈为空， 将P[i]直接压入堆栈；   \n     > * 若堆栈为非空，将P[i]与栈顶元素进行比较，如果大于栈顶元素，count加上栈顶元素的组合数（重复数N,组合数为c(N,2)+N,注意此时只考虑栈顶元素和P[i]的组合数），然后弹出栈顶元素，若栈不为空，则弹出的数和栈顶数也有组合数，count加弹出数的重复数N，执行本步骤一直弹出直到P[i]小于栈顶元素；\n     > * 若等于栈顶元素，栈顶元素的重复数+P[i]的重复数，继续执行；\n     > * 若小于栈顶元素，直接压入；\n* (4)上个步骤结束后，得到一个递减的堆栈。依次弹出栈顶元素到temp，直到堆栈为空，count加上其组合数目,这个时候要考虑以下情况：\n     > * 堆栈中剩余元素个数多于1,则temp的组合数为c(N,2)+N*2。   \n     > * 堆栈中的剩余元素个数为1，若剩余元素的重复次数n大于1，则temp的组合数为c(N,2)+N*2（如4,4,3,3,3序列，所有的3能看到第一个4和最后一个4）；若剩余的重复次数为1，则temp的组合数为c(N,2)+N（如4,3,3,3序列）\n     > * 堆栈中的剩余元素个数为0，此时temp为最大值，组合数跟其重复次数N有关,为c(N,2)；   \n\n### 6.实现代码\n```\n#include<iostream>\n#include <algorithm>\n#include<vector>\n#include<stack>\nusing namespace std;\n\n//用结构体来保存每个山峰的高度，和重复的次数\nstruct node{\n    int val;\n    long count;\n    node(int v,int c=1): val(v),count(c){};\n};\n\nint main()\n{\n    int n,value,i,max,max_i;\n    long count=0;\n\n    cin>>n;\n    \n    vector<int> mountin(n);\n    vector<node> mnode;//去重和计数\n    for(i=0;i<n;i++)\n    {\n        cin>>mountin[i];//依次获取每个山峰的值\n    }\n    \n    node temp(mountin[0]);\n    max=mountin[0];\n    for(i=1;i<n;i++)//去重和寻找最大值\n    {\n        if(mountin[i]==temp.val)//若重复\n        {\n            temp.count++;//计数\n        }\n        else  \n        {\n            mnode.push_back(temp);\n            if(max<temp.val)//获取最大峰值和对应下标\n            {\n                max=temp.val;\n                max_i=mnode.size()-1;//注意，这里获取的去重后的下标\n            }\n            temp.val=mountin[i];\n            temp.count=1;\n        }\n    }\n    \n    mnode.push_back(temp);\n    if(max<temp.val)//获取最大峰值和对应下标\n    {\n        max=temp.val;\n        max_i=mnode.size()-1;//注意，这里获取的去重后的下标\n    }\n    \n    stack<node> s;\n    n=0;\n    for(i=max_i;n<mnode.size();++n,i=(i+1)%mnode.size())\n    {\n        while(!s.empty() && mnode[i].val>s.top().val)\n        {   //数组元素大于栈顶元素的情况\n            temp.val=s.top().val;\n            temp.count=s.top().count;\n            count+=temp.count*(temp.count-1)/2+temp.count;\n            s.pop();\n            if(!s.empty()) count+=temp.count;\n        }\n        //数组元素小于栈顶元素的情况\n        if(s.empty()||mnode[i].val<s.top().val) s.push(mnode[i]);\n        else //数组元素等于栈顶元素的情况\n        {\n            s.top().count+=mnode[i].count;\n        }\n    }\n    \n    //对最后的递减栈进行求解\n    while(!s.empty())\n    {\n        temp.val=s.top().val;\n        temp.count=s.top().count;\n        s.pop();\n        if(s.size()>1)  count+=temp.count*(temp.count-1)/2+2*temp.count;\n        else if(s.size()==0) count+=temp.count*(temp.count-1)/2;\n        else //堆栈中还剩一个值的情况\n        {   \n            if(s.top().count==1) //如4，3，3，3\n            {\n                count+=temp.count*(temp.count-1)/2+temp.count;\n            }\n            else //如4,4，3，3，3\n            {\n                count+=temp.count*(temp.count-1)/2+2*temp.count;\n            }\n        }\n        \n    }\n    cout<<count<<endl;\n    return 0;\n}\n```\n\n### 6.思考与分析\n* 解题的时候还是需要学会将大问题化解之后进行分析，分情况不断讨论，然后也就能分而解之，水到渠成。","source":"_posts/算法与数据结构/1.保卫方案.md","raw":"---\ntitle: 1.保卫方案\ndate: 2019-05-16 16:44:12\ntoc: true\ncomments: true\ntags:\n  - 动态规划\ncategories:\n  - 算法与数据结构\n---\n\n战争游戏的至关重要环节就要到来了，这次的结果将决定王国的生死存亡，小B负责首都的防卫工作。首都位于一个四面环山的盆地中，周围的n个小山构成一个环，作为预警措施，小B计划在每个小山上设置一个观察哨，日夜不停的瞭望周围发生的情况。 一旦发生外地入侵事件，山顶上的岗哨将点燃烽烟，若两个岗哨所在的山峰之间没有更高的山峰遮挡且两者之间有相连通路，则岗哨可以观察到另一个山峰上的烽烟是否点燃。由于小山处于环上，任意两个小山之间存在两个不同的连接通路。满足上述不遮挡的条件下，一座山峰上岗哨点燃的烽烟至少可以通过一条通路被另一端观察到。对于任意相邻的岗哨，一端的岗哨一定可以发现一端点燃的烽烟。 小B设计的这种保卫方案的一个重要特性是能够观测到对方烽烟的岗哨对的数量，她希望你能够帮她解决这个问题。\n<!--more-->\n\n## 保卫方案 \n------------------------------------------------------------\n> 题目原链接：https://www.nowcoder.com/practice/e1967ae812ea42e7a3ce57ee1f83b686?tpId=85&tqId=29878&rp=2&ru=/activity/oj&qru=/ta/2017test/question-ranking\n\n### 1.题目描述   \n战争游戏的至关重要环节就要到来了，这次的结果将决定王国的生死存亡，小B负责首都的防卫工作。首都位于一个四面环山的盆地中，周围的n个小山构成一个环，作为预警措施，小B计划在每个小山上设置一个观察哨，日夜不停的瞭望周围发生的情况。 一旦发生外地入侵事件，山顶上的岗哨将点燃烽烟，若两个岗哨所在的山峰之间没有更高的山峰遮挡且两者之间有相连通路，则岗哨可以观察到另一个山峰上的烽烟是否点燃。由于小山处于环上，任意两个小山之间存在两个不同的连接通路。满足上述不遮挡的条件下，一座山峰上岗哨点燃的烽烟至少可以通过一条通路被另一端观察到。对于任意相邻的岗哨，一端的岗哨一定可以发现一端点燃的烽烟。 小B设计的这种保卫方案的一个重要特性是能够观测到对方烽烟的岗哨对的数量，她希望你能够帮她解决这个问题。\n\n### 2.输入描述\n> 输入中有多组测试数据，每一组测试数据的第一行为一个整数n(3<=n<=10^6),为首都周围的小山数量，第二行为n个整数，依次表示为小山的高度h（1<=h<=10^9）.\n\n### 3.输出描述\n> 对每组测试数据，在单独的一行中输出能相互观察到的岗哨的对数。\n\n### 4.示例\n输入\n```\n5\n1 2 4 5 3\n```\n输出\n```\n7\n```\n\n\n\n### 5.解题思路\n这个题想了好长时间，但是一直没想出来怎么做，参考了大神的解体思路后，总算想清楚了，原链接如下：http://www.cnblogs.com/mengmz/p/7263915.html。\n\n分析题目可知，对于山峰a,如果能在它的左边和右边分别找到最近且比它大的b和c，那么b能看到a，a能看到c，即整体计数对应加2。那么题目可以分为如下两种情况进行讨论：  \n* 对于数组中无重复数字出现的情况，在构成环的全部元素当中，最大值和次大值只有一边存在比它大的数，但能彼此看到，故计数值加1。除了这两个元素外，剩下的n-2个元素都能在左边和右边分别找到比它大的数，故计数值加（n-1）*2。即总的结果为：1+（n-2）*2。      \n* 对于有重复数字出现的情况，假设有一组序列为a,a,b,b,b,c,c且a>b,c>b。a,b,c分别出现的次数为2,3,2，b各元素能互相看见，故b自身能构成的组合数为：c(3,2)=3*(3-2)/2。同时所有的b都能看到最后一个a和第一个c，所以计数值加3+3。如果用N1,N2,N3分别表示a,b,c出现的话，则总的结果为：c(N2,2)+2*N2;\n\n分析完两种情况后，现在我们需要求出每一个数和两边大于这个数的情况，采用单调栈来解决，具体求解过程如下: \n* （1）读取所有数据，放入数组V，计数值count=0。\n* （2）新建数组P，遍历数组V，将V中的元素消除重复后放入P中，并记录下每个元素重复的次数。同时找出最大的元素max和其在P中下标max_i。\n* （3）创建堆栈S，然后从max_i开始遍历所有P中元素。进行如下操作：\n     > * 若堆栈为空， 将P[i]直接压入堆栈；   \n     > * 若堆栈为非空，将P[i]与栈顶元素进行比较，如果大于栈顶元素，count加上栈顶元素的组合数（重复数N,组合数为c(N,2)+N,注意此时只考虑栈顶元素和P[i]的组合数），然后弹出栈顶元素，若栈不为空，则弹出的数和栈顶数也有组合数，count加弹出数的重复数N，执行本步骤一直弹出直到P[i]小于栈顶元素；\n     > * 若等于栈顶元素，栈顶元素的重复数+P[i]的重复数，继续执行；\n     > * 若小于栈顶元素，直接压入；\n* (4)上个步骤结束后，得到一个递减的堆栈。依次弹出栈顶元素到temp，直到堆栈为空，count加上其组合数目,这个时候要考虑以下情况：\n     > * 堆栈中剩余元素个数多于1,则temp的组合数为c(N,2)+N*2。   \n     > * 堆栈中的剩余元素个数为1，若剩余元素的重复次数n大于1，则temp的组合数为c(N,2)+N*2（如4,4,3,3,3序列，所有的3能看到第一个4和最后一个4）；若剩余的重复次数为1，则temp的组合数为c(N,2)+N（如4,3,3,3序列）\n     > * 堆栈中的剩余元素个数为0，此时temp为最大值，组合数跟其重复次数N有关,为c(N,2)；   \n\n### 6.实现代码\n```\n#include<iostream>\n#include <algorithm>\n#include<vector>\n#include<stack>\nusing namespace std;\n\n//用结构体来保存每个山峰的高度，和重复的次数\nstruct node{\n    int val;\n    long count;\n    node(int v,int c=1): val(v),count(c){};\n};\n\nint main()\n{\n    int n,value,i,max,max_i;\n    long count=0;\n\n    cin>>n;\n    \n    vector<int> mountin(n);\n    vector<node> mnode;//去重和计数\n    for(i=0;i<n;i++)\n    {\n        cin>>mountin[i];//依次获取每个山峰的值\n    }\n    \n    node temp(mountin[0]);\n    max=mountin[0];\n    for(i=1;i<n;i++)//去重和寻找最大值\n    {\n        if(mountin[i]==temp.val)//若重复\n        {\n            temp.count++;//计数\n        }\n        else  \n        {\n            mnode.push_back(temp);\n            if(max<temp.val)//获取最大峰值和对应下标\n            {\n                max=temp.val;\n                max_i=mnode.size()-1;//注意，这里获取的去重后的下标\n            }\n            temp.val=mountin[i];\n            temp.count=1;\n        }\n    }\n    \n    mnode.push_back(temp);\n    if(max<temp.val)//获取最大峰值和对应下标\n    {\n        max=temp.val;\n        max_i=mnode.size()-1;//注意，这里获取的去重后的下标\n    }\n    \n    stack<node> s;\n    n=0;\n    for(i=max_i;n<mnode.size();++n,i=(i+1)%mnode.size())\n    {\n        while(!s.empty() && mnode[i].val>s.top().val)\n        {   //数组元素大于栈顶元素的情况\n            temp.val=s.top().val;\n            temp.count=s.top().count;\n            count+=temp.count*(temp.count-1)/2+temp.count;\n            s.pop();\n            if(!s.empty()) count+=temp.count;\n        }\n        //数组元素小于栈顶元素的情况\n        if(s.empty()||mnode[i].val<s.top().val) s.push(mnode[i]);\n        else //数组元素等于栈顶元素的情况\n        {\n            s.top().count+=mnode[i].count;\n        }\n    }\n    \n    //对最后的递减栈进行求解\n    while(!s.empty())\n    {\n        temp.val=s.top().val;\n        temp.count=s.top().count;\n        s.pop();\n        if(s.size()>1)  count+=temp.count*(temp.count-1)/2+2*temp.count;\n        else if(s.size()==0) count+=temp.count*(temp.count-1)/2;\n        else //堆栈中还剩一个值的情况\n        {   \n            if(s.top().count==1) //如4，3，3，3\n            {\n                count+=temp.count*(temp.count-1)/2+temp.count;\n            }\n            else //如4,4，3，3，3\n            {\n                count+=temp.count*(temp.count-1)/2+2*temp.count;\n            }\n        }\n        \n    }\n    cout<<count<<endl;\n    return 0;\n}\n```\n\n### 6.思考与分析\n* 解题的时候还是需要学会将大问题化解之后进行分析，分情况不断讨论，然后也就能分而解之，水到渠成。","slug":"算法与数据结构/1.保卫方案","published":1,"updated":"2019-05-16T09:34:26.626Z","_id":"cjvqga0qp000j79jxpzfsz3np","layout":"post","photos":[],"link":"","content":"<p>战争游戏的至关重要环节就要到来了，这次的结果将决定王国的生死存亡，小B负责首都的防卫工作。首都位于一个四面环山的盆地中，周围的n个小山构成一个环，作为预警措施，小B计划在每个小山上设置一个观察哨，日夜不停的瞭望周围发生的情况。 一旦发生外地入侵事件，山顶上的岗哨将点燃烽烟，若两个岗哨所在的山峰之间没有更高的山峰遮挡且两者之间有相连通路，则岗哨可以观察到另一个山峰上的烽烟是否点燃。由于小山处于环上，任意两个小山之间存在两个不同的连接通路。满足上述不遮挡的条件下，一座山峰上岗哨点燃的烽烟至少可以通过一条通路被另一端观察到。对于任意相邻的岗哨，一端的岗哨一定可以发现一端点燃的烽烟。 小B设计的这种保卫方案的一个重要特性是能够观测到对方烽烟的岗哨对的数量，她希望你能够帮她解决这个问题。<br><a id=\"more\"></a></p>\n<h2 id=\"保卫方案\"><a href=\"#保卫方案\" class=\"headerlink\" title=\"保卫方案\"></a>保卫方案</h2><hr>\n<blockquote>\n<p>题目原链接：<a href=\"https://www.nowcoder.com/practice/e1967ae812ea42e7a3ce57ee1f83b686?tpId=85&amp;tqId=29878&amp;rp=2&amp;ru=/activity/oj&amp;qru=/ta/2017test/question-ranking\" target=\"_blank\" rel=\"noopener\">https://www.nowcoder.com/practice/e1967ae812ea42e7a3ce57ee1f83b686?tpId=85&amp;tqId=29878&amp;rp=2&amp;ru=/activity/oj&amp;qru=/ta/2017test/question-ranking</a></p>\n</blockquote>\n<h3 id=\"1-题目描述\"><a href=\"#1-题目描述\" class=\"headerlink\" title=\"1.题目描述\"></a>1.题目描述</h3><p>战争游戏的至关重要环节就要到来了，这次的结果将决定王国的生死存亡，小B负责首都的防卫工作。首都位于一个四面环山的盆地中，周围的n个小山构成一个环，作为预警措施，小B计划在每个小山上设置一个观察哨，日夜不停的瞭望周围发生的情况。 一旦发生外地入侵事件，山顶上的岗哨将点燃烽烟，若两个岗哨所在的山峰之间没有更高的山峰遮挡且两者之间有相连通路，则岗哨可以观察到另一个山峰上的烽烟是否点燃。由于小山处于环上，任意两个小山之间存在两个不同的连接通路。满足上述不遮挡的条件下，一座山峰上岗哨点燃的烽烟至少可以通过一条通路被另一端观察到。对于任意相邻的岗哨，一端的岗哨一定可以发现一端点燃的烽烟。 小B设计的这种保卫方案的一个重要特性是能够观测到对方烽烟的岗哨对的数量，她希望你能够帮她解决这个问题。</p>\n<h3 id=\"2-输入描述\"><a href=\"#2-输入描述\" class=\"headerlink\" title=\"2.输入描述\"></a>2.输入描述</h3><blockquote>\n<p>输入中有多组测试数据，每一组测试数据的第一行为一个整数n(3&lt;=n&lt;=10^6),为首都周围的小山数量，第二行为n个整数，依次表示为小山的高度h（1&lt;=h&lt;=10^9）.</p>\n</blockquote>\n<h3 id=\"3-输出描述\"><a href=\"#3-输出描述\" class=\"headerlink\" title=\"3.输出描述\"></a>3.输出描述</h3><blockquote>\n<p>对每组测试数据，在单独的一行中输出能相互观察到的岗哨的对数。</p>\n</blockquote>\n<h3 id=\"4-示例\"><a href=\"#4-示例\" class=\"headerlink\" title=\"4.示例\"></a>4.示例</h3><p>输入<br><figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"symbol\">1 </span><span class=\"number\">2</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure></p>\n<p>输出<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">7</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"5-解题思路\"><a href=\"#5-解题思路\" class=\"headerlink\" title=\"5.解题思路\"></a>5.解题思路</h3><p>这个题想了好长时间，但是一直没想出来怎么做，参考了大神的解体思路后，总算想清楚了，原链接如下：<a href=\"http://www.cnblogs.com/mengmz/p/7263915.html。\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/mengmz/p/7263915.html。</a></p>\n<p>分析题目可知，对于山峰a,如果能在它的左边和右边分别找到最近且比它大的b和c，那么b能看到a，a能看到c，即整体计数对应加2。那么题目可以分为如下两种情况进行讨论：  </p>\n<ul>\n<li>对于数组中无重复数字出现的情况，在构成环的全部元素当中，最大值和次大值只有一边存在比它大的数，但能彼此看到，故计数值加1。除了这两个元素外，剩下的n-2个元素都能在左边和右边分别找到比它大的数，故计数值加（n-1）<em>2。即总的结果为：1+（n-2）</em>2。      </li>\n<li>对于有重复数字出现的情况，假设有一组序列为a,a,b,b,b,c,c且a&gt;b,c&gt;b。a,b,c分别出现的次数为2,3,2，b各元素能互相看见，故b自身能构成的组合数为：c(3,2)=3<em>(3-2)/2。同时所有的b都能看到最后一个a和第一个c，所以计数值加3+3。如果用N1,N2,N3分别表示a,b,c出现的话，则总的结果为：c(N2,2)+2</em>N2;</li>\n</ul>\n<p>分析完两种情况后，现在我们需要求出每一个数和两边大于这个数的情况，采用单调栈来解决，具体求解过程如下: </p>\n<ul>\n<li>（1）读取所有数据，放入数组V，计数值count=0。</li>\n<li>（2）新建数组P，遍历数组V，将V中的元素消除重复后放入P中，并记录下每个元素重复的次数。同时找出最大的元素max和其在P中下标max_i。</li>\n<li>（3）创建堆栈S，然后从max_i开始遍历所有P中元素。进行如下操作：<blockquote>\n<ul>\n<li>若堆栈为空， 将P[i]直接压入堆栈；   </li>\n<li>若堆栈为非空，将P[i]与栈顶元素进行比较，如果大于栈顶元素，count加上栈顶元素的组合数（重复数N,组合数为c(N,2)+N,注意此时只考虑栈顶元素和P[i]的组合数），然后弹出栈顶元素，若栈不为空，则弹出的数和栈顶数也有组合数，count加弹出数的重复数N，执行本步骤一直弹出直到P[i]小于栈顶元素；</li>\n<li>若等于栈顶元素，栈顶元素的重复数+P[i]的重复数，继续执行；</li>\n<li>若小于栈顶元素，直接压入；</li>\n</ul>\n</blockquote>\n</li>\n<li>(4)上个步骤结束后，得到一个递减的堆栈。依次弹出栈顶元素到temp，直到堆栈为空，count加上其组合数目,这个时候要考虑以下情况：<blockquote>\n<ul>\n<li>堆栈中剩余元素个数多于1,则temp的组合数为c(N,2)+N*2。   </li>\n<li>堆栈中的剩余元素个数为1，若剩余元素的重复次数n大于1，则temp的组合数为c(N,2)+N*2（如4,4,3,3,3序列，所有的3能看到第一个4和最后一个4）；若剩余的重复次数为1，则temp的组合数为c(N,2)+N（如4,3,3,3序列）</li>\n<li>堆栈中的剩余元素个数为0，此时temp为最大值，组合数跟其重复次数N有关,为c(N,2)；   </li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"6-实现代码\"><a href=\"#6-实现代码\" class=\"headerlink\" title=\"6.实现代码\"></a>6.实现代码</h3><figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用结构体来保存每个山峰的高度，和重复的次数</span></span><br><span class=\"line\">struct node&#123;</span><br><span class=\"line\">    int val;</span><br><span class=\"line\">    long <span class=\"built_in\">count</span>;</span><br><span class=\"line\">    node(int v,int c=<span class=\"number\">1</span>): val(v),<span class=\"built_in\">count</span>(c)&#123;&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int n,value,i,<span class=\"built_in\">max</span>,max_i;</span><br><span class=\"line\">    long <span class=\"built_in\">count</span>=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    </span><br><span class=\"line\">    vector&lt;int&gt; mountin(n);</span><br><span class=\"line\">    vector&lt;node&gt; mnode;<span class=\"comment\">//去重和计数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin&gt;&gt;mountin[i];<span class=\"comment\">//依次获取每个山峰的值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    node temp(mountin[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">max</span>=mountin[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;n;i++)<span class=\"comment\">//去重和寻找最大值</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mountin[i]==temp.val)<span class=\"comment\">//若重复</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            temp.<span class=\"built_in\">count</span>++;<span class=\"comment\">//计数</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>  </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            mnode.push_back(temp);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">max</span>&lt;temp.val)<span class=\"comment\">//获取最大峰值和对应下标</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">max</span>=temp.val;</span><br><span class=\"line\">                max_i=mnode.<span class=\"built_in\">size</span>()-<span class=\"number\">1</span>;<span class=\"comment\">//注意，这里获取的去重后的下标</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp.val=mountin[i];</span><br><span class=\"line\">            temp.<span class=\"built_in\">count</span>=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    mnode.push_back(temp);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">max</span>&lt;temp.val)<span class=\"comment\">//获取最大峰值和对应下标</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">max</span>=temp.val;</span><br><span class=\"line\">        max_i=mnode.<span class=\"built_in\">size</span>()-<span class=\"number\">1</span>;<span class=\"comment\">//注意，这里获取的去重后的下标</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    stack&lt;node&gt; s;</span><br><span class=\"line\">    n=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=max_i;n&lt;mnode.<span class=\"built_in\">size</span>();++n,i=(i+<span class=\"number\">1</span>)%mnode.<span class=\"built_in\">size</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!s.empty() &amp;&amp; mnode[i].val&gt;s.top().val)</span><br><span class=\"line\">        &#123;   <span class=\"comment\">//数组元素大于栈顶元素的情况</span></span><br><span class=\"line\">            temp.val=s.top().val;</span><br><span class=\"line\">            temp.<span class=\"built_in\">count</span>=s.top().<span class=\"built_in\">count</span>;</span><br><span class=\"line\">            <span class=\"built_in\">count</span>+=temp.<span class=\"built_in\">count</span>*(temp.<span class=\"built_in\">count</span>-<span class=\"number\">1</span>)/<span class=\"number\">2</span>+temp.<span class=\"built_in\">count</span>;</span><br><span class=\"line\">            s.pop();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!s.empty()) <span class=\"built_in\">count</span>+=temp.<span class=\"built_in\">count</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//数组元素小于栈顶元素的情况</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.empty()||mnode[i].val&lt;s.top().val) s.push(mnode[i]);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"comment\">//数组元素等于栈顶元素的情况</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            s.top().<span class=\"built_in\">count</span>+=mnode[i].<span class=\"built_in\">count</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//对最后的递减栈进行求解</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!s.empty())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        temp.val=s.top().val;</span><br><span class=\"line\">        temp.<span class=\"built_in\">count</span>=s.top().<span class=\"built_in\">count</span>;</span><br><span class=\"line\">        s.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.<span class=\"built_in\">size</span>()&gt;<span class=\"number\">1</span>)  <span class=\"built_in\">count</span>+=temp.<span class=\"built_in\">count</span>*(temp.<span class=\"built_in\">count</span>-<span class=\"number\">1</span>)/<span class=\"number\">2</span>+<span class=\"number\">2</span>*temp.<span class=\"built_in\">count</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s.<span class=\"built_in\">size</span>()==<span class=\"number\">0</span>) <span class=\"built_in\">count</span>+=temp.<span class=\"built_in\">count</span>*(temp.<span class=\"built_in\">count</span>-<span class=\"number\">1</span>)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"comment\">//堆栈中还剩一个值的情况</span></span><br><span class=\"line\">        &#123;   </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s.top().<span class=\"built_in\">count</span>==<span class=\"number\">1</span>) <span class=\"comment\">//如4，3，3，3</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">count</span>+=temp.<span class=\"built_in\">count</span>*(temp.<span class=\"built_in\">count</span>-<span class=\"number\">1</span>)/<span class=\"number\">2</span>+temp.<span class=\"built_in\">count</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"comment\">//如4,4，3，3，3</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">count</span>+=temp.<span class=\"built_in\">count</span>*(temp.<span class=\"built_in\">count</span>-<span class=\"number\">1</span>)/<span class=\"number\">2</span>+<span class=\"number\">2</span>*temp.<span class=\"built_in\">count</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"built_in\">count</span>&lt;&lt;<span class=\"literal\">endl</span>;</span><br><span class=\"line\">    return <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-思考与分析\"><a href=\"#6-思考与分析\" class=\"headerlink\" title=\"6.思考与分析\"></a>6.思考与分析</h3><ul>\n<li>解题的时候还是需要学会将大问题化解之后进行分析，分情况不断讨论，然后也就能分而解之，水到渠成。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>战争游戏的至关重要环节就要到来了，这次的结果将决定王国的生死存亡，小B负责首都的防卫工作。首都位于一个四面环山的盆地中，周围的n个小山构成一个环，作为预警措施，小B计划在每个小山上设置一个观察哨，日夜不停的瞭望周围发生的情况。 一旦发生外地入侵事件，山顶上的岗哨将点燃烽烟，若两个岗哨所在的山峰之间没有更高的山峰遮挡且两者之间有相连通路，则岗哨可以观察到另一个山峰上的烽烟是否点燃。由于小山处于环上，任意两个小山之间存在两个不同的连接通路。满足上述不遮挡的条件下，一座山峰上岗哨点燃的烽烟至少可以通过一条通路被另一端观察到。对于任意相邻的岗哨，一端的岗哨一定可以发现一端点燃的烽烟。 小B设计的这种保卫方案的一个重要特性是能够观测到对方烽烟的岗哨对的数量，她希望你能够帮她解决这个问题。<br>","more":"</p>\n<h2 id=\"保卫方案\"><a href=\"#保卫方案\" class=\"headerlink\" title=\"保卫方案\"></a>保卫方案</h2><hr>\n<blockquote>\n<p>题目原链接：<a href=\"https://www.nowcoder.com/practice/e1967ae812ea42e7a3ce57ee1f83b686?tpId=85&amp;tqId=29878&amp;rp=2&amp;ru=/activity/oj&amp;qru=/ta/2017test/question-ranking\" target=\"_blank\" rel=\"noopener\">https://www.nowcoder.com/practice/e1967ae812ea42e7a3ce57ee1f83b686?tpId=85&amp;tqId=29878&amp;rp=2&amp;ru=/activity/oj&amp;qru=/ta/2017test/question-ranking</a></p>\n</blockquote>\n<h3 id=\"1-题目描述\"><a href=\"#1-题目描述\" class=\"headerlink\" title=\"1.题目描述\"></a>1.题目描述</h3><p>战争游戏的至关重要环节就要到来了，这次的结果将决定王国的生死存亡，小B负责首都的防卫工作。首都位于一个四面环山的盆地中，周围的n个小山构成一个环，作为预警措施，小B计划在每个小山上设置一个观察哨，日夜不停的瞭望周围发生的情况。 一旦发生外地入侵事件，山顶上的岗哨将点燃烽烟，若两个岗哨所在的山峰之间没有更高的山峰遮挡且两者之间有相连通路，则岗哨可以观察到另一个山峰上的烽烟是否点燃。由于小山处于环上，任意两个小山之间存在两个不同的连接通路。满足上述不遮挡的条件下，一座山峰上岗哨点燃的烽烟至少可以通过一条通路被另一端观察到。对于任意相邻的岗哨，一端的岗哨一定可以发现一端点燃的烽烟。 小B设计的这种保卫方案的一个重要特性是能够观测到对方烽烟的岗哨对的数量，她希望你能够帮她解决这个问题。</p>\n<h3 id=\"2-输入描述\"><a href=\"#2-输入描述\" class=\"headerlink\" title=\"2.输入描述\"></a>2.输入描述</h3><blockquote>\n<p>输入中有多组测试数据，每一组测试数据的第一行为一个整数n(3&lt;=n&lt;=10^6),为首都周围的小山数量，第二行为n个整数，依次表示为小山的高度h（1&lt;=h&lt;=10^9）.</p>\n</blockquote>\n<h3 id=\"3-输出描述\"><a href=\"#3-输出描述\" class=\"headerlink\" title=\"3.输出描述\"></a>3.输出描述</h3><blockquote>\n<p>对每组测试数据，在单独的一行中输出能相互观察到的岗哨的对数。</p>\n</blockquote>\n<h3 id=\"4-示例\"><a href=\"#4-示例\" class=\"headerlink\" title=\"4.示例\"></a>4.示例</h3><p>输入<br><figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"symbol\">1 </span><span class=\"number\">2</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure></p>\n<p>输出<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">7</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"5-解题思路\"><a href=\"#5-解题思路\" class=\"headerlink\" title=\"5.解题思路\"></a>5.解题思路</h3><p>这个题想了好长时间，但是一直没想出来怎么做，参考了大神的解体思路后，总算想清楚了，原链接如下：<a href=\"http://www.cnblogs.com/mengmz/p/7263915.html。\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/mengmz/p/7263915.html。</a></p>\n<p>分析题目可知，对于山峰a,如果能在它的左边和右边分别找到最近且比它大的b和c，那么b能看到a，a能看到c，即整体计数对应加2。那么题目可以分为如下两种情况进行讨论：  </p>\n<ul>\n<li>对于数组中无重复数字出现的情况，在构成环的全部元素当中，最大值和次大值只有一边存在比它大的数，但能彼此看到，故计数值加1。除了这两个元素外，剩下的n-2个元素都能在左边和右边分别找到比它大的数，故计数值加（n-1）<em>2。即总的结果为：1+（n-2）</em>2。      </li>\n<li>对于有重复数字出现的情况，假设有一组序列为a,a,b,b,b,c,c且a&gt;b,c&gt;b。a,b,c分别出现的次数为2,3,2，b各元素能互相看见，故b自身能构成的组合数为：c(3,2)=3<em>(3-2)/2。同时所有的b都能看到最后一个a和第一个c，所以计数值加3+3。如果用N1,N2,N3分别表示a,b,c出现的话，则总的结果为：c(N2,2)+2</em>N2;</li>\n</ul>\n<p>分析完两种情况后，现在我们需要求出每一个数和两边大于这个数的情况，采用单调栈来解决，具体求解过程如下: </p>\n<ul>\n<li>（1）读取所有数据，放入数组V，计数值count=0。</li>\n<li>（2）新建数组P，遍历数组V，将V中的元素消除重复后放入P中，并记录下每个元素重复的次数。同时找出最大的元素max和其在P中下标max_i。</li>\n<li>（3）创建堆栈S，然后从max_i开始遍历所有P中元素。进行如下操作：<blockquote>\n<ul>\n<li>若堆栈为空， 将P[i]直接压入堆栈；   </li>\n<li>若堆栈为非空，将P[i]与栈顶元素进行比较，如果大于栈顶元素，count加上栈顶元素的组合数（重复数N,组合数为c(N,2)+N,注意此时只考虑栈顶元素和P[i]的组合数），然后弹出栈顶元素，若栈不为空，则弹出的数和栈顶数也有组合数，count加弹出数的重复数N，执行本步骤一直弹出直到P[i]小于栈顶元素；</li>\n<li>若等于栈顶元素，栈顶元素的重复数+P[i]的重复数，继续执行；</li>\n<li>若小于栈顶元素，直接压入；</li>\n</ul>\n</blockquote>\n</li>\n<li>(4)上个步骤结束后，得到一个递减的堆栈。依次弹出栈顶元素到temp，直到堆栈为空，count加上其组合数目,这个时候要考虑以下情况：<blockquote>\n<ul>\n<li>堆栈中剩余元素个数多于1,则temp的组合数为c(N,2)+N*2。   </li>\n<li>堆栈中的剩余元素个数为1，若剩余元素的重复次数n大于1，则temp的组合数为c(N,2)+N*2（如4,4,3,3,3序列，所有的3能看到第一个4和最后一个4）；若剩余的重复次数为1，则temp的组合数为c(N,2)+N（如4,3,3,3序列）</li>\n<li>堆栈中的剩余元素个数为0，此时temp为最大值，组合数跟其重复次数N有关,为c(N,2)；   </li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"6-实现代码\"><a href=\"#6-实现代码\" class=\"headerlink\" title=\"6.实现代码\"></a>6.实现代码</h3><figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stack&gt;</span></span></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用结构体来保存每个山峰的高度，和重复的次数</span></span><br><span class=\"line\">struct node&#123;</span><br><span class=\"line\">    int val;</span><br><span class=\"line\">    long <span class=\"built_in\">count</span>;</span><br><span class=\"line\">    node(int v,int c=<span class=\"number\">1</span>): val(v),<span class=\"built_in\">count</span>(c)&#123;&#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int n,value,i,<span class=\"built_in\">max</span>,max_i;</span><br><span class=\"line\">    long <span class=\"built_in\">count</span>=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    </span><br><span class=\"line\">    vector&lt;int&gt; mountin(n);</span><br><span class=\"line\">    vector&lt;node&gt; mnode;<span class=\"comment\">//去重和计数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin&gt;&gt;mountin[i];<span class=\"comment\">//依次获取每个山峰的值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    node temp(mountin[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"built_in\">max</span>=mountin[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;n;i++)<span class=\"comment\">//去重和寻找最大值</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mountin[i]==temp.val)<span class=\"comment\">//若重复</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            temp.<span class=\"built_in\">count</span>++;<span class=\"comment\">//计数</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>  </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            mnode.push_back(temp);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">max</span>&lt;temp.val)<span class=\"comment\">//获取最大峰值和对应下标</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">max</span>=temp.val;</span><br><span class=\"line\">                max_i=mnode.<span class=\"built_in\">size</span>()-<span class=\"number\">1</span>;<span class=\"comment\">//注意，这里获取的去重后的下标</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp.val=mountin[i];</span><br><span class=\"line\">            temp.<span class=\"built_in\">count</span>=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    mnode.push_back(temp);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">max</span>&lt;temp.val)<span class=\"comment\">//获取最大峰值和对应下标</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">max</span>=temp.val;</span><br><span class=\"line\">        max_i=mnode.<span class=\"built_in\">size</span>()-<span class=\"number\">1</span>;<span class=\"comment\">//注意，这里获取的去重后的下标</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    stack&lt;node&gt; s;</span><br><span class=\"line\">    n=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=max_i;n&lt;mnode.<span class=\"built_in\">size</span>();++n,i=(i+<span class=\"number\">1</span>)%mnode.<span class=\"built_in\">size</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!s.empty() &amp;&amp; mnode[i].val&gt;s.top().val)</span><br><span class=\"line\">        &#123;   <span class=\"comment\">//数组元素大于栈顶元素的情况</span></span><br><span class=\"line\">            temp.val=s.top().val;</span><br><span class=\"line\">            temp.<span class=\"built_in\">count</span>=s.top().<span class=\"built_in\">count</span>;</span><br><span class=\"line\">            <span class=\"built_in\">count</span>+=temp.<span class=\"built_in\">count</span>*(temp.<span class=\"built_in\">count</span>-<span class=\"number\">1</span>)/<span class=\"number\">2</span>+temp.<span class=\"built_in\">count</span>;</span><br><span class=\"line\">            s.pop();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!s.empty()) <span class=\"built_in\">count</span>+=temp.<span class=\"built_in\">count</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//数组元素小于栈顶元素的情况</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.empty()||mnode[i].val&lt;s.top().val) s.push(mnode[i]);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"comment\">//数组元素等于栈顶元素的情况</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            s.top().<span class=\"built_in\">count</span>+=mnode[i].<span class=\"built_in\">count</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//对最后的递减栈进行求解</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!s.empty())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        temp.val=s.top().val;</span><br><span class=\"line\">        temp.<span class=\"built_in\">count</span>=s.top().<span class=\"built_in\">count</span>;</span><br><span class=\"line\">        s.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.<span class=\"built_in\">size</span>()&gt;<span class=\"number\">1</span>)  <span class=\"built_in\">count</span>+=temp.<span class=\"built_in\">count</span>*(temp.<span class=\"built_in\">count</span>-<span class=\"number\">1</span>)/<span class=\"number\">2</span>+<span class=\"number\">2</span>*temp.<span class=\"built_in\">count</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s.<span class=\"built_in\">size</span>()==<span class=\"number\">0</span>) <span class=\"built_in\">count</span>+=temp.<span class=\"built_in\">count</span>*(temp.<span class=\"built_in\">count</span>-<span class=\"number\">1</span>)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"comment\">//堆栈中还剩一个值的情况</span></span><br><span class=\"line\">        &#123;   </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s.top().<span class=\"built_in\">count</span>==<span class=\"number\">1</span>) <span class=\"comment\">//如4，3，3，3</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">count</span>+=temp.<span class=\"built_in\">count</span>*(temp.<span class=\"built_in\">count</span>-<span class=\"number\">1</span>)/<span class=\"number\">2</span>+temp.<span class=\"built_in\">count</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"comment\">//如4,4，3，3，3</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">count</span>+=temp.<span class=\"built_in\">count</span>*(temp.<span class=\"built_in\">count</span>-<span class=\"number\">1</span>)/<span class=\"number\">2</span>+<span class=\"number\">2</span>*temp.<span class=\"built_in\">count</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"built_in\">count</span>&lt;&lt;<span class=\"literal\">endl</span>;</span><br><span class=\"line\">    return <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-思考与分析\"><a href=\"#6-思考与分析\" class=\"headerlink\" title=\"6.思考与分析\"></a>6.思考与分析</h3><ul>\n<li>解题的时候还是需要学会将大问题化解之后进行分析，分情况不断讨论，然后也就能分而解之，水到渠成。</li>\n</ul>"},{"title":"2.异或","date":"2019-05-16T08:44:12.000Z","toc":true,"comments":1,"_content":"\n给定整数m以及n各数字A1,A2,..An，将数列A中所有元素两两异或，共能得到n(n-1)/2个结果，请求出这些结果中大于m的有多少个。\n<!--more-->\n\n\n## 异或\n------------------------------------------------------------\n> 题目原链接：https://www.nowcoder.com/practice/fc05f68c5f47438db54c6923ef23cf4a?tpId=85&&tqId=29876&rp=3&ru=/activity/oj&qru=/ta/2017test/question-ranking\n\n### 1.题目描述   \n给定整数m以及n各数字A1,A2,..An，将数列A中所有元素两两异或，共能得到n(n-1)/2个结果，请求出这些结果中大于m的有多少个。\n\n### 2.输入描述\n> 第一行包含两个整数n,m.    \n第二行给出n个整数A1，A2，...，An。  \n数据范围:  \n对于30%的数据，1 <= n, m <= 1000    \n对于100%的数据，1 <= n, m, Ai <= 10^5\n\n### 3.输出描述\n> 输出仅包括一行，即所求的答案\n\n### 4.示例\n输入\n```\n3 10  \n6 5 10\n```\n输出\n```\n2\n```\n\n### 5.解题思路\n参考链接：https://blog.csdn.net/qq_30507287/article/details/68947863。\n\n考虑用字典树来解决该题，用示例中6、5、10来构建一颗如下字典树(虚线表示不用)：\n```\ngraph TB\nroot-->0\nroot-->1\n0-.->00(0)\n0-->01(1)\n01-->010(0)\n01-->011(1)\n011-->0110(0)\n011-.->0111(1)\n010-.->0100(0)\n010-->0101(1)\n1-->10(0)\n1-.->11(1)\n10-.->100(0)\n10-->101(1)\n101-->1000(0)\n101-.->1001(1)\n```\n从已有的数据中选一个数记为a，遍历该字典树（二叉树）,求所有与a异或大于m的数的个数，分情况讨论：\n* 如果a的当前位为0，m的当前位为0，那么明显父节点的右子树的所有数与a异或都大于m；但左子树不能确定，需要继续查询。\n* 如果a的当前位为1，m的当前位为0，那么明显父节点的左子树的所有数与a异或都大于m；但右子树不能确定，需要继续查询。\n* 如果a的当前位为0，m的当前位为1，那么明显父节点的左子树中的数和a异或一定小于m，查询结束；右子树的数不能确定，需要继续查询。\n* 如果a的当前位为1，m的当前位为1，那么明显父节点的右子树中的数和a异或一定小于m，查询结束；左子树的数不能确定，需要继续查询。\n\n\n具体求解过程如下: \n* （1）依次读取n,m,将n个数依次放入数组并且构建对应的字典树。\n* （2）获取获取数组中的数，查询字典树，计算与其异或值大于m的数的个数。\n* （3）得到的count除2，因为如果a\\^b大于m,那么b\\^a也会大于m。\n\n\n### 6.实现代码\n```\n*\n*@bref:暴力求解，好像是可以通过80%，果然暴力还是不行\n*\nint main()\n{\n    int n,m,i,j,result,count=0,*value;\n    cin>>n>>m;\n    value=new int[n];\n    \n    for(i=0;i<n;i++)\n    {\n        cin>>value[i];\n    }\n    for(i=0;i<n-1;i++)\n    {\n        for(j=i+1;j<n;j++)\n        {\n            result=value[i]^value[j];\n            if(result>m) count++;\n        }\n    }\n    cout<<count<<endl;\n    return 0;\n}\n```\n\n**能通过的解法：**\n```\n#include<iostream>\nusing namespace std;\n/*\n* @bref:参考了大神们的思路，服气\n*       了解字典树之后，理解这个题的解法就好多了\n*/\n\n//定义字典树节点\nclass trieTree\n{\n    public:\n      int num;\n      trieTree *son[2];\n    public:\n      trieTree(int num) \n      {\n          this->num=num;\n          son[0]=nullptr;\n          son[1]=nullptr;\n      }\n};\n\nint foo;\nstatic void insert(int a,trieTree *current)\n{\n    //插入每一个节点，17位所能表示的最大值位131071\n    for(int i=16;i>=0;i--)\n    {\n        foo=(a>>i)&1;//获取对应的位\n        if(current->son[foo] == nullptr)\n        {\n            current->son[foo]=new trieTree(0);\n        }\n        current=current->son[foo];\n        current->num++;//记数加1\n     }\n}\n\n//查询结果\nstatic int query(trieTree *root,int a,int m,int i)\n{\n    if(root==nullptr) return 0;\n    \n    trieTree *current=root; \n    int aDigit=(a>>i)&1;\n    int mDigit=(m>>i)&1;\n    if(aDigit==0 && mDigit==0)\n    {\n        int p=(current->son[1]==nullptr? 0:current->son[1]->num);\n        int q=query(current->son[0],a,m,i-1);\n        return p+q;\n    }\n    else if(aDigit==1 && mDigit==0)\n    {\n        int q=(current->son[0]==nullptr? 0:current->son[0]->num);\n        int p=query(current->son[1],a,m,i-1);\n        return p+q;\n    }\n    else if(aDigit==0 && mDigit==1)\n    {\n        if(current->son[1]==nullptr) return 0;\n        return query(current->son[1],a,m,i-1);\n    }\n    else if(aDigit==1 && mDigit==1)\n    {\n        if(current->son[0]==nullptr) return 0;\n        return query(current->son[0],a,m,i-1);\n    }\n    return 0;\n}\n\nint main()\n{\n    int m,n,*data;\n    long count=0;\n    trieTree root(-1);\n    \n    cin>>n>>m;\n    data=new int[n];\n\n    for(int i=0;i<n;i++)\n    {\n        cin>>data[i];\n        insert(data[i],&root);//将所有的数\n    }\n       \n    for(int i=0;i<n;i++)\n    {\n        count+=query(&root,data[i],m,16);\n    }\n    cout<<count/2<<endl;\n    return 0;\n}\n```\n\n### 6.思考与分析\n这种题目的第一思路是暴力求解，虽然很大概率是不行的，但不妨一试，能想出合理高效的求解方案不是每一个人都能做到的，问题的抽象能力、联想能力往往是解题的关键，常备知识，遇到问题才能直击痛点，庖丁解牛。   \n**在写这个题的时候，我自己实现了代码，但是感觉完全没问题，然后提交之后一直只通过80%，我后来花了将近两天的时间近乎一直在想这个题，最后突然灵光发现是用来存结果的count值是int型，而实际结果要大于int型所能表示的范围。真的服气.......我发誓以后存结果的数一定用long。**\n","source":"_posts/算法与数据结构/2.异或.md","raw":"---\ntitle: 2.异或\ndate: 2019-05-16 16:44:12\ntoc: true\ncomments: true\ntags:\n  - 字典树\n  - trie树\ncategories:\n  - 算法与数据结构\n---\n\n给定整数m以及n各数字A1,A2,..An，将数列A中所有元素两两异或，共能得到n(n-1)/2个结果，请求出这些结果中大于m的有多少个。\n<!--more-->\n\n\n## 异或\n------------------------------------------------------------\n> 题目原链接：https://www.nowcoder.com/practice/fc05f68c5f47438db54c6923ef23cf4a?tpId=85&&tqId=29876&rp=3&ru=/activity/oj&qru=/ta/2017test/question-ranking\n\n### 1.题目描述   \n给定整数m以及n各数字A1,A2,..An，将数列A中所有元素两两异或，共能得到n(n-1)/2个结果，请求出这些结果中大于m的有多少个。\n\n### 2.输入描述\n> 第一行包含两个整数n,m.    \n第二行给出n个整数A1，A2，...，An。  \n数据范围:  \n对于30%的数据，1 <= n, m <= 1000    \n对于100%的数据，1 <= n, m, Ai <= 10^5\n\n### 3.输出描述\n> 输出仅包括一行，即所求的答案\n\n### 4.示例\n输入\n```\n3 10  \n6 5 10\n```\n输出\n```\n2\n```\n\n### 5.解题思路\n参考链接：https://blog.csdn.net/qq_30507287/article/details/68947863。\n\n考虑用字典树来解决该题，用示例中6、5、10来构建一颗如下字典树(虚线表示不用)：\n```\ngraph TB\nroot-->0\nroot-->1\n0-.->00(0)\n0-->01(1)\n01-->010(0)\n01-->011(1)\n011-->0110(0)\n011-.->0111(1)\n010-.->0100(0)\n010-->0101(1)\n1-->10(0)\n1-.->11(1)\n10-.->100(0)\n10-->101(1)\n101-->1000(0)\n101-.->1001(1)\n```\n从已有的数据中选一个数记为a，遍历该字典树（二叉树）,求所有与a异或大于m的数的个数，分情况讨论：\n* 如果a的当前位为0，m的当前位为0，那么明显父节点的右子树的所有数与a异或都大于m；但左子树不能确定，需要继续查询。\n* 如果a的当前位为1，m的当前位为0，那么明显父节点的左子树的所有数与a异或都大于m；但右子树不能确定，需要继续查询。\n* 如果a的当前位为0，m的当前位为1，那么明显父节点的左子树中的数和a异或一定小于m，查询结束；右子树的数不能确定，需要继续查询。\n* 如果a的当前位为1，m的当前位为1，那么明显父节点的右子树中的数和a异或一定小于m，查询结束；左子树的数不能确定，需要继续查询。\n\n\n具体求解过程如下: \n* （1）依次读取n,m,将n个数依次放入数组并且构建对应的字典树。\n* （2）获取获取数组中的数，查询字典树，计算与其异或值大于m的数的个数。\n* （3）得到的count除2，因为如果a\\^b大于m,那么b\\^a也会大于m。\n\n\n### 6.实现代码\n```\n*\n*@bref:暴力求解，好像是可以通过80%，果然暴力还是不行\n*\nint main()\n{\n    int n,m,i,j,result,count=0,*value;\n    cin>>n>>m;\n    value=new int[n];\n    \n    for(i=0;i<n;i++)\n    {\n        cin>>value[i];\n    }\n    for(i=0;i<n-1;i++)\n    {\n        for(j=i+1;j<n;j++)\n        {\n            result=value[i]^value[j];\n            if(result>m) count++;\n        }\n    }\n    cout<<count<<endl;\n    return 0;\n}\n```\n\n**能通过的解法：**\n```\n#include<iostream>\nusing namespace std;\n/*\n* @bref:参考了大神们的思路，服气\n*       了解字典树之后，理解这个题的解法就好多了\n*/\n\n//定义字典树节点\nclass trieTree\n{\n    public:\n      int num;\n      trieTree *son[2];\n    public:\n      trieTree(int num) \n      {\n          this->num=num;\n          son[0]=nullptr;\n          son[1]=nullptr;\n      }\n};\n\nint foo;\nstatic void insert(int a,trieTree *current)\n{\n    //插入每一个节点，17位所能表示的最大值位131071\n    for(int i=16;i>=0;i--)\n    {\n        foo=(a>>i)&1;//获取对应的位\n        if(current->son[foo] == nullptr)\n        {\n            current->son[foo]=new trieTree(0);\n        }\n        current=current->son[foo];\n        current->num++;//记数加1\n     }\n}\n\n//查询结果\nstatic int query(trieTree *root,int a,int m,int i)\n{\n    if(root==nullptr) return 0;\n    \n    trieTree *current=root; \n    int aDigit=(a>>i)&1;\n    int mDigit=(m>>i)&1;\n    if(aDigit==0 && mDigit==0)\n    {\n        int p=(current->son[1]==nullptr? 0:current->son[1]->num);\n        int q=query(current->son[0],a,m,i-1);\n        return p+q;\n    }\n    else if(aDigit==1 && mDigit==0)\n    {\n        int q=(current->son[0]==nullptr? 0:current->son[0]->num);\n        int p=query(current->son[1],a,m,i-1);\n        return p+q;\n    }\n    else if(aDigit==0 && mDigit==1)\n    {\n        if(current->son[1]==nullptr) return 0;\n        return query(current->son[1],a,m,i-1);\n    }\n    else if(aDigit==1 && mDigit==1)\n    {\n        if(current->son[0]==nullptr) return 0;\n        return query(current->son[0],a,m,i-1);\n    }\n    return 0;\n}\n\nint main()\n{\n    int m,n,*data;\n    long count=0;\n    trieTree root(-1);\n    \n    cin>>n>>m;\n    data=new int[n];\n\n    for(int i=0;i<n;i++)\n    {\n        cin>>data[i];\n        insert(data[i],&root);//将所有的数\n    }\n       \n    for(int i=0;i<n;i++)\n    {\n        count+=query(&root,data[i],m,16);\n    }\n    cout<<count/2<<endl;\n    return 0;\n}\n```\n\n### 6.思考与分析\n这种题目的第一思路是暴力求解，虽然很大概率是不行的，但不妨一试，能想出合理高效的求解方案不是每一个人都能做到的，问题的抽象能力、联想能力往往是解题的关键，常备知识，遇到问题才能直击痛点，庖丁解牛。   \n**在写这个题的时候，我自己实现了代码，但是感觉完全没问题，然后提交之后一直只通过80%，我后来花了将近两天的时间近乎一直在想这个题，最后突然灵光发现是用来存结果的count值是int型，而实际结果要大于int型所能表示的范围。真的服气.......我发誓以后存结果的数一定用long。**\n","slug":"算法与数据结构/2.异或","published":1,"updated":"2019-05-16T09:34:33.671Z","_id":"cjvqga0qr000m79jxzxayk2ww","layout":"post","photos":[],"link":"","content":"<p>给定整数m以及n各数字A1,A2,..An，将数列A中所有元素两两异或，共能得到n(n-1)/2个结果，请求出这些结果中大于m的有多少个。<br><a id=\"more\"></a></p>\n<h2 id=\"异或\"><a href=\"#异或\" class=\"headerlink\" title=\"异或\"></a>异或</h2><hr>\n<blockquote>\n<p>题目原链接：<a href=\"https://www.nowcoder.com/practice/fc05f68c5f47438db54c6923ef23cf4a?tpId=85&amp;&amp;tqId=29876&amp;rp=3&amp;ru=/activity/oj&amp;qru=/ta/2017test/question-ranking\" target=\"_blank\" rel=\"noopener\">https://www.nowcoder.com/practice/fc05f68c5f47438db54c6923ef23cf4a?tpId=85&amp;&amp;tqId=29876&amp;rp=3&amp;ru=/activity/oj&amp;qru=/ta/2017test/question-ranking</a></p>\n</blockquote>\n<h3 id=\"1-题目描述\"><a href=\"#1-题目描述\" class=\"headerlink\" title=\"1.题目描述\"></a>1.题目描述</h3><p>给定整数m以及n各数字A1,A2,..An，将数列A中所有元素两两异或，共能得到n(n-1)/2个结果，请求出这些结果中大于m的有多少个。</p>\n<h3 id=\"2-输入描述\"><a href=\"#2-输入描述\" class=\"headerlink\" title=\"2.输入描述\"></a>2.输入描述</h3><blockquote>\n<p>第一行包含两个整数n,m.<br>第二行给出n个整数A1，A2，…，An。<br>数据范围:<br>对于30%的数据，1 &lt;= n, m &lt;= 1000<br>对于100%的数据，1 &lt;= n, m, Ai &lt;= 10^5</p>\n</blockquote>\n<h3 id=\"3-输出描述\"><a href=\"#3-输出描述\" class=\"headerlink\" title=\"3.输出描述\"></a>3.输出描述</h3><blockquote>\n<p>输出仅包括一行，即所求的答案</p>\n</blockquote>\n<h3 id=\"4-示例\"><a href=\"#4-示例\" class=\"headerlink\" title=\"4.示例\"></a>4.示例</h3><p>输入<br><figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">3 </span><span class=\"number\">10</span>  </span><br><span class=\"line\"><span class=\"symbol\">6 </span><span class=\"number\">5</span> <span class=\"number\">10</span></span><br></pre></td></tr></table></figure></p>\n<p>输出<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"5-解题思路\"><a href=\"#5-解题思路\" class=\"headerlink\" title=\"5.解题思路\"></a>5.解题思路</h3><p>参考链接：<a href=\"https://blog.csdn.net/qq_30507287/article/details/68947863。\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_30507287/article/details/68947863。</a></p>\n<p>考虑用字典树来解决该题，用示例中6、5、10来构建一颗如下字典树(虚线表示不用)：<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TB</span><br><span class=\"line\">root--&gt;<span class=\"number\">0</span></span><br><span class=\"line\">root--&gt;<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">0</span>-.-&gt;<span class=\"number\">00</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"number\">0</span>--&gt;<span class=\"number\">01</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"number\">01</span>--&gt;<span class=\"number\">010</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"number\">01</span>--&gt;<span class=\"number\">011</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"number\">011</span>--&gt;<span class=\"number\">0110</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"number\">011</span>-.-&gt;<span class=\"number\">0111</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"number\">010</span>-.-&gt;<span class=\"number\">0100</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"number\">010</span>--&gt;<span class=\"number\">0101</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"number\">1</span>--&gt;<span class=\"number\">10</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"number\">1</span>-.-&gt;<span class=\"number\">11</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"number\">10</span>-.-&gt;<span class=\"number\">100</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"number\">10</span>--&gt;<span class=\"number\">101</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"number\">101</span>--&gt;<span class=\"number\">1000</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"number\">101</span>-.-&gt;<span class=\"number\">1001</span>(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure></p>\n<p>从已有的数据中选一个数记为a，遍历该字典树（二叉树）,求所有与a异或大于m的数的个数，分情况讨论：</p>\n<ul>\n<li>如果a的当前位为0，m的当前位为0，那么明显父节点的右子树的所有数与a异或都大于m；但左子树不能确定，需要继续查询。</li>\n<li>如果a的当前位为1，m的当前位为0，那么明显父节点的左子树的所有数与a异或都大于m；但右子树不能确定，需要继续查询。</li>\n<li>如果a的当前位为0，m的当前位为1，那么明显父节点的左子树中的数和a异或一定小于m，查询结束；右子树的数不能确定，需要继续查询。</li>\n<li>如果a的当前位为1，m的当前位为1，那么明显父节点的右子树中的数和a异或一定小于m，查询结束；左子树的数不能确定，需要继续查询。</li>\n</ul>\n<p>具体求解过程如下: </p>\n<ul>\n<li>（1）依次读取n,m,将n个数依次放入数组并且构建对应的字典树。</li>\n<li>（2）获取获取数组中的数，查询字典树，计算与其异或值大于m的数的个数。</li>\n<li>（3）得到的count除2，因为如果a\\^b大于m,那么b\\^a也会大于m。</li>\n</ul>\n<h3 id=\"6-实现代码\"><a href=\"#6-实现代码\" class=\"headerlink\" title=\"6.实现代码\"></a>6.实现代码</h3><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*</span><br><span class=\"line\">*@bref:暴力求解，好像是可以通过<span class=\"number\">80</span><span class=\"comment\">%，果然暴力还是不行</span></span><br><span class=\"line\">*</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int n,m,<span class=\"built_in\">i</span>,<span class=\"built_in\">j</span>,result,count=<span class=\"number\">0</span>,*value;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    value=new int[n];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"built_in\">i</span>=<span class=\"number\">0</span>;<span class=\"built_in\">i</span>&lt;n;<span class=\"built_in\">i</span>++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin&gt;&gt;value[<span class=\"built_in\">i</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"built_in\">i</span>=<span class=\"number\">0</span>;<span class=\"built_in\">i</span>&lt;n<span class=\"number\">-1</span>;<span class=\"built_in\">i</span>++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">j</span>=<span class=\"built_in\">i</span>+<span class=\"number\">1</span>;<span class=\"built_in\">j</span>&lt;n;<span class=\"built_in\">j</span>++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            result=value[<span class=\"built_in\">i</span>]^value[<span class=\"built_in\">j</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(result&gt;m) count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;count&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>能通过的解法：</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @bref:参考了大神们的思路，服气</span></span><br><span class=\"line\"><span class=\"comment\">*       了解字典树之后，理解这个题的解法就好多了</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义字典树节点</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">trieTree</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">      <span class=\"keyword\">int</span> num;</span><br><span class=\"line\">      trieTree *son[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">      trieTree(<span class=\"keyword\">int</span> num) </span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>-&gt;num=num;</span><br><span class=\"line\">          son[<span class=\"number\">0</span>]=<span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">          son[<span class=\"number\">1</span>]=<span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> foo;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> a,trieTree *current)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//插入每一个节点，17位所能表示的最大值位131071</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">16</span>;i&gt;=<span class=\"number\">0</span>;i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        foo=(a&gt;&gt;i)&amp;<span class=\"number\">1</span>;<span class=\"comment\">//获取对应的位</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(current-&gt;son[foo] == <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            current-&gt;son[foo]=<span class=\"keyword\">new</span> trieTree(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        current=current-&gt;son[foo];</span><br><span class=\"line\">        current-&gt;num++;<span class=\"comment\">//记数加1</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查询结果</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(trieTree *root,<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> m,<span class=\"keyword\">int</span> i)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root==<span class=\"literal\">nullptr</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    trieTree *current=root; </span><br><span class=\"line\">    <span class=\"keyword\">int</span> aDigit=(a&gt;&gt;i)&amp;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mDigit=(m&gt;&gt;i)&amp;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(aDigit==<span class=\"number\">0</span> &amp;&amp; mDigit==<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p=(current-&gt;son[<span class=\"number\">1</span>]==<span class=\"literal\">nullptr</span>? <span class=\"number\">0</span>:current-&gt;son[<span class=\"number\">1</span>]-&gt;num);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> q=query(current-&gt;son[<span class=\"number\">0</span>],a,m,i<span class=\"number\">-1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p+q;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(aDigit==<span class=\"number\">1</span> &amp;&amp; mDigit==<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> q=(current-&gt;son[<span class=\"number\">0</span>]==<span class=\"literal\">nullptr</span>? <span class=\"number\">0</span>:current-&gt;son[<span class=\"number\">0</span>]-&gt;num);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p=query(current-&gt;son[<span class=\"number\">1</span>],a,m,i<span class=\"number\">-1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p+q;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(aDigit==<span class=\"number\">0</span> &amp;&amp; mDigit==<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(current-&gt;son[<span class=\"number\">1</span>]==<span class=\"literal\">nullptr</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(current-&gt;son[<span class=\"number\">1</span>],a,m,i<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(aDigit==<span class=\"number\">1</span> &amp;&amp; mDigit==<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(current-&gt;son[<span class=\"number\">0</span>]==<span class=\"literal\">nullptr</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(current-&gt;son[<span class=\"number\">0</span>],a,m,i<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m,n,*data;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> count=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\">trieTree <span class=\"title\">root</span><span class=\"params\">(<span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    data=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;data[i];</span><br><span class=\"line\">        insert(data[i],&amp;root);<span class=\"comment\">//将所有的数</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        count+=query(&amp;root,data[i],m,<span class=\"number\">16</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;count/<span class=\"number\">2</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"6-思考与分析\"><a href=\"#6-思考与分析\" class=\"headerlink\" title=\"6.思考与分析\"></a>6.思考与分析</h3><p>这种题目的第一思路是暴力求解，虽然很大概率是不行的，但不妨一试，能想出合理高效的求解方案不是每一个人都能做到的，问题的抽象能力、联想能力往往是解题的关键，常备知识，遇到问题才能直击痛点，庖丁解牛。<br><strong>在写这个题的时候，我自己实现了代码，但是感觉完全没问题，然后提交之后一直只通过80%，我后来花了将近两天的时间近乎一直在想这个题，最后突然灵光发现是用来存结果的count值是int型，而实际结果要大于int型所能表示的范围。真的服气…….我发誓以后存结果的数一定用long。</strong></p>\n","site":{"data":{}},"excerpt":"<p>给定整数m以及n各数字A1,A2,..An，将数列A中所有元素两两异或，共能得到n(n-1)/2个结果，请求出这些结果中大于m的有多少个。<br>","more":"</p>\n<h2 id=\"异或\"><a href=\"#异或\" class=\"headerlink\" title=\"异或\"></a>异或</h2><hr>\n<blockquote>\n<p>题目原链接：<a href=\"https://www.nowcoder.com/practice/fc05f68c5f47438db54c6923ef23cf4a?tpId=85&amp;&amp;tqId=29876&amp;rp=3&amp;ru=/activity/oj&amp;qru=/ta/2017test/question-ranking\" target=\"_blank\" rel=\"noopener\">https://www.nowcoder.com/practice/fc05f68c5f47438db54c6923ef23cf4a?tpId=85&amp;&amp;tqId=29876&amp;rp=3&amp;ru=/activity/oj&amp;qru=/ta/2017test/question-ranking</a></p>\n</blockquote>\n<h3 id=\"1-题目描述\"><a href=\"#1-题目描述\" class=\"headerlink\" title=\"1.题目描述\"></a>1.题目描述</h3><p>给定整数m以及n各数字A1,A2,..An，将数列A中所有元素两两异或，共能得到n(n-1)/2个结果，请求出这些结果中大于m的有多少个。</p>\n<h3 id=\"2-输入描述\"><a href=\"#2-输入描述\" class=\"headerlink\" title=\"2.输入描述\"></a>2.输入描述</h3><blockquote>\n<p>第一行包含两个整数n,m.<br>第二行给出n个整数A1，A2，…，An。<br>数据范围:<br>对于30%的数据，1 &lt;= n, m &lt;= 1000<br>对于100%的数据，1 &lt;= n, m, Ai &lt;= 10^5</p>\n</blockquote>\n<h3 id=\"3-输出描述\"><a href=\"#3-输出描述\" class=\"headerlink\" title=\"3.输出描述\"></a>3.输出描述</h3><blockquote>\n<p>输出仅包括一行，即所求的答案</p>\n</blockquote>\n<h3 id=\"4-示例\"><a href=\"#4-示例\" class=\"headerlink\" title=\"4.示例\"></a>4.示例</h3><p>输入<br><figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">3 </span><span class=\"number\">10</span>  </span><br><span class=\"line\"><span class=\"symbol\">6 </span><span class=\"number\">5</span> <span class=\"number\">10</span></span><br></pre></td></tr></table></figure></p>\n<p>输出<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"5-解题思路\"><a href=\"#5-解题思路\" class=\"headerlink\" title=\"5.解题思路\"></a>5.解题思路</h3><p>参考链接：<a href=\"https://blog.csdn.net/qq_30507287/article/details/68947863。\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_30507287/article/details/68947863。</a></p>\n<p>考虑用字典树来解决该题，用示例中6、5、10来构建一颗如下字典树(虚线表示不用)：<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TB</span><br><span class=\"line\">root--&gt;<span class=\"number\">0</span></span><br><span class=\"line\">root--&gt;<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">0</span>-.-&gt;<span class=\"number\">00</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"number\">0</span>--&gt;<span class=\"number\">01</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"number\">01</span>--&gt;<span class=\"number\">010</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"number\">01</span>--&gt;<span class=\"number\">011</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"number\">011</span>--&gt;<span class=\"number\">0110</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"number\">011</span>-.-&gt;<span class=\"number\">0111</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"number\">010</span>-.-&gt;<span class=\"number\">0100</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"number\">010</span>--&gt;<span class=\"number\">0101</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"number\">1</span>--&gt;<span class=\"number\">10</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"number\">1</span>-.-&gt;<span class=\"number\">11</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"number\">10</span>-.-&gt;<span class=\"number\">100</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"number\">10</span>--&gt;<span class=\"number\">101</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"number\">101</span>--&gt;<span class=\"number\">1000</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"number\">101</span>-.-&gt;<span class=\"number\">1001</span>(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure></p>\n<p>从已有的数据中选一个数记为a，遍历该字典树（二叉树）,求所有与a异或大于m的数的个数，分情况讨论：</p>\n<ul>\n<li>如果a的当前位为0，m的当前位为0，那么明显父节点的右子树的所有数与a异或都大于m；但左子树不能确定，需要继续查询。</li>\n<li>如果a的当前位为1，m的当前位为0，那么明显父节点的左子树的所有数与a异或都大于m；但右子树不能确定，需要继续查询。</li>\n<li>如果a的当前位为0，m的当前位为1，那么明显父节点的左子树中的数和a异或一定小于m，查询结束；右子树的数不能确定，需要继续查询。</li>\n<li>如果a的当前位为1，m的当前位为1，那么明显父节点的右子树中的数和a异或一定小于m，查询结束；左子树的数不能确定，需要继续查询。</li>\n</ul>\n<p>具体求解过程如下: </p>\n<ul>\n<li>（1）依次读取n,m,将n个数依次放入数组并且构建对应的字典树。</li>\n<li>（2）获取获取数组中的数，查询字典树，计算与其异或值大于m的数的个数。</li>\n<li>（3）得到的count除2，因为如果a\\^b大于m,那么b\\^a也会大于m。</li>\n</ul>\n<h3 id=\"6-实现代码\"><a href=\"#6-实现代码\" class=\"headerlink\" title=\"6.实现代码\"></a>6.实现代码</h3><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*</span><br><span class=\"line\">*@bref:暴力求解，好像是可以通过<span class=\"number\">80</span><span class=\"comment\">%，果然暴力还是不行</span></span><br><span class=\"line\">*</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int n,m,<span class=\"built_in\">i</span>,<span class=\"built_in\">j</span>,result,count=<span class=\"number\">0</span>,*value;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    value=new int[n];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"built_in\">i</span>=<span class=\"number\">0</span>;<span class=\"built_in\">i</span>&lt;n;<span class=\"built_in\">i</span>++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin&gt;&gt;value[<span class=\"built_in\">i</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"built_in\">i</span>=<span class=\"number\">0</span>;<span class=\"built_in\">i</span>&lt;n<span class=\"number\">-1</span>;<span class=\"built_in\">i</span>++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">j</span>=<span class=\"built_in\">i</span>+<span class=\"number\">1</span>;<span class=\"built_in\">j</span>&lt;n;<span class=\"built_in\">j</span>++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            result=value[<span class=\"built_in\">i</span>]^value[<span class=\"built_in\">j</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(result&gt;m) count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;count&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>能通过的解法：</strong><br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">* @bref:参考了大神们的思路，服气</span></span><br><span class=\"line\"><span class=\"comment\">*       了解字典树之后，理解这个题的解法就好多了</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义字典树节点</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">trieTree</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">      <span class=\"keyword\">int</span> num;</span><br><span class=\"line\">      trieTree *son[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">      trieTree(<span class=\"keyword\">int</span> num) </span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>-&gt;num=num;</span><br><span class=\"line\">          son[<span class=\"number\">0</span>]=<span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">          son[<span class=\"number\">1</span>]=<span class=\"literal\">nullptr</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> foo;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> a,trieTree *current)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//插入每一个节点，17位所能表示的最大值位131071</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">16</span>;i&gt;=<span class=\"number\">0</span>;i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        foo=(a&gt;&gt;i)&amp;<span class=\"number\">1</span>;<span class=\"comment\">//获取对应的位</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(current-&gt;son[foo] == <span class=\"literal\">nullptr</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            current-&gt;son[foo]=<span class=\"keyword\">new</span> trieTree(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        current=current-&gt;son[foo];</span><br><span class=\"line\">        current-&gt;num++;<span class=\"comment\">//记数加1</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查询结果</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(trieTree *root,<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> m,<span class=\"keyword\">int</span> i)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root==<span class=\"literal\">nullptr</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    trieTree *current=root; </span><br><span class=\"line\">    <span class=\"keyword\">int</span> aDigit=(a&gt;&gt;i)&amp;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mDigit=(m&gt;&gt;i)&amp;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(aDigit==<span class=\"number\">0</span> &amp;&amp; mDigit==<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p=(current-&gt;son[<span class=\"number\">1</span>]==<span class=\"literal\">nullptr</span>? <span class=\"number\">0</span>:current-&gt;son[<span class=\"number\">1</span>]-&gt;num);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> q=query(current-&gt;son[<span class=\"number\">0</span>],a,m,i<span class=\"number\">-1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p+q;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(aDigit==<span class=\"number\">1</span> &amp;&amp; mDigit==<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> q=(current-&gt;son[<span class=\"number\">0</span>]==<span class=\"literal\">nullptr</span>? <span class=\"number\">0</span>:current-&gt;son[<span class=\"number\">0</span>]-&gt;num);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p=query(current-&gt;son[<span class=\"number\">1</span>],a,m,i<span class=\"number\">-1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p+q;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(aDigit==<span class=\"number\">0</span> &amp;&amp; mDigit==<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(current-&gt;son[<span class=\"number\">1</span>]==<span class=\"literal\">nullptr</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(current-&gt;son[<span class=\"number\">1</span>],a,m,i<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(aDigit==<span class=\"number\">1</span> &amp;&amp; mDigit==<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(current-&gt;son[<span class=\"number\">0</span>]==<span class=\"literal\">nullptr</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(current-&gt;son[<span class=\"number\">0</span>],a,m,i<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m,n,*data;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> count=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\">trieTree <span class=\"title\">root</span><span class=\"params\">(<span class=\"number\">-1</span>)</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    data=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cin</span>&gt;&gt;data[i];</span><br><span class=\"line\">        insert(data[i],&amp;root);<span class=\"comment\">//将所有的数</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        count+=query(&amp;root,data[i],m,<span class=\"number\">16</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;count/<span class=\"number\">2</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"6-思考与分析\"><a href=\"#6-思考与分析\" class=\"headerlink\" title=\"6.思考与分析\"></a>6.思考与分析</h3><p>这种题目的第一思路是暴力求解，虽然很大概率是不行的，但不妨一试，能想出合理高效的求解方案不是每一个人都能做到的，问题的抽象能力、联想能力往往是解题的关键，常备知识，遇到问题才能直击痛点，庖丁解牛。<br><strong>在写这个题的时候，我自己实现了代码，但是感觉完全没问题，然后提交之后一直只通过80%，我后来花了将近两天的时间近乎一直在想这个题，最后突然灵光发现是用来存结果的count值是int型，而实际结果要大于int型所能表示的范围。真的服气…….我发誓以后存结果的数一定用long。</strong></p>"},{"title":"3.字典序","date":"2019-05-16T08:44:12.000Z","toc":true,"comments":1,"_content":"给定整数n和m, 将1到n的这n个整数按字典序排列之后, 求其中的第m个数。\n对于n=11, m=4, 按字典序排列依次为1, 10, 11, 2, 3, 4, 5, 6, 7, 8, 9, 因此第4个数是2. \n对于n=200, m=25, 按字典序排列依次为1 10 100 101 102 103 104 105 106 107 108 109 11 110 111 112 113 114 115 116 117 118 119 12 120 121 122 123 124 125 126 127 128 129 13 130 131 132 133 134 135 136 137 138 139 14 140 141 142 143 144 145 146 147 148 149 15 150 151 152 153 154 155 156 157 158 159 16 160 161 162 163 164 165 166 167 168 169 17 170 171 172 173 174 175 176 177 178 179 18 180 181 182 183 184 185 186 187 188 189 19 190 191 192 193 194 195 196 197 198 199 2 20 200 21 22 23 24 25 26 27 28 29 3 30 31 32 33 34 35 36 37 38 39 4 40 41 42 43 44 45 46 47 48 49 5 50 51 52 53 54 55 56 57 58 59 6 60 61 62 63 64 65 66 67 68 69 7 70 71 72 73 74 75 76 77 78 79 8 80 81 82 83 84 85 86 87 88 89 9 90 91 92 93 94 95 96 97 98 99 因此第25个数是120…\n<!--more-->\n\n## 字典序 \n------------------------------------------------------------\n> 题目原链接：https://www.nowcoder.com/practice/6c9d8d2e426c4c58bbadfdf67d591696?tpId=85&&tqId=29877&rp=3&ru=/activity/oj&qru=/ta/2017test/question-ranking\n\n### 1.题目描述   \n给定整数n和m, 将1到n的这n个整数按字典序排列之后, 求其中的第m个数。\n对于n=11, m=4, 按字典序排列依次为1, 10, 11, 2, 3, 4, 5, 6, 7, 8, 9, 因此第4个数是2. \n对于n=200, m=25, 按字典序排列依次为因此第25个数是120…\n\n### 2.输入描述\n> 输入仅包含两个整数n和m。\n数据范围:    \n对于20%的数据, 1 <= m <= n <= 5 ;    \n对于80%的数据, 1 <= m <= n <= 10^7 ;    \n对于100%的数据, 1 <= m <= n <= 10^18.\n\n### 3.输出描述\n> 输出仅包括一行, 即所求排列中的第m个数字.\n\n### 4.示例\n输入\n```\n11 4\n```\n输出\n```\n2\n```\n\n### 5.解题思路\n参考链接：https://www.nowcoder.com/questionTerminal/fc05f68c5f47438db54c6923ef23cf4a。   \n\n在具备字典树相关知识的基础上，不难想象如下字典树：\n```\ngraph TB\n1-->10\n1-->11\n1-->...\n1-->19\n2-->20\n2-->21\n2-->....\n10-->100\n10-->101\n10-->.....\n10-->109\n```\n由上图可知，需要计算每个节点所对应的子节点数，节点数就是上级节点*10，可知总的节点数= 1 + （1 * 10） + （1 * 10 * 10） + （1 * 10  * 10 * 10） +……，需要注意的是，节点的值必须小于等于n，所以大于n的值是必须去掉的。\n\n具体求解过程如下: \n* （1）记所求的第m个数为value=1，从start=value查找，end=value+1最为边界，m等于0时结束，value即为所求值。\n* （2）求start的子节点中值在n以内的子节点个数，记为count。\n* （3）比较count和m的大小：\n     > * 若count>m,则所求值在value的子节点中，value=value\\*10,m--；   \n     > * 若count<=m,则所求的值不在value的子节点中，value=value+1,m=m-count;\n     > * 回到第一步继续求值\n\n### 6.实现代码\n```\n#include <iostream>\nusing namespace std;\n \nint main()\n{\n    long m,n,start,end,value=1,count;\n    cin>>n>>m;\n    m--;//默认把当前点算入进来\n    while(m!=0)\n    {\n        start=value;\n        end=value+1;\n        count=0;\n        while(start<=n)//求出当前value的子树数\n        {\n            //求出当前一层，能算入的子树数目\n            count+=((n+1)>end?end:(n+1))-start;\n            start=start*10;//进入下一层\n            end=end*10;\n        }\n        if(count>m)\n        {\n            //当前value的子树数目大于m，所求节点在value的子树中\n            value=value*10;\n            m--;\n        }\n        else\n        {\n            //当前value的子树数目小于m,进入value+1继续寻找其子树\n            m=m-count;\n            value++;\n        }\n    }\n    cout<<value<<endl;\n    return 0;\n}\n```\n\n### 6.思考与分析\n* 代码不长，除了具备相应知识外，能静下心来慢慢理清思路并实现也是一种能力。","source":"_posts/算法与数据结构/3.字典序.md","raw":"---\ntitle: 3.字典序 \ndate: 2019-05-16 16:44:12\ntoc: true\ncomments: true\ntags:\n  - 字典树\n  - trie树\ncategories:\n  - 算法与数据结构\n---\n给定整数n和m, 将1到n的这n个整数按字典序排列之后, 求其中的第m个数。\n对于n=11, m=4, 按字典序排列依次为1, 10, 11, 2, 3, 4, 5, 6, 7, 8, 9, 因此第4个数是2. \n对于n=200, m=25, 按字典序排列依次为因此第25个数是120…\n<!--more-->\n\n## 字典序 \n------------------------------------------------------------\n> 题目原链接：https://www.nowcoder.com/practice/6c9d8d2e426c4c58bbadfdf67d591696?tpId=85&&tqId=29877&rp=3&ru=/activity/oj&qru=/ta/2017test/question-ranking\n\n### 1.题目描述   \n给定整数n和m, 将1到n的这n个整数按字典序排列之后, 求其中的第m个数。\n对于n=11, m=4, 按字典序排列依次为1, 10, 11, 2, 3, 4, 5, 6, 7, 8, 9, 因此第4个数是2. \n对于n=200, m=25, 按字典序排列依次为因此第25个数是120…\n\n### 2.输入描述\n> 输入仅包含两个整数n和m。\n数据范围:    \n对于20%的数据, 1 <= m <= n <= 5 ;    \n对于80%的数据, 1 <= m <= n <= 10^7 ;    \n对于100%的数据, 1 <= m <= n <= 10^18.\n\n### 3.输出描述\n> 输出仅包括一行, 即所求排列中的第m个数字.\n\n### 4.示例\n输入\n```\n11 4\n```\n输出\n```\n2\n```\n\n### 5.解题思路\n参考链接：https://www.nowcoder.com/questionTerminal/fc05f68c5f47438db54c6923ef23cf4a。   \n\n在具备字典树相关知识的基础上，不难想象如下字典树：\n```\ngraph TB\n1-->10\n1-->11\n1-->...\n1-->19\n2-->20\n2-->21\n2-->....\n10-->100\n10-->101\n10-->.....\n10-->109\n```\n由上图可知，需要计算每个节点所对应的子节点数，节点数就是上级节点*10，可知总的节点数= 1 + （1 * 10） + （1 * 10 * 10） + （1 * 10  * 10 * 10） +……，需要注意的是，节点的值必须小于等于n，所以大于n的值是必须去掉的。\n\n具体求解过程如下: \n* （1）记所求的第m个数为value=1，从start=value查找，end=value+1最为边界，m等于0时结束，value即为所求值。\n* （2）求start的子节点中值在n以内的子节点个数，记为count。\n* （3）比较count和m的大小：\n     > * 若count>m,则所求值在value的子节点中，value=value\\*10,m--；   \n     > * 若count<=m,则所求的值不在value的子节点中，value=value+1,m=m-count;\n     > * 回到第一步继续求值\n\n### 6.实现代码\n```\n#include <iostream>\nusing namespace std;\n \nint main()\n{\n    long m,n,start,end,value=1,count;\n    cin>>n>>m;\n    m--;//默认把当前点算入进来\n    while(m!=0)\n    {\n        start=value;\n        end=value+1;\n        count=0;\n        while(start<=n)//求出当前value的子树数\n        {\n            //求出当前一层，能算入的子树数目\n            count+=((n+1)>end?end:(n+1))-start;\n            start=start*10;//进入下一层\n            end=end*10;\n        }\n        if(count>m)\n        {\n            //当前value的子树数目大于m，所求节点在value的子树中\n            value=value*10;\n            m--;\n        }\n        else\n        {\n            //当前value的子树数目小于m,进入value+1继续寻找其子树\n            m=m-count;\n            value++;\n        }\n    }\n    cout<<value<<endl;\n    return 0;\n}\n```\n\n### 6.思考与分析\n* 代码不长，除了具备相应知识外，能静下心来慢慢理清思路并实现也是一种能力。","slug":"算法与数据结构/3.字典序","published":1,"updated":"2019-05-16T09:34:40.128Z","_id":"cjvqga0qs000r79jxgms617t1","layout":"post","photos":[],"link":"","content":"<p>给定整数n和m, 将1到n的这n个整数按字典序排列之后, 求其中的第m个数。<br>对于n=11, m=4, 按字典序排列依次为1, 10, 11, 2, 3, 4, 5, 6, 7, 8, 9, 因此第4个数是2.<br>对于n=200, m=25, 按字典序排列依次为因此第25个数是120…<br><a id=\"more\"></a></p>\n<h2 id=\"字典序\"><a href=\"#字典序\" class=\"headerlink\" title=\"字典序\"></a>字典序</h2><hr>\n<blockquote>\n<p>题目原链接：<a href=\"https://www.nowcoder.com/practice/6c9d8d2e426c4c58bbadfdf67d591696?tpId=85&amp;&amp;tqId=29877&amp;rp=3&amp;ru=/activity/oj&amp;qru=/ta/2017test/question-ranking\" target=\"_blank\" rel=\"noopener\">https://www.nowcoder.com/practice/6c9d8d2e426c4c58bbadfdf67d591696?tpId=85&amp;&amp;tqId=29877&amp;rp=3&amp;ru=/activity/oj&amp;qru=/ta/2017test/question-ranking</a></p>\n</blockquote>\n<h3 id=\"1-题目描述\"><a href=\"#1-题目描述\" class=\"headerlink\" title=\"1.题目描述\"></a>1.题目描述</h3><p>给定整数n和m, 将1到n的这n个整数按字典序排列之后, 求其中的第m个数。<br>对于n=11, m=4, 按字典序排列依次为1, 10, 11, 2, 3, 4, 5, 6, 7, 8, 9, 因此第4个数是2.<br>对于n=200, m=25, 按字典序排列依次为1 10 100 101 102 103 104 105 106 107 108 109 11 110 111 112 113 114 115 116 117 118 119 12 120 121 122 123 124 125 126 127 128 129 13 130 131 132 133 134 135 136 137 138 139 14 140 141 142 143 144 145 146 147 148 149 15 150 151 152 153 154 155 156 157 158 159 16 160 161 162 163 164 165 166 167 168 169 17 170 171 172 173 174 175 176 177 178 179 18 180 181 182 183 184 185 186 187 188 189 19 190 191 192 193 194 195 196 197 198 199 2 20 200 21 22 23 24 25 26 27 28 29 3 30 31 32 33 34 35 36 37 38 39 4 40 41 42 43 44 45 46 47 48 49 5 50 51 52 53 54 55 56 57 58 59 6 60 61 62 63 64 65 66 67 68 69 7 70 71 72 73 74 75 76 77 78 79 8 80 81 82 83 84 85 86 87 88 89 9 90 91 92 93 94 95 96 97 98 99 因此第25个数是120…</p>\n<h3 id=\"2-输入描述\"><a href=\"#2-输入描述\" class=\"headerlink\" title=\"2.输入描述\"></a>2.输入描述</h3><blockquote>\n<p>输入仅包含两个整数n和m。<br>数据范围:<br>对于20%的数据, 1 &lt;= m &lt;= n &lt;= 5 ;<br>对于80%的数据, 1 &lt;= m &lt;= n &lt;= 10^7 ;<br>对于100%的数据, 1 &lt;= m &lt;= n &lt;= 10^18.</p>\n</blockquote>\n<h3 id=\"3-输出描述\"><a href=\"#3-输出描述\" class=\"headerlink\" title=\"3.输出描述\"></a>3.输出描述</h3><blockquote>\n<p>输出仅包括一行, 即所求排列中的第m个数字.</p>\n</blockquote>\n<h3 id=\"4-示例\"><a href=\"#4-示例\" class=\"headerlink\" title=\"4.示例\"></a>4.示例</h3><p>输入<br><figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">11 </span><span class=\"number\">4</span></span><br></pre></td></tr></table></figure></p>\n<p>输出<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"5-解题思路\"><a href=\"#5-解题思路\" class=\"headerlink\" title=\"5.解题思路\"></a>5.解题思路</h3><p>参考链接：<a href=\"https://www.nowcoder.com/questionTerminal/fc05f68c5f47438db54c6923ef23cf4a。\" target=\"_blank\" rel=\"noopener\">https://www.nowcoder.com/questionTerminal/fc05f68c5f47438db54c6923ef23cf4a。</a>   </p>\n<p>在具备字典树相关知识的基础上，不难想象如下字典树：<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TB</span><br><span class=\"line\"><span class=\"number\">1</span>--&gt;<span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">1</span>--&gt;<span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"number\">1</span>--&gt;...</span><br><span class=\"line\"><span class=\"number\">1</span>--&gt;<span class=\"number\">19</span></span><br><span class=\"line\"><span class=\"number\">2</span>--&gt;<span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"number\">2</span>--&gt;<span class=\"number\">21</span></span><br><span class=\"line\"><span class=\"number\">2</span>--&gt;....</span><br><span class=\"line\"><span class=\"number\">10</span>--&gt;<span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"number\">10</span>--&gt;<span class=\"number\">101</span></span><br><span class=\"line\"><span class=\"number\">10</span>--&gt;.....</span><br><span class=\"line\"><span class=\"number\">10</span>--&gt;<span class=\"number\">109</span></span><br></pre></td></tr></table></figure></p>\n<p>由上图可知，需要计算每个节点所对应的子节点数，节点数就是上级节点<em>10，可知总的节点数= 1 + （1 </em> 10） + （1 <em> 10 </em> 10） + （1 <em> 10  </em> 10 * 10） +……，需要注意的是，节点的值必须小于等于n，所以大于n的值是必须去掉的。</p>\n<p>具体求解过程如下: </p>\n<ul>\n<li>（1）记所求的第m个数为value=1，从start=value查找，end=value+1最为边界，m等于0时结束，value即为所求值。</li>\n<li>（2）求start的子节点中值在n以内的子节点个数，记为count。</li>\n<li>（3）比较count和m的大小：<blockquote>\n<ul>\n<li>若count&gt;m,则所求值在value的子节点中，value=value*10,m–；   </li>\n<li>若count&lt;=m,则所求的值不在value的子节点中，value=value+1,m=m-count;</li>\n<li>回到第一步继续求值</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"6-实现代码\"><a href=\"#6-实现代码\" class=\"headerlink\" title=\"6.实现代码\"></a>6.实现代码</h3><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#<span class=\"keyword\">include</span> &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">int</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    long m,n,start,<span class=\"keyword\">end</span>,<span class=\"keyword\">value</span>=<span class=\"number\">1</span>,<span class=\"built_in\">count</span>;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    m--;//默认把当前点算入进来</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m<span class=\"comment\">!=0)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        start=<span class=\"keyword\">value</span>;</span><br><span class=\"line\">        <span class=\"keyword\">end</span>=<span class=\"keyword\">value</span>+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">count</span>=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(start&lt;=n)//求出当前<span class=\"keyword\">value</span>的子树数</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            //求出当前一层，能算入的子树数目</span><br><span class=\"line\">            <span class=\"built_in\">count</span>+=((n+<span class=\"number\">1</span>)&gt;<span class=\"keyword\">end</span>?<span class=\"keyword\">end</span>:(n+<span class=\"number\">1</span>))-start;</span><br><span class=\"line\">            start=start*<span class=\"number\">10</span>;//进入下一层</span><br><span class=\"line\">            <span class=\"keyword\">end</span>=<span class=\"keyword\">end</span>*<span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">count</span>&gt;m)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            //当前<span class=\"keyword\">value</span>的子树数目大于m，所求节点在<span class=\"keyword\">value</span>的子树中</span><br><span class=\"line\">            <span class=\"keyword\">value</span>=<span class=\"keyword\">value</span>*<span class=\"number\">10</span>;</span><br><span class=\"line\">            m--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            //当前<span class=\"keyword\">value</span>的子树数目小于m,进入<span class=\"keyword\">value</span>+<span class=\"number\">1</span>继续寻找其子树</span><br><span class=\"line\">            m=m-<span class=\"built_in\">count</span>;</span><br><span class=\"line\">            <span class=\"keyword\">value</span>++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"keyword\">value</span>&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-思考与分析\"><a href=\"#6-思考与分析\" class=\"headerlink\" title=\"6.思考与分析\"></a>6.思考与分析</h3><ul>\n<li>代码不长，除了具备相应知识外，能静下心来慢慢理清思路并实现也是一种能力。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>给定整数n和m, 将1到n的这n个整数按字典序排列之后, 求其中的第m个数。<br>对于n=11, m=4, 按字典序排列依次为1, 10, 11, 2, 3, 4, 5, 6, 7, 8, 9, 因此第4个数是2.<br>对于n=200, m=25, 按字典序排列依次为因此第25个数是120…<br>","more":"</p>\n<h2 id=\"字典序\"><a href=\"#字典序\" class=\"headerlink\" title=\"字典序\"></a>字典序</h2><hr>\n<blockquote>\n<p>题目原链接：<a href=\"https://www.nowcoder.com/practice/6c9d8d2e426c4c58bbadfdf67d591696?tpId=85&amp;&amp;tqId=29877&amp;rp=3&amp;ru=/activity/oj&amp;qru=/ta/2017test/question-ranking\" target=\"_blank\" rel=\"noopener\">https://www.nowcoder.com/practice/6c9d8d2e426c4c58bbadfdf67d591696?tpId=85&amp;&amp;tqId=29877&amp;rp=3&amp;ru=/activity/oj&amp;qru=/ta/2017test/question-ranking</a></p>\n</blockquote>\n<h3 id=\"1-题目描述\"><a href=\"#1-题目描述\" class=\"headerlink\" title=\"1.题目描述\"></a>1.题目描述</h3><p>给定整数n和m, 将1到n的这n个整数按字典序排列之后, 求其中的第m个数。<br>对于n=11, m=4, 按字典序排列依次为1, 10, 11, 2, 3, 4, 5, 6, 7, 8, 9, 因此第4个数是2.<br>对于n=200, m=25, 按字典序排列依次为因此第25个数是120…</p>\n<h3 id=\"2-输入描述\"><a href=\"#2-输入描述\" class=\"headerlink\" title=\"2.输入描述\"></a>2.输入描述</h3><blockquote>\n<p>输入仅包含两个整数n和m。<br>数据范围:<br>对于20%的数据, 1 &lt;= m &lt;= n &lt;= 5 ;<br>对于80%的数据, 1 &lt;= m &lt;= n &lt;= 10^7 ;<br>对于100%的数据, 1 &lt;= m &lt;= n &lt;= 10^18.</p>\n</blockquote>\n<h3 id=\"3-输出描述\"><a href=\"#3-输出描述\" class=\"headerlink\" title=\"3.输出描述\"></a>3.输出描述</h3><blockquote>\n<p>输出仅包括一行, 即所求排列中的第m个数字.</p>\n</blockquote>\n<h3 id=\"4-示例\"><a href=\"#4-示例\" class=\"headerlink\" title=\"4.示例\"></a>4.示例</h3><p>输入<br><figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">11 </span><span class=\"number\">4</span></span><br></pre></td></tr></table></figure></p>\n<p>输出<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"5-解题思路\"><a href=\"#5-解题思路\" class=\"headerlink\" title=\"5.解题思路\"></a>5.解题思路</h3><p>参考链接：<a href=\"https://www.nowcoder.com/questionTerminal/fc05f68c5f47438db54c6923ef23cf4a。\" target=\"_blank\" rel=\"noopener\">https://www.nowcoder.com/questionTerminal/fc05f68c5f47438db54c6923ef23cf4a。</a>   </p>\n<p>在具备字典树相关知识的基础上，不难想象如下字典树：<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TB</span><br><span class=\"line\"><span class=\"number\">1</span>--&gt;<span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">1</span>--&gt;<span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"number\">1</span>--&gt;...</span><br><span class=\"line\"><span class=\"number\">1</span>--&gt;<span class=\"number\">19</span></span><br><span class=\"line\"><span class=\"number\">2</span>--&gt;<span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"number\">2</span>--&gt;<span class=\"number\">21</span></span><br><span class=\"line\"><span class=\"number\">2</span>--&gt;....</span><br><span class=\"line\"><span class=\"number\">10</span>--&gt;<span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"number\">10</span>--&gt;<span class=\"number\">101</span></span><br><span class=\"line\"><span class=\"number\">10</span>--&gt;.....</span><br><span class=\"line\"><span class=\"number\">10</span>--&gt;<span class=\"number\">109</span></span><br></pre></td></tr></table></figure></p>\n<p>由上图可知，需要计算每个节点所对应的子节点数，节点数就是上级节点<em>10，可知总的节点数= 1 + （1 </em> 10） + （1 <em> 10 </em> 10） + （1 <em> 10  </em> 10 * 10） +……，需要注意的是，节点的值必须小于等于n，所以大于n的值是必须去掉的。</p>\n<p>具体求解过程如下: </p>\n<ul>\n<li>（1）记所求的第m个数为value=1，从start=value查找，end=value+1最为边界，m等于0时结束，value即为所求值。</li>\n<li>（2）求start的子节点中值在n以内的子节点个数，记为count。</li>\n<li>（3）比较count和m的大小：<blockquote>\n<ul>\n<li>若count&gt;m,则所求值在value的子节点中，value=value*10,m–；   </li>\n<li>若count&lt;=m,则所求的值不在value的子节点中，value=value+1,m=m-count;</li>\n<li>回到第一步继续求值</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"6-实现代码\"><a href=\"#6-实现代码\" class=\"headerlink\" title=\"6.实现代码\"></a>6.实现代码</h3><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#<span class=\"keyword\">include</span> &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">int</span> main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    long m,n,start,<span class=\"keyword\">end</span>,<span class=\"keyword\">value</span>=<span class=\"number\">1</span>,<span class=\"built_in\">count</span>;</span><br><span class=\"line\">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class=\"line\">    m--;//默认把当前点算入进来</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m<span class=\"comment\">!=0)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        start=<span class=\"keyword\">value</span>;</span><br><span class=\"line\">        <span class=\"keyword\">end</span>=<span class=\"keyword\">value</span>+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">count</span>=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(start&lt;=n)//求出当前<span class=\"keyword\">value</span>的子树数</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            //求出当前一层，能算入的子树数目</span><br><span class=\"line\">            <span class=\"built_in\">count</span>+=((n+<span class=\"number\">1</span>)&gt;<span class=\"keyword\">end</span>?<span class=\"keyword\">end</span>:(n+<span class=\"number\">1</span>))-start;</span><br><span class=\"line\">            start=start*<span class=\"number\">10</span>;//进入下一层</span><br><span class=\"line\">            <span class=\"keyword\">end</span>=<span class=\"keyword\">end</span>*<span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">count</span>&gt;m)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            //当前<span class=\"keyword\">value</span>的子树数目大于m，所求节点在<span class=\"keyword\">value</span>的子树中</span><br><span class=\"line\">            <span class=\"keyword\">value</span>=<span class=\"keyword\">value</span>*<span class=\"number\">10</span>;</span><br><span class=\"line\">            m--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            //当前<span class=\"keyword\">value</span>的子树数目小于m,进入<span class=\"keyword\">value</span>+<span class=\"number\">1</span>继续寻找其子树</span><br><span class=\"line\">            m=m-<span class=\"built_in\">count</span>;</span><br><span class=\"line\">            <span class=\"keyword\">value</span>++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"keyword\">value</span>&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-思考与分析\"><a href=\"#6-思考与分析\" class=\"headerlink\" title=\"6.思考与分析\"></a>6.思考与分析</h3><ul>\n<li>代码不长，除了具备相应知识外，能静下心来慢慢理清思路并实现也是一种能力。</li>\n</ul>"},{"title":"深入理解netfilter的核心原理与实现","date":"2019-05-16T08:44:12.000Z","toc":true,"comments":1,"_content":"\n本文旨在一探Iptables和Netfilter的关系，了解网络包经过网络协议栈的过程，从而对linux的防火墙机制有更深入的认识。\n<!--more-->\n\n### 1、Iptables和Netfilter的关系\niptables是用户用来管理和配置防火墙规则的一种策略，但是实际解析规则并按照规则实施产生作用的是Netfilter。\n\niptables与协议栈内有包过滤功能的hook交互来完成工作，这些内核hook构成了netfilter框架。每个进入网络系统的包（接收和发送）在经过协议栈的时候都会触发这些hook，程序可以通过**注册hook函数**的方式在一些关键路径上处理网络流量。iptables相关的内核模块在这些hook注册了处理函数，因此可以通过iptables规则来使得网络流量符合防火墙规则。\n\n### 2、Netfilter Hooks\nnetfilter提供了5个关于IPv4的hook点，数据包经过协议栈时会触发内核模块注册在这里的处理函数。触发哪个hook取决于包的方向（接收还是接收）、包的目的地址、以及包在上一个hook点是被丢弃还accept等等。\n\n下面几个hook是内核协议栈已经定义好的：\n* NF_IP_PRE_ROUTING: 接收到的包进入协议栈立即触发此个hook（刚刚进行完版本号，校验和等检测），在进行任何路由判断之前\n* NF_IP_LOCAL_IN: 接收到的包经过路由判断，如果目的是本机，将触发此hook\n* NF_IP_FORWARD: 接收到的包经过路由判断，如果目的是其他机器，将触发此hook\n* NF_IP_LOCAL_OUT：本机产生的准备发送的包，在进入协议栈后立即触发此hook\n* NF_IP_POST_ROUTING: 本机产生的准备发送的包或者转发的包，在经过路由的判断之后，将触发此hook\n\n注册处理函数时必须提供优先级，以便hook触发能按照优先级高低调用处理函数，这使得多个模块可以在同一个hook点注册，并且有确定的处理顺序，内核模块会依次被调用，每次返回一个结果给netfilter框架，提示该对这包做什么操作。\n\n### 3、Hooks和Iptables table and chain的关系\nIptable使用table来组织规则，分为以下5类table：\n* Filter Table：是最常用的table之一，用于判断是否允许一个包通过。\n* NAT Table: 用于实现网络地址转换规则。当包进入协议栈的时候，这些规则决定是否以及如何修改包的源/目的地址，以改变包被 路由时的行为。nat table通常用于将包路由到无法直接访问的网络。\n* Mangle Table: 用于修改包的IP头。如可以修改包的TTL，增加或减少包可以经过的跳数。还可以对包打只在内核内有效的“标记”，后续的table或工具处理的时候可以用到这些标记。标记不会修改包本身，只是在包的内核表示上做标记。\n* Raw Table：其功能非常有限，其唯一目的就是提供一个让包绕过连接跟踪的框架。\n* Security Table：作用是给包打上SELinux标记，以此影响SELinux 或其他可以解读 SELinux 安全上下文的系统处理包的行为。这些标记可以基于单个包，也可以基于连接。\n\n在每个table内部，规则被进一步组织成chain，内置的chain是由内置的hook触发的。chain基本上能决定规则何时被匹配。内置的chain名字和netfilter hook名字是一一对应的：\n- PREROUTING: 由 NF_IP_PRE_ROUTING hook触发 ——————> raw,mangle,nat(目的)\n- INPUT: 由 NF_IP_LOCAL_IN hook触发 ——————> mangle,filter,security,nat(源)\n- FORWARD: 由 NF_IP_FORWARD hook触发 ——————> mangle,filter,security\n- OUTPUT: 由 NF_IP_LOCAL_OUT hook触发 ——————> raw,mangle,nat,filter,security,nat(源)\n- POSTROUTING: 由 NF_IP_POST_ROUTING hook触发 ——————> mangle，nat(源)\n\nchain使管理员可以控制在包的传输路径上哪个点应用策略。因为每个table有多个chain，因此一个 table可以在处理过程中的多个地方施加影响。特定类型的规则只在协议栈的特定点有意义，因此并不是每个table都会在内核的每个hook注册chain。可以看出raw table只有两个链prerouting和output，分别在对应的hook点发挥作用。\n\n![image](https://github.com/WenDeng/Picture_markdown/blob/master/picture/1.jpg?raw=true)\n\n### 4、从IP协议栈入手\n要想理解Netfilter的工作原理，必须从对Linux IP报文处理流程的分析开始，Netfilter正是将自己紧密地构建在这一流程之中的。\n\n![image](https://github.com/WenDeng/Picture_markdown/blob/master/picture/2.jpg?raw=true)\n\n#### 4.1 接收中断\n如果网卡收到一个和自己MAC地址匹配或链路层广播的以太网帧，它就会产生一个中断。此网卡的驱动程序会处理此中断做入下处理：\n- 从DMA/PIO或其他地方得到分组数据，写到内存里去；\n- 接着，会分配一个新的套接字缓冲区skb，并调用与协议无关的、网络设备均支持的通用网络接收处理函数netif\\_rx(skb)。netif_rx()函数让内核准备进一步处理skb。\n- 然后，skb会进入到达队列以便CPU处理（对于多核CPU而言，每个CPU维护一个队列）。如果FIFO队列已满，就会丢弃此分组。在skb排队后，调用\\_\\_cpu\\_raise\\_softirq()标记NET\\_RX\\_SOFTIRQ 软中断，等待 CPU 执行。\n- 至此， netif_rx() 函数调用结束，返回调用者状况信息（成功还是失败等）。此时，中断上下文进程完成任务，数据分组继续被上层协议栈处理。\n\n流程：网卡收到一帧————>引发中断————>cpu调用相应的中断处理函数（指向此网卡驱动中的相应的处理函数）（把此packet读到ram中）————>呼叫netif\\_rx函数来打上timestamp，并把此skb放入到cpu设置的队列中————>标记软中断（\\_\\_cpu\\_raise_softirq）————>中断完成。 \n\n#### 4.2 softirq\n内核2.4以后，整个协议栈不再使用bottom half，而是被软中断softirq取代。软中断 softirq优势明显，可以同时在多个CPU上执行；而bottom half一次只能在一个CPU上执行，即在多个CPU执行时严格保持串行。\n\n整个softirq机制的设计与实现中自始自终都贯彻了一个思想：“谁触发，谁执行 ”，也即触发软中断的那个CPU负责执行它所触发的软中断，而且每个CPU都由它自己的软中断触发与控制机制。这个设计思想也使得softirq机制充分利用了SMP系统的性能和特点。\n\n#### 4.3 NET_RX_SOFTIRQ 网络接收软中断\n这一阶段会根据协议的不同来处理数据分组。 CPU开始处理软中断do\\_softirq()，接着 net\\_rx\\_action() 处理前面标记的NET\\_RX\\_SOFTIRQ ，把出对列的skb送入相应列表处理（根据协议不同到不同的列表）。比如，IP分组交给 ip\\_rcv()处理， ARP分组交给arp\\_rcv()处理等。\n\n\n\n#### 4.4 处理IPv4分组\n下面讲讲数据包到达网络层后所做的处理，整理流程如下图，从图中可以看到netfilter起作用的5个hooks。\n\n![image](https://github.com/WenDeng/Picture_markdown/blob/master/picture/3.jpg?raw=true)\n\n##### 4.4.1 上述处理的详细过程如下：\n- ip\\_rcv()函数验证IP分组，比如目的地址是否本机地址，校验和是否正确等。若正确，**则交给netfilter的NF\\_IP\\_PRE_ROUTING钩子**,否则丢弃。\n- 到了ip\\_rcv\\_finish()函数，数据包就要根据skb结构的目的或路由信息各奔东西了。**ip\\_local\\_deliver**()处理到本机的数据分组、**ip\\_forward**()处理需要转发的数据分组、**ip\\_mr\\_input**()转发组播数据包。如果是转发的数据包，还需要找出出口设备和下一跳。ip\\_rcv\\_finish()函数最后执行dst_input()，决定数据包的下一步的处理。\n\n##### 4.4.2 转发数据包\n转发数据包的主要流程如下：\n- 处理IP头选项。如果需要的话，会记录本地IP地址和时间戳；\n- 确认分组可以被转发；\n- 将TTL减一，如果TTL为0 ，则丢弃分组；\n- 根据 MTU 大小和路由信息，对数据分组进行分片，如果需要的话；\n- 将数据分组送往外出设备。\n\n如果由于某种原因，数据分组不能被转发，那么就回应 ICMP 消息来说明不能转发的原因。在对转发的分组进行各种检查无误后，执行 ip\\_forward\\_finish ，准备发送。然后执行dst\\_output(skb) 。无论是转发的分组，还是本地产生的分组，都要经过dst\\_output(skb) 到达目的主机。 IP 头在此时已经完成就绪。dst\\_output(skb) 函数要执行虚函数 output（单播的话为ip\\_output ，多播为ip\\_mc\\_output）。最后，ip\\_finish_output 进入邻居子系统。\n\n##### 4.4.3 数据包本地处理\n数据包交给netfilter的IP\\_LOCAL\\_INPUT钩子,作相应处理，然后交给上层比如TCP进行下一步处理。TCP的处理过程如下：\n\n![image](https://github.com/WenDeng/Picture_markdown/blob/master/picture/5.jpg?raw=true)\n\nip\\_queue\\_xmit检查socket结构体中是否含有路由信息，如果没有则执行 ip\\_route\\_output_flow查找，并存储到sk数据结构中。如果找不到，则丢弃数据包。\n\n数据最终到达驱动层，然后网卡再将数据发送出去。\n\n### 5、Netfilter hook深入\nNetfilter的主要工作其实将iptable对应的规则转换成对应nf_hoo_ops变量，然后进行注册从而发挥作用，接下来我们看一下具体过程。\n\n#### 5.1 注册和注销Netfilter hook\n注册一个hook函数是围绕nf\\_hook\\_ops数据结构的一个非常简单的操作，nf\\_hook_ops数据结构在linux/netfilter.h中定义，该数据结构的定义如下：\n```\nstruct nf_hook_ops {                    \n        struct list_head list;  \n        /* User fills in from here down. */\n        nf_hookfn *hook;\n        struct module *owner;   \n        u_int8_t pf;    \n        unsigned int hooknum;\n        /* Hooks are ordered in ascending priority. */\n        int priority;\n};\n```\n- 该数据结构中的list成员用于维护Netfilter hook的列表，并且不是用户在注册hook时需要关心的重点。\n- hook成员是一个指向nf\\_hookfn类型的函数的指针，该函数是这个hook被调用时执行的函数。nf\\_hookfn同样在linux/netfilter.h中定义。\n- pf这个成员用于指定协议族。有效的协议族在linux/socket.h中列出，但对于IPv4我们希望使用协议族PF\\_INET。\n- hooknum这个成员用于指定安装的这个函数对应的具体的hook类型，其值为NF_IP_PRE_ROUTING等。\n- priority这个成员用于指定在执行的顺序中，这个hook函数应当在被放在什么地方。对于IPv4，可用的值在linux/netfilter_ipv4.h的 nf_ip_hook_priorities 枚举中定义。出于示范的目的，在后面的模块中我们将使用NF_IP_PRI_FIRST。\n\n注册一个Netfilter hook需要调用nf_register_hook()函数，以及用到一个nf_hook_ops数据结构。nf_register_hook()函数以一个nf_hook_ops数据结构的地址作为参数并且返回一个整型的值。以下提供的是一个示例代码，该示例代码简单的注册了一个丢弃所有到达的数据包的函数。该代码同时展示了Netfilter的返回值如何被解析。\n```\n#include <linux/kernel.h>\n#include <linux/init.h>\n#include <linux/module.h>\n#include <linux/version.h>\n#include <linux/skbuff.h>\n#include <linux/netfilter.h>\n#include <linux/netfilter_ipv4.h>\n \nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"xsc\");\n \nstatic struct nf_hook_ops nfho;\n \nunsigned int hook_func(unsigned int hooknum,\n                       struct sk_buff *skb,\n                       const struct net_device *in,\n                       const struct net_device *out,\n                       int (*okfn)(struct sk_buff *))\n{\n\treturn NF_DROP;//丢弃所有数据包\n}\n \nstatic int kexec_test_init(void)\n{\n    printk(\"kexec test start ...\\n\");\n \n    nfho.hook = hook_func;\n    nfho.owner = NULL;\n    nfho.pf = PF_INET;\n    nfho.hooknum = NF_INET_LOCAL_OUT;\n    nfho.priority = NF_IP_PRI_FIRST;\n    \n    nf_register_hook(&nfho);// 注册一个钩子函数\n    return 0;\n}\n \nstatic void kexec_test_exit(void)\n{\n    printk(\"kexec test exit ...\\n\");\n    nf_unregister_hook(&nfho); //注销钩子函数\n}\n \nmodule_init(kexec_test_init); //初始化\nmodule_exit(kexec_test_exit); //退出处理\n```\n#### 5.2 hook函数实现\nhook函数原型在linux/netfilter.h中给出，如下：\n```\ntypedef unsigned int nf_hookfn(unsigned int hooknum,\n                               struct sk_buff *skb,\n                               const struct net_device *in,\n                               const struct net_device *out,\n                               int (*okfn)(struct sk_buff *));\n```\n- skb之后的两个参数是指向net_device数据结构的指针，net_device数据结构被Linux内核用于描述所有类型的网络接口。这两个参数中的第一个in，用于描述数据包到达的接口，毫无疑问，参数out用于描述数据包离开的接口。必须明白，在通常情况下，这两个参数中将只有一个被提供。例如：参数in只用于NF_IP_PRE_ROUTING和NF_IP_LOCAL_IN hook，参数out只用于NF_IP_LOCAL_OUT和NF_IP_POST_ROUTING hook。\n- sk_buff数据结构中最有用的部分可能就是那三个描述传输层包头（例如：UDP, TCP, ICMP, SPX）、网络层包头（例如：IPv4/6, IPX, RAW）以及链路层包头（例如：以太网或者RAW）的联合(union)了。这三个联合的名字分别是h、nh以及mac。这些联合包含了几个结构，依赖于具体的数据包中使用的协议。\n- 传递给hook函数的最后一个参数是一个命名为okfn函数指针，该函数以一个sk_buff数据结构作为它唯一的参数，并且返回一个整型的值。\n\n#### 5.3 Netfilter报过滤技术实现\n介绍几种过滤技术的实现：\n- **基于接口进行过滤**:使用相应的net\\_device数据结构的name这个成员，你就可以根据数据包的源接口和目的接口来选择是否丢弃它。如果想丢弃所有到达接口eth0的数据包，你需要做的仅仅是将in->name 的值与\"eth0\"做比较，如果名字匹配，那么hook函数简单的返回NF_DROP即可，数据包会被自动销毁。\n- **基于地址进行过滤**:基于数据包的源或目的IP地址进行过滤也同样可以实现， 获取一个数据包的IP头通过使用sk\\_buff数据结构中的网络层包头来完成。这个头位于一个联合中，可以通过sk_buff->nh.iph这样的方式来访问。如果数据包的源地址与我们设定的丢弃数据包的地址匹配，那么该数据包将被丢弃。\n- **基于TCP端口进行过滤**:获取一个TCP头的指针是一件简单的事情,而可以分配一个tcphdr数据结构(在linux/tcp.h中定义)的指针，并将它指向我们的数据包中IP头之后的数据。如下代码：\n\n```\nstatic int check_tcp_packet(struct sk_buff *skb)\n{\n\tstruct sk_buff *sk = skb_copy(skb, 1);  \n    struct tcphdr *tcph = NULL;  \n    const struct iphdr *iph = NULL;  \n    struct iphdr *ip;  \n    __be16 dport;\n  \n    if (!skb)  \n\treturn NF_ACCEPT;  \n    ip = ip_hdr(sk);                                               \n    iph = ip_hdr(skb);  \n \n    if(ip->protocol == IPPROTO_TCP)       // TCP 协议\n    {           \n        tcph = (void *) iph + iph->ihl * 4;  // TCP 包头  \n        dport = tcph->dest;                  // 目标端口  \n        if(ntohs(dport) == 25 )\n        {  \n            return NF_DROP;  \n        }\n        else\n        {  \n            return NF_ACCEPT;  \n        }  \n    }  \n    return NF_ACCEPT;  \t\t\n}\n\n```\n\n\n### 6、下一步延伸\n更多更深的内容需要进一步学习linux内核，这里就不再细述了，关于Netfilter的hook攻击技术以及libpcap的通信隐藏等都挺有意思的，有时间不妨深入去实践一下。\n\n\n### 参考链接\n1.https://arthurchiao.github.io/blog/deep-dive-into-iptables-and-netfilter-arch-zh/    \n2.https://www.ibm.com/developerworks/cn/linux/l-ntflt/index.html    \n3.https://blog.csdn.net/cheng_fangang/article/details/8966242   \n4.https://blog.csdn.net/XscKernel/article/details/8186679    \n","source":"_posts/网络协议/深入理解netfilter的核心原理与实现.md","raw":"---\ntitle: 深入理解netfilter的核心原理与实现\ndate: 2019-05-16 16:44:12\ntoc: true\ncomments: true\ntags:\n  - Iptabls\n  - Netfilter\ncategories:\n  - 网络协议\n---\n\n本文旨在一探Iptables和Netfilter的关系，了解网络包经过网络协议栈的过程，从而对linux的防火墙机制有更深入的认识。\n<!--more-->\n\n### 1、Iptables和Netfilter的关系\niptables是用户用来管理和配置防火墙规则的一种策略，但是实际解析规则并按照规则实施产生作用的是Netfilter。\n\niptables与协议栈内有包过滤功能的hook交互来完成工作，这些内核hook构成了netfilter框架。每个进入网络系统的包（接收和发送）在经过协议栈的时候都会触发这些hook，程序可以通过**注册hook函数**的方式在一些关键路径上处理网络流量。iptables相关的内核模块在这些hook注册了处理函数，因此可以通过iptables规则来使得网络流量符合防火墙规则。\n\n### 2、Netfilter Hooks\nnetfilter提供了5个关于IPv4的hook点，数据包经过协议栈时会触发内核模块注册在这里的处理函数。触发哪个hook取决于包的方向（接收还是接收）、包的目的地址、以及包在上一个hook点是被丢弃还accept等等。\n\n下面几个hook是内核协议栈已经定义好的：\n* NF_IP_PRE_ROUTING: 接收到的包进入协议栈立即触发此个hook（刚刚进行完版本号，校验和等检测），在进行任何路由判断之前\n* NF_IP_LOCAL_IN: 接收到的包经过路由判断，如果目的是本机，将触发此hook\n* NF_IP_FORWARD: 接收到的包经过路由判断，如果目的是其他机器，将触发此hook\n* NF_IP_LOCAL_OUT：本机产生的准备发送的包，在进入协议栈后立即触发此hook\n* NF_IP_POST_ROUTING: 本机产生的准备发送的包或者转发的包，在经过路由的判断之后，将触发此hook\n\n注册处理函数时必须提供优先级，以便hook触发能按照优先级高低调用处理函数，这使得多个模块可以在同一个hook点注册，并且有确定的处理顺序，内核模块会依次被调用，每次返回一个结果给netfilter框架，提示该对这包做什么操作。\n\n### 3、Hooks和Iptables table and chain的关系\nIptable使用table来组织规则，分为以下5类table：\n* Filter Table：是最常用的table之一，用于判断是否允许一个包通过。\n* NAT Table: 用于实现网络地址转换规则。当包进入协议栈的时候，这些规则决定是否以及如何修改包的源/目的地址，以改变包被 路由时的行为。nat table通常用于将包路由到无法直接访问的网络。\n* Mangle Table: 用于修改包的IP头。如可以修改包的TTL，增加或减少包可以经过的跳数。还可以对包打只在内核内有效的“标记”，后续的table或工具处理的时候可以用到这些标记。标记不会修改包本身，只是在包的内核表示上做标记。\n* Raw Table：其功能非常有限，其唯一目的就是提供一个让包绕过连接跟踪的框架。\n* Security Table：作用是给包打上SELinux标记，以此影响SELinux 或其他可以解读 SELinux 安全上下文的系统处理包的行为。这些标记可以基于单个包，也可以基于连接。\n\n在每个table内部，规则被进一步组织成chain，内置的chain是由内置的hook触发的。chain基本上能决定规则何时被匹配。内置的chain名字和netfilter hook名字是一一对应的：\n- PREROUTING: 由 NF_IP_PRE_ROUTING hook触发 ——————> raw,mangle,nat(目的)\n- INPUT: 由 NF_IP_LOCAL_IN hook触发 ——————> mangle,filter,security,nat(源)\n- FORWARD: 由 NF_IP_FORWARD hook触发 ——————> mangle,filter,security\n- OUTPUT: 由 NF_IP_LOCAL_OUT hook触发 ——————> raw,mangle,nat,filter,security,nat(源)\n- POSTROUTING: 由 NF_IP_POST_ROUTING hook触发 ——————> mangle，nat(源)\n\nchain使管理员可以控制在包的传输路径上哪个点应用策略。因为每个table有多个chain，因此一个 table可以在处理过程中的多个地方施加影响。特定类型的规则只在协议栈的特定点有意义，因此并不是每个table都会在内核的每个hook注册chain。可以看出raw table只有两个链prerouting和output，分别在对应的hook点发挥作用。\n\n![image](https://github.com/WenDeng/Picture_markdown/blob/master/picture/1.jpg?raw=true)\n\n### 4、从IP协议栈入手\n要想理解Netfilter的工作原理，必须从对Linux IP报文处理流程的分析开始，Netfilter正是将自己紧密地构建在这一流程之中的。\n\n![image](https://github.com/WenDeng/Picture_markdown/blob/master/picture/2.jpg?raw=true)\n\n#### 4.1 接收中断\n如果网卡收到一个和自己MAC地址匹配或链路层广播的以太网帧，它就会产生一个中断。此网卡的驱动程序会处理此中断做入下处理：\n- 从DMA/PIO或其他地方得到分组数据，写到内存里去；\n- 接着，会分配一个新的套接字缓冲区skb，并调用与协议无关的、网络设备均支持的通用网络接收处理函数netif\\_rx(skb)。netif_rx()函数让内核准备进一步处理skb。\n- 然后，skb会进入到达队列以便CPU处理（对于多核CPU而言，每个CPU维护一个队列）。如果FIFO队列已满，就会丢弃此分组。在skb排队后，调用\\_\\_cpu\\_raise\\_softirq()标记NET\\_RX\\_SOFTIRQ 软中断，等待 CPU 执行。\n- 至此， netif_rx() 函数调用结束，返回调用者状况信息（成功还是失败等）。此时，中断上下文进程完成任务，数据分组继续被上层协议栈处理。\n\n流程：网卡收到一帧————>引发中断————>cpu调用相应的中断处理函数（指向此网卡驱动中的相应的处理函数）（把此packet读到ram中）————>呼叫netif\\_rx函数来打上timestamp，并把此skb放入到cpu设置的队列中————>标记软中断（\\_\\_cpu\\_raise_softirq）————>中断完成。 \n\n#### 4.2 softirq\n内核2.4以后，整个协议栈不再使用bottom half，而是被软中断softirq取代。软中断 softirq优势明显，可以同时在多个CPU上执行；而bottom half一次只能在一个CPU上执行，即在多个CPU执行时严格保持串行。\n\n整个softirq机制的设计与实现中自始自终都贯彻了一个思想：“谁触发，谁执行 ”，也即触发软中断的那个CPU负责执行它所触发的软中断，而且每个CPU都由它自己的软中断触发与控制机制。这个设计思想也使得softirq机制充分利用了SMP系统的性能和特点。\n\n#### 4.3 NET_RX_SOFTIRQ 网络接收软中断\n这一阶段会根据协议的不同来处理数据分组。 CPU开始处理软中断do\\_softirq()，接着 net\\_rx\\_action() 处理前面标记的NET\\_RX\\_SOFTIRQ ，把出对列的skb送入相应列表处理（根据协议不同到不同的列表）。比如，IP分组交给 ip\\_rcv()处理， ARP分组交给arp\\_rcv()处理等。\n\n\n\n#### 4.4 处理IPv4分组\n下面讲讲数据包到达网络层后所做的处理，整理流程如下图，从图中可以看到netfilter起作用的5个hooks。\n\n![image](https://github.com/WenDeng/Picture_markdown/blob/master/picture/3.jpg?raw=true)\n\n##### 4.4.1 上述处理的详细过程如下：\n- ip\\_rcv()函数验证IP分组，比如目的地址是否本机地址，校验和是否正确等。若正确，**则交给netfilter的NF\\_IP\\_PRE_ROUTING钩子**,否则丢弃。\n- 到了ip\\_rcv\\_finish()函数，数据包就要根据skb结构的目的或路由信息各奔东西了。**ip\\_local\\_deliver**()处理到本机的数据分组、**ip\\_forward**()处理需要转发的数据分组、**ip\\_mr\\_input**()转发组播数据包。如果是转发的数据包，还需要找出出口设备和下一跳。ip\\_rcv\\_finish()函数最后执行dst_input()，决定数据包的下一步的处理。\n\n##### 4.4.2 转发数据包\n转发数据包的主要流程如下：\n- 处理IP头选项。如果需要的话，会记录本地IP地址和时间戳；\n- 确认分组可以被转发；\n- 将TTL减一，如果TTL为0 ，则丢弃分组；\n- 根据 MTU 大小和路由信息，对数据分组进行分片，如果需要的话；\n- 将数据分组送往外出设备。\n\n如果由于某种原因，数据分组不能被转发，那么就回应 ICMP 消息来说明不能转发的原因。在对转发的分组进行各种检查无误后，执行 ip\\_forward\\_finish ，准备发送。然后执行dst\\_output(skb) 。无论是转发的分组，还是本地产生的分组，都要经过dst\\_output(skb) 到达目的主机。 IP 头在此时已经完成就绪。dst\\_output(skb) 函数要执行虚函数 output（单播的话为ip\\_output ，多播为ip\\_mc\\_output）。最后，ip\\_finish_output 进入邻居子系统。\n\n##### 4.4.3 数据包本地处理\n数据包交给netfilter的IP\\_LOCAL\\_INPUT钩子,作相应处理，然后交给上层比如TCP进行下一步处理。TCP的处理过程如下：\n\n![image](https://github.com/WenDeng/Picture_markdown/blob/master/picture/5.jpg?raw=true)\n\nip\\_queue\\_xmit检查socket结构体中是否含有路由信息，如果没有则执行 ip\\_route\\_output_flow查找，并存储到sk数据结构中。如果找不到，则丢弃数据包。\n\n数据最终到达驱动层，然后网卡再将数据发送出去。\n\n### 5、Netfilter hook深入\nNetfilter的主要工作其实将iptable对应的规则转换成对应nf_hoo_ops变量，然后进行注册从而发挥作用，接下来我们看一下具体过程。\n\n#### 5.1 注册和注销Netfilter hook\n注册一个hook函数是围绕nf\\_hook\\_ops数据结构的一个非常简单的操作，nf\\_hook_ops数据结构在linux/netfilter.h中定义，该数据结构的定义如下：\n```\nstruct nf_hook_ops {                    \n        struct list_head list;  \n        /* User fills in from here down. */\n        nf_hookfn *hook;\n        struct module *owner;   \n        u_int8_t pf;    \n        unsigned int hooknum;\n        /* Hooks are ordered in ascending priority. */\n        int priority;\n};\n```\n- 该数据结构中的list成员用于维护Netfilter hook的列表，并且不是用户在注册hook时需要关心的重点。\n- hook成员是一个指向nf\\_hookfn类型的函数的指针，该函数是这个hook被调用时执行的函数。nf\\_hookfn同样在linux/netfilter.h中定义。\n- pf这个成员用于指定协议族。有效的协议族在linux/socket.h中列出，但对于IPv4我们希望使用协议族PF\\_INET。\n- hooknum这个成员用于指定安装的这个函数对应的具体的hook类型，其值为NF_IP_PRE_ROUTING等。\n- priority这个成员用于指定在执行的顺序中，这个hook函数应当在被放在什么地方。对于IPv4，可用的值在linux/netfilter_ipv4.h的 nf_ip_hook_priorities 枚举中定义。出于示范的目的，在后面的模块中我们将使用NF_IP_PRI_FIRST。\n\n注册一个Netfilter hook需要调用nf_register_hook()函数，以及用到一个nf_hook_ops数据结构。nf_register_hook()函数以一个nf_hook_ops数据结构的地址作为参数并且返回一个整型的值。以下提供的是一个示例代码，该示例代码简单的注册了一个丢弃所有到达的数据包的函数。该代码同时展示了Netfilter的返回值如何被解析。\n```\n#include <linux/kernel.h>\n#include <linux/init.h>\n#include <linux/module.h>\n#include <linux/version.h>\n#include <linux/skbuff.h>\n#include <linux/netfilter.h>\n#include <linux/netfilter_ipv4.h>\n \nMODULE_LICENSE(\"GPL\");\nMODULE_AUTHOR(\"xsc\");\n \nstatic struct nf_hook_ops nfho;\n \nunsigned int hook_func(unsigned int hooknum,\n                       struct sk_buff *skb,\n                       const struct net_device *in,\n                       const struct net_device *out,\n                       int (*okfn)(struct sk_buff *))\n{\n\treturn NF_DROP;//丢弃所有数据包\n}\n \nstatic int kexec_test_init(void)\n{\n    printk(\"kexec test start ...\\n\");\n \n    nfho.hook = hook_func;\n    nfho.owner = NULL;\n    nfho.pf = PF_INET;\n    nfho.hooknum = NF_INET_LOCAL_OUT;\n    nfho.priority = NF_IP_PRI_FIRST;\n    \n    nf_register_hook(&nfho);// 注册一个钩子函数\n    return 0;\n}\n \nstatic void kexec_test_exit(void)\n{\n    printk(\"kexec test exit ...\\n\");\n    nf_unregister_hook(&nfho); //注销钩子函数\n}\n \nmodule_init(kexec_test_init); //初始化\nmodule_exit(kexec_test_exit); //退出处理\n```\n#### 5.2 hook函数实现\nhook函数原型在linux/netfilter.h中给出，如下：\n```\ntypedef unsigned int nf_hookfn(unsigned int hooknum,\n                               struct sk_buff *skb,\n                               const struct net_device *in,\n                               const struct net_device *out,\n                               int (*okfn)(struct sk_buff *));\n```\n- skb之后的两个参数是指向net_device数据结构的指针，net_device数据结构被Linux内核用于描述所有类型的网络接口。这两个参数中的第一个in，用于描述数据包到达的接口，毫无疑问，参数out用于描述数据包离开的接口。必须明白，在通常情况下，这两个参数中将只有一个被提供。例如：参数in只用于NF_IP_PRE_ROUTING和NF_IP_LOCAL_IN hook，参数out只用于NF_IP_LOCAL_OUT和NF_IP_POST_ROUTING hook。\n- sk_buff数据结构中最有用的部分可能就是那三个描述传输层包头（例如：UDP, TCP, ICMP, SPX）、网络层包头（例如：IPv4/6, IPX, RAW）以及链路层包头（例如：以太网或者RAW）的联合(union)了。这三个联合的名字分别是h、nh以及mac。这些联合包含了几个结构，依赖于具体的数据包中使用的协议。\n- 传递给hook函数的最后一个参数是一个命名为okfn函数指针，该函数以一个sk_buff数据结构作为它唯一的参数，并且返回一个整型的值。\n\n#### 5.3 Netfilter报过滤技术实现\n介绍几种过滤技术的实现：\n- **基于接口进行过滤**:使用相应的net\\_device数据结构的name这个成员，你就可以根据数据包的源接口和目的接口来选择是否丢弃它。如果想丢弃所有到达接口eth0的数据包，你需要做的仅仅是将in->name 的值与\"eth0\"做比较，如果名字匹配，那么hook函数简单的返回NF_DROP即可，数据包会被自动销毁。\n- **基于地址进行过滤**:基于数据包的源或目的IP地址进行过滤也同样可以实现， 获取一个数据包的IP头通过使用sk\\_buff数据结构中的网络层包头来完成。这个头位于一个联合中，可以通过sk_buff->nh.iph这样的方式来访问。如果数据包的源地址与我们设定的丢弃数据包的地址匹配，那么该数据包将被丢弃。\n- **基于TCP端口进行过滤**:获取一个TCP头的指针是一件简单的事情,而可以分配一个tcphdr数据结构(在linux/tcp.h中定义)的指针，并将它指向我们的数据包中IP头之后的数据。如下代码：\n\n```\nstatic int check_tcp_packet(struct sk_buff *skb)\n{\n\tstruct sk_buff *sk = skb_copy(skb, 1);  \n    struct tcphdr *tcph = NULL;  \n    const struct iphdr *iph = NULL;  \n    struct iphdr *ip;  \n    __be16 dport;\n  \n    if (!skb)  \n\treturn NF_ACCEPT;  \n    ip = ip_hdr(sk);                                               \n    iph = ip_hdr(skb);  \n \n    if(ip->protocol == IPPROTO_TCP)       // TCP 协议\n    {           \n        tcph = (void *) iph + iph->ihl * 4;  // TCP 包头  \n        dport = tcph->dest;                  // 目标端口  \n        if(ntohs(dport) == 25 )\n        {  \n            return NF_DROP;  \n        }\n        else\n        {  \n            return NF_ACCEPT;  \n        }  \n    }  \n    return NF_ACCEPT;  \t\t\n}\n\n```\n\n\n### 6、下一步延伸\n更多更深的内容需要进一步学习linux内核，这里就不再细述了，关于Netfilter的hook攻击技术以及libpcap的通信隐藏等都挺有意思的，有时间不妨深入去实践一下。\n\n\n### 参考链接\n1.https://arthurchiao.github.io/blog/deep-dive-into-iptables-and-netfilter-arch-zh/    \n2.https://www.ibm.com/developerworks/cn/linux/l-ntflt/index.html    \n3.https://blog.csdn.net/cheng_fangang/article/details/8966242   \n4.https://blog.csdn.net/XscKernel/article/details/8186679    \n","slug":"网络协议/深入理解netfilter的核心原理与实现","published":1,"updated":"2019-05-16T09:12:14.550Z","layout":"post","photos":[],"link":"","_id":"cjvqga0qt000u79jxt1cfab0n","content":"<p>本文旨在一探Iptables和Netfilter的关系，了解网络包经过网络协议栈的过程，从而对linux的防火墙机制有更深入的认识。<br><a id=\"more\"></a></p>\n<h3 id=\"1、Iptables和Netfilter的关系\"><a href=\"#1、Iptables和Netfilter的关系\" class=\"headerlink\" title=\"1、Iptables和Netfilter的关系\"></a>1、Iptables和Netfilter的关系</h3><p>iptables是用户用来管理和配置防火墙规则的一种策略，但是实际解析规则并按照规则实施产生作用的是Netfilter。</p>\n<p>iptables与协议栈内有包过滤功能的hook交互来完成工作，这些内核hook构成了netfilter框架。每个进入网络系统的包（接收和发送）在经过协议栈的时候都会触发这些hook，程序可以通过<strong>注册hook函数</strong>的方式在一些关键路径上处理网络流量。iptables相关的内核模块在这些hook注册了处理函数，因此可以通过iptables规则来使得网络流量符合防火墙规则。</p>\n<h3 id=\"2、Netfilter-Hooks\"><a href=\"#2、Netfilter-Hooks\" class=\"headerlink\" title=\"2、Netfilter Hooks\"></a>2、Netfilter Hooks</h3><p>netfilter提供了5个关于IPv4的hook点，数据包经过协议栈时会触发内核模块注册在这里的处理函数。触发哪个hook取决于包的方向（接收还是接收）、包的目的地址、以及包在上一个hook点是被丢弃还accept等等。</p>\n<p>下面几个hook是内核协议栈已经定义好的：</p>\n<ul>\n<li>NF_IP_PRE_ROUTING: 接收到的包进入协议栈立即触发此个hook（刚刚进行完版本号，校验和等检测），在进行任何路由判断之前</li>\n<li>NF_IP_LOCAL_IN: 接收到的包经过路由判断，如果目的是本机，将触发此hook</li>\n<li>NF_IP_FORWARD: 接收到的包经过路由判断，如果目的是其他机器，将触发此hook</li>\n<li>NF_IP_LOCAL_OUT：本机产生的准备发送的包，在进入协议栈后立即触发此hook</li>\n<li>NF_IP_POST_ROUTING: 本机产生的准备发送的包或者转发的包，在经过路由的判断之后，将触发此hook</li>\n</ul>\n<p>注册处理函数时必须提供优先级，以便hook触发能按照优先级高低调用处理函数，这使得多个模块可以在同一个hook点注册，并且有确定的处理顺序，内核模块会依次被调用，每次返回一个结果给netfilter框架，提示该对这包做什么操作。</p>\n<h3 id=\"3、Hooks和Iptables-table-and-chain的关系\"><a href=\"#3、Hooks和Iptables-table-and-chain的关系\" class=\"headerlink\" title=\"3、Hooks和Iptables table and chain的关系\"></a>3、Hooks和Iptables table and chain的关系</h3><p>Iptable使用table来组织规则，分为以下5类table：</p>\n<ul>\n<li>Filter Table：是最常用的table之一，用于判断是否允许一个包通过。</li>\n<li>NAT Table: 用于实现网络地址转换规则。当包进入协议栈的时候，这些规则决定是否以及如何修改包的源/目的地址，以改变包被 路由时的行为。nat table通常用于将包路由到无法直接访问的网络。</li>\n<li>Mangle Table: 用于修改包的IP头。如可以修改包的TTL，增加或减少包可以经过的跳数。还可以对包打只在内核内有效的“标记”，后续的table或工具处理的时候可以用到这些标记。标记不会修改包本身，只是在包的内核表示上做标记。</li>\n<li>Raw Table：其功能非常有限，其唯一目的就是提供一个让包绕过连接跟踪的框架。</li>\n<li>Security Table：作用是给包打上SELinux标记，以此影响SELinux 或其他可以解读 SELinux 安全上下文的系统处理包的行为。这些标记可以基于单个包，也可以基于连接。</li>\n</ul>\n<p>在每个table内部，规则被进一步组织成chain，内置的chain是由内置的hook触发的。chain基本上能决定规则何时被匹配。内置的chain名字和netfilter hook名字是一一对应的：</p>\n<ul>\n<li>PREROUTING: 由 NF_IP_PRE_ROUTING hook触发 ——————&gt; raw,mangle,nat(目的)</li>\n<li>INPUT: 由 NF_IP_LOCAL_IN hook触发 ——————&gt; mangle,filter,security,nat(源)</li>\n<li>FORWARD: 由 NF_IP_FORWARD hook触发 ——————&gt; mangle,filter,security</li>\n<li>OUTPUT: 由 NF_IP_LOCAL_OUT hook触发 ——————&gt; raw,mangle,nat,filter,security,nat(源)</li>\n<li>POSTROUTING: 由 NF_IP_POST_ROUTING hook触发 ——————&gt; mangle，nat(源)</li>\n</ul>\n<p>chain使管理员可以控制在包的传输路径上哪个点应用策略。因为每个table有多个chain，因此一个 table可以在处理过程中的多个地方施加影响。特定类型的规则只在协议栈的特定点有意义，因此并不是每个table都会在内核的每个hook注册chain。可以看出raw table只有两个链prerouting和output，分别在对应的hook点发挥作用。</p>\n<p><img src=\"https://github.com/WenDeng/Picture_markdown/blob/master/picture/1.jpg?raw=true\" alt=\"image\"></p>\n<h3 id=\"4、从IP协议栈入手\"><a href=\"#4、从IP协议栈入手\" class=\"headerlink\" title=\"4、从IP协议栈入手\"></a>4、从IP协议栈入手</h3><p>要想理解Netfilter的工作原理，必须从对Linux IP报文处理流程的分析开始，Netfilter正是将自己紧密地构建在这一流程之中的。</p>\n<p><img src=\"https://github.com/WenDeng/Picture_markdown/blob/master/picture/2.jpg?raw=true\" alt=\"image\"></p>\n<h4 id=\"4-1-接收中断\"><a href=\"#4-1-接收中断\" class=\"headerlink\" title=\"4.1 接收中断\"></a>4.1 接收中断</h4><p>如果网卡收到一个和自己MAC地址匹配或链路层广播的以太网帧，它就会产生一个中断。此网卡的驱动程序会处理此中断做入下处理：</p>\n<ul>\n<li>从DMA/PIO或其他地方得到分组数据，写到内存里去；</li>\n<li>接着，会分配一个新的套接字缓冲区skb，并调用与协议无关的、网络设备均支持的通用网络接收处理函数netif_rx(skb)。netif_rx()函数让内核准备进一步处理skb。</li>\n<li>然后，skb会进入到达队列以便CPU处理（对于多核CPU而言，每个CPU维护一个队列）。如果FIFO队列已满，就会丢弃此分组。在skb排队后，调用__cpu_raise_softirq()标记NET_RX_SOFTIRQ 软中断，等待 CPU 执行。</li>\n<li>至此， netif_rx() 函数调用结束，返回调用者状况信息（成功还是失败等）。此时，中断上下文进程完成任务，数据分组继续被上层协议栈处理。</li>\n</ul>\n<p>流程：网卡收到一帧————&gt;引发中断————&gt;cpu调用相应的中断处理函数（指向此网卡驱动中的相应的处理函数）（把此packet读到ram中）————&gt;呼叫netif_rx函数来打上timestamp，并把此skb放入到cpu设置的队列中————&gt;标记软中断（__cpu_raise_softirq）————&gt;中断完成。 </p>\n<h4 id=\"4-2-softirq\"><a href=\"#4-2-softirq\" class=\"headerlink\" title=\"4.2 softirq\"></a>4.2 softirq</h4><p>内核2.4以后，整个协议栈不再使用bottom half，而是被软中断softirq取代。软中断 softirq优势明显，可以同时在多个CPU上执行；而bottom half一次只能在一个CPU上执行，即在多个CPU执行时严格保持串行。</p>\n<p>整个softirq机制的设计与实现中自始自终都贯彻了一个思想：“谁触发，谁执行 ”，也即触发软中断的那个CPU负责执行它所触发的软中断，而且每个CPU都由它自己的软中断触发与控制机制。这个设计思想也使得softirq机制充分利用了SMP系统的性能和特点。</p>\n<h4 id=\"4-3-NET-RX-SOFTIRQ-网络接收软中断\"><a href=\"#4-3-NET-RX-SOFTIRQ-网络接收软中断\" class=\"headerlink\" title=\"4.3 NET_RX_SOFTIRQ 网络接收软中断\"></a>4.3 NET_RX_SOFTIRQ 网络接收软中断</h4><p>这一阶段会根据协议的不同来处理数据分组。 CPU开始处理软中断do_softirq()，接着 net_rx_action() 处理前面标记的NET_RX_SOFTIRQ ，把出对列的skb送入相应列表处理（根据协议不同到不同的列表）。比如，IP分组交给 ip_rcv()处理， ARP分组交给arp_rcv()处理等。</p>\n<h4 id=\"4-4-处理IPv4分组\"><a href=\"#4-4-处理IPv4分组\" class=\"headerlink\" title=\"4.4 处理IPv4分组\"></a>4.4 处理IPv4分组</h4><p>下面讲讲数据包到达网络层后所做的处理，整理流程如下图，从图中可以看到netfilter起作用的5个hooks。</p>\n<p><img src=\"https://github.com/WenDeng/Picture_markdown/blob/master/picture/3.jpg?raw=true\" alt=\"image\"></p>\n<h5 id=\"4-4-1-上述处理的详细过程如下：\"><a href=\"#4-4-1-上述处理的详细过程如下：\" class=\"headerlink\" title=\"4.4.1 上述处理的详细过程如下：\"></a>4.4.1 上述处理的详细过程如下：</h5><ul>\n<li>ip_rcv()函数验证IP分组，比如目的地址是否本机地址，校验和是否正确等。若正确，<strong>则交给netfilter的NF_IP_PRE_ROUTING钩子</strong>,否则丢弃。</li>\n<li>到了ip_rcv_finish()函数，数据包就要根据skb结构的目的或路由信息各奔东西了。<strong>ip_local_deliver</strong>()处理到本机的数据分组、<strong>ip_forward</strong>()处理需要转发的数据分组、<strong>ip_mr_input</strong>()转发组播数据包。如果是转发的数据包，还需要找出出口设备和下一跳。ip_rcv_finish()函数最后执行dst_input()，决定数据包的下一步的处理。</li>\n</ul>\n<h5 id=\"4-4-2-转发数据包\"><a href=\"#4-4-2-转发数据包\" class=\"headerlink\" title=\"4.4.2 转发数据包\"></a>4.4.2 转发数据包</h5><p>转发数据包的主要流程如下：</p>\n<ul>\n<li>处理IP头选项。如果需要的话，会记录本地IP地址和时间戳；</li>\n<li>确认分组可以被转发；</li>\n<li>将TTL减一，如果TTL为0 ，则丢弃分组；</li>\n<li>根据 MTU 大小和路由信息，对数据分组进行分片，如果需要的话；</li>\n<li>将数据分组送往外出设备。</li>\n</ul>\n<p>如果由于某种原因，数据分组不能被转发，那么就回应 ICMP 消息来说明不能转发的原因。在对转发的分组进行各种检查无误后，执行 ip_forward_finish ，准备发送。然后执行dst_output(skb) 。无论是转发的分组，还是本地产生的分组，都要经过dst_output(skb) 到达目的主机。 IP 头在此时已经完成就绪。dst_output(skb) 函数要执行虚函数 output（单播的话为ip_output ，多播为ip_mc_output）。最后，ip_finish_output 进入邻居子系统。</p>\n<h5 id=\"4-4-3-数据包本地处理\"><a href=\"#4-4-3-数据包本地处理\" class=\"headerlink\" title=\"4.4.3 数据包本地处理\"></a>4.4.3 数据包本地处理</h5><p>数据包交给netfilter的IP_LOCAL_INPUT钩子,作相应处理，然后交给上层比如TCP进行下一步处理。TCP的处理过程如下：</p>\n<p><img src=\"https://github.com/WenDeng/Picture_markdown/blob/master/picture/5.jpg?raw=true\" alt=\"image\"></p>\n<p>ip_queue_xmit检查socket结构体中是否含有路由信息，如果没有则执行 ip_route_output_flow查找，并存储到sk数据结构中。如果找不到，则丢弃数据包。</p>\n<p>数据最终到达驱动层，然后网卡再将数据发送出去。</p>\n<h3 id=\"5、Netfilter-hook深入\"><a href=\"#5、Netfilter-hook深入\" class=\"headerlink\" title=\"5、Netfilter hook深入\"></a>5、Netfilter hook深入</h3><p>Netfilter的主要工作其实将iptable对应的规则转换成对应nf_hoo_ops变量，然后进行注册从而发挥作用，接下来我们看一下具体过程。</p>\n<h4 id=\"5-1-注册和注销Netfilter-hook\"><a href=\"#5-1-注册和注销Netfilter-hook\" class=\"headerlink\" title=\"5.1 注册和注销Netfilter hook\"></a>5.1 注册和注销Netfilter hook</h4><p>注册一个hook函数是围绕nf_hook_ops数据结构的一个非常简单的操作，nf_hook_ops数据结构在linux/netfilter.h中定义，该数据结构的定义如下：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nf_hook_ops</span> &#123;</span>                    </span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list_head</span> <span class=\"title\">list</span>;</span>  </span><br><span class=\"line\">        <span class=\"comment\">/* User fills in from here down. */</span></span><br><span class=\"line\">        nf_hookfn *hook;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">module</span> *<span class=\"title\">owner</span>;</span>   </span><br><span class=\"line\">        <span class=\"keyword\">u_int8_t</span> pf;    </span><br><span class=\"line\">        <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> hooknum;</span><br><span class=\"line\">        <span class=\"comment\">/* Hooks are ordered in ascending priority. */</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> priority;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>该数据结构中的list成员用于维护Netfilter hook的列表，并且不是用户在注册hook时需要关心的重点。</li>\n<li>hook成员是一个指向nf_hookfn类型的函数的指针，该函数是这个hook被调用时执行的函数。nf_hookfn同样在linux/netfilter.h中定义。</li>\n<li>pf这个成员用于指定协议族。有效的协议族在linux/socket.h中列出，但对于IPv4我们希望使用协议族PF_INET。</li>\n<li>hooknum这个成员用于指定安装的这个函数对应的具体的hook类型，其值为NF_IP_PRE_ROUTING等。</li>\n<li>priority这个成员用于指定在执行的顺序中，这个hook函数应当在被放在什么地方。对于IPv4，可用的值在linux/netfilter_ipv4.h的 nf_ip_hook_priorities 枚举中定义。出于示范的目的，在后面的模块中我们将使用NF_IP_PRI_FIRST。</li>\n</ul>\n<p>注册一个Netfilter hook需要调用nf_register_hook()函数，以及用到一个nf_hook_ops数据结构。nf_register_hook()函数以一个nf_hook_ops数据结构的地址作为参数并且返回一个整型的值。以下提供的是一个示例代码，该示例代码简单的注册了一个丢弃所有到达的数据包的函数。该代码同时展示了Netfilter的返回值如何被解析。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/kernel.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/init.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/module.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/version.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/skbuff.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/netfilter.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/netfilter_ipv4.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\">MODULE_LICENSE(<span class=\"string\">\"GPL\"</span>);</span><br><span class=\"line\">MODULE_AUTHOR(<span class=\"string\">\"xsc\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nf_hook_ops</span> <span class=\"title\">nfho</span>;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> <span class=\"title\">hook_func</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> hooknum,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                       struct sk_buff *skb,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                       <span class=\"keyword\">const</span> struct net_device *in,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                       <span class=\"keyword\">const</span> struct net_device *out,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                       <span class=\"keyword\">int</span> (*okfn)(struct sk_buff *))</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> NF_DROP;<span class=\"comment\">//丢弃所有数据包</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">kexec_test_init</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    printk(<span class=\"string\">\"kexec test start ...\\n\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    nfho.hook = hook_func;</span><br><span class=\"line\">    nfho.owner = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    nfho.pf = PF_INET;</span><br><span class=\"line\">    nfho.hooknum = NF_INET_LOCAL_OUT;</span><br><span class=\"line\">    nfho.priority = NF_IP_PRI_FIRST;</span><br><span class=\"line\">    </span><br><span class=\"line\">    nf_register_hook(&amp;nfho);<span class=\"comment\">// 注册一个钩子函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">kexec_test_exit</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    printk(<span class=\"string\">\"kexec test exit ...\\n\"</span>);</span><br><span class=\"line\">    nf_unregister_hook(&amp;nfho); <span class=\"comment\">//注销钩子函数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">module_init(kexec_test_init); <span class=\"comment\">//初始化</span></span><br><span class=\"line\">module_exit(kexec_test_exit); <span class=\"comment\">//退出处理</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5-2-hook函数实现\"><a href=\"#5-2-hook函数实现\" class=\"headerlink\" title=\"5.2 hook函数实现\"></a>5.2 hook函数实现</h4><p>hook函数原型在linux/netfilter.h中给出，如下：<br><figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef unsigned int nf_hookfn(unsigned int hooknum,</span><br><span class=\"line\">                               struct sk_buff *skb,</span><br><span class=\"line\">                               <span class=\"keyword\">const</span> struct net_device *<span class=\"keyword\">in</span>,</span><br><span class=\"line\">                               <span class=\"keyword\">const</span> struct net_device *<span class=\"keyword\">out</span>,</span><br><span class=\"line\">                               int <span class=\"comment\">(*okfn)(struct sk_buff *)</span>);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>skb之后的两个参数是指向net_device数据结构的指针，net_device数据结构被Linux内核用于描述所有类型的网络接口。这两个参数中的第一个in，用于描述数据包到达的接口，毫无疑问，参数out用于描述数据包离开的接口。必须明白，在通常情况下，这两个参数中将只有一个被提供。例如：参数in只用于NF_IP_PRE_ROUTING和NF_IP_LOCAL_IN hook，参数out只用于NF_IP_LOCAL_OUT和NF_IP_POST_ROUTING hook。</li>\n<li>sk_buff数据结构中最有用的部分可能就是那三个描述传输层包头（例如：UDP, TCP, ICMP, SPX）、网络层包头（例如：IPv4/6, IPX, RAW）以及链路层包头（例如：以太网或者RAW）的联合(union)了。这三个联合的名字分别是h、nh以及mac。这些联合包含了几个结构，依赖于具体的数据包中使用的协议。</li>\n<li>传递给hook函数的最后一个参数是一个命名为okfn函数指针，该函数以一个sk_buff数据结构作为它唯一的参数，并且返回一个整型的值。</li>\n</ul>\n<h4 id=\"5-3-Netfilter报过滤技术实现\"><a href=\"#5-3-Netfilter报过滤技术实现\" class=\"headerlink\" title=\"5.3 Netfilter报过滤技术实现\"></a>5.3 Netfilter报过滤技术实现</h4><p>介绍几种过滤技术的实现：</p>\n<ul>\n<li><strong>基于接口进行过滤</strong>:使用相应的net_device数据结构的name这个成员，你就可以根据数据包的源接口和目的接口来选择是否丢弃它。如果想丢弃所有到达接口eth0的数据包，你需要做的仅仅是将in-&gt;name 的值与”eth0”做比较，如果名字匹配，那么hook函数简单的返回NF_DROP即可，数据包会被自动销毁。</li>\n<li><strong>基于地址进行过滤</strong>:基于数据包的源或目的IP地址进行过滤也同样可以实现， 获取一个数据包的IP头通过使用sk_buff数据结构中的网络层包头来完成。这个头位于一个联合中，可以通过sk_buff-&gt;nh.iph这样的方式来访问。如果数据包的源地址与我们设定的丢弃数据包的地址匹配，那么该数据包将被丢弃。</li>\n<li><strong>基于TCP端口进行过滤</strong>:获取一个TCP头的指针是一件简单的事情,而可以分配一个tcphdr数据结构(在linux/tcp.h中定义)的指针，并将它指向我们的数据包中IP头之后的数据。如下代码：</li>\n</ul>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> int check_tcp_packet(<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sk_buff</span></span> *skb)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sk_buff</span></span> *sk = skb_copy(skb, <span class=\"number\">1</span>);  </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tcphdr</span></span> *tcph = NULL;  </span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">iphdr</span></span> *iph = NULL;  </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">iphdr</span></span> *ip;  </span><br><span class=\"line\">    __be16 dport;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!skb)  </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> NF_ACCEPT;  </span><br><span class=\"line\">    ip = ip_hdr(sk);                                               </span><br><span class=\"line\">    iph = ip_hdr(skb);  </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ip-&gt;protocol == IPPROTO_TCP)       <span class=\"comment\">// TCP 协议</span></span><br><span class=\"line\">    &#123;           </span><br><span class=\"line\">        tcph = (void *) iph + iph-&gt;ihl * <span class=\"number\">4</span>;  <span class=\"comment\">// TCP 包头  </span></span><br><span class=\"line\">        dport = tcph-&gt;dest;                  <span class=\"comment\">// 目标端口  </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ntohs(dport) == <span class=\"number\">25</span> )</span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> NF_DROP;  </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> NF_ACCEPT;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> NF_ACCEPT;  \t\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6、下一步延伸\"><a href=\"#6、下一步延伸\" class=\"headerlink\" title=\"6、下一步延伸\"></a>6、下一步延伸</h3><p>更多更深的内容需要进一步学习linux内核，这里就不再细述了，关于Netfilter的hook攻击技术以及libpcap的通信隐藏等都挺有意思的，有时间不妨深入去实践一下。</p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p>1.<a href=\"https://arthurchiao.github.io/blog/deep-dive-into-iptables-and-netfilter-arch-zh/\" target=\"_blank\" rel=\"noopener\">https://arthurchiao.github.io/blog/deep-dive-into-iptables-and-netfilter-arch-zh/</a><br>2.<a href=\"https://www.ibm.com/developerworks/cn/linux/l-ntflt/index.html\" target=\"_blank\" rel=\"noopener\">https://www.ibm.com/developerworks/cn/linux/l-ntflt/index.html</a><br>3.<a href=\"https://blog.csdn.net/cheng_fangang/article/details/8966242\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/cheng_fangang/article/details/8966242</a><br>4.<a href=\"https://blog.csdn.net/XscKernel/article/details/8186679\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/XscKernel/article/details/8186679</a>    </p>\n","site":{"data":{}},"excerpt":"<p>本文旨在一探Iptables和Netfilter的关系，了解网络包经过网络协议栈的过程，从而对linux的防火墙机制有更深入的认识。<br>","more":"</p>\n<h3 id=\"1、Iptables和Netfilter的关系\"><a href=\"#1、Iptables和Netfilter的关系\" class=\"headerlink\" title=\"1、Iptables和Netfilter的关系\"></a>1、Iptables和Netfilter的关系</h3><p>iptables是用户用来管理和配置防火墙规则的一种策略，但是实际解析规则并按照规则实施产生作用的是Netfilter。</p>\n<p>iptables与协议栈内有包过滤功能的hook交互来完成工作，这些内核hook构成了netfilter框架。每个进入网络系统的包（接收和发送）在经过协议栈的时候都会触发这些hook，程序可以通过<strong>注册hook函数</strong>的方式在一些关键路径上处理网络流量。iptables相关的内核模块在这些hook注册了处理函数，因此可以通过iptables规则来使得网络流量符合防火墙规则。</p>\n<h3 id=\"2、Netfilter-Hooks\"><a href=\"#2、Netfilter-Hooks\" class=\"headerlink\" title=\"2、Netfilter Hooks\"></a>2、Netfilter Hooks</h3><p>netfilter提供了5个关于IPv4的hook点，数据包经过协议栈时会触发内核模块注册在这里的处理函数。触发哪个hook取决于包的方向（接收还是接收）、包的目的地址、以及包在上一个hook点是被丢弃还accept等等。</p>\n<p>下面几个hook是内核协议栈已经定义好的：</p>\n<ul>\n<li>NF_IP_PRE_ROUTING: 接收到的包进入协议栈立即触发此个hook（刚刚进行完版本号，校验和等检测），在进行任何路由判断之前</li>\n<li>NF_IP_LOCAL_IN: 接收到的包经过路由判断，如果目的是本机，将触发此hook</li>\n<li>NF_IP_FORWARD: 接收到的包经过路由判断，如果目的是其他机器，将触发此hook</li>\n<li>NF_IP_LOCAL_OUT：本机产生的准备发送的包，在进入协议栈后立即触发此hook</li>\n<li>NF_IP_POST_ROUTING: 本机产生的准备发送的包或者转发的包，在经过路由的判断之后，将触发此hook</li>\n</ul>\n<p>注册处理函数时必须提供优先级，以便hook触发能按照优先级高低调用处理函数，这使得多个模块可以在同一个hook点注册，并且有确定的处理顺序，内核模块会依次被调用，每次返回一个结果给netfilter框架，提示该对这包做什么操作。</p>\n<h3 id=\"3、Hooks和Iptables-table-and-chain的关系\"><a href=\"#3、Hooks和Iptables-table-and-chain的关系\" class=\"headerlink\" title=\"3、Hooks和Iptables table and chain的关系\"></a>3、Hooks和Iptables table and chain的关系</h3><p>Iptable使用table来组织规则，分为以下5类table：</p>\n<ul>\n<li>Filter Table：是最常用的table之一，用于判断是否允许一个包通过。</li>\n<li>NAT Table: 用于实现网络地址转换规则。当包进入协议栈的时候，这些规则决定是否以及如何修改包的源/目的地址，以改变包被 路由时的行为。nat table通常用于将包路由到无法直接访问的网络。</li>\n<li>Mangle Table: 用于修改包的IP头。如可以修改包的TTL，增加或减少包可以经过的跳数。还可以对包打只在内核内有效的“标记”，后续的table或工具处理的时候可以用到这些标记。标记不会修改包本身，只是在包的内核表示上做标记。</li>\n<li>Raw Table：其功能非常有限，其唯一目的就是提供一个让包绕过连接跟踪的框架。</li>\n<li>Security Table：作用是给包打上SELinux标记，以此影响SELinux 或其他可以解读 SELinux 安全上下文的系统处理包的行为。这些标记可以基于单个包，也可以基于连接。</li>\n</ul>\n<p>在每个table内部，规则被进一步组织成chain，内置的chain是由内置的hook触发的。chain基本上能决定规则何时被匹配。内置的chain名字和netfilter hook名字是一一对应的：</p>\n<ul>\n<li>PREROUTING: 由 NF_IP_PRE_ROUTING hook触发 ——————&gt; raw,mangle,nat(目的)</li>\n<li>INPUT: 由 NF_IP_LOCAL_IN hook触发 ——————&gt; mangle,filter,security,nat(源)</li>\n<li>FORWARD: 由 NF_IP_FORWARD hook触发 ——————&gt; mangle,filter,security</li>\n<li>OUTPUT: 由 NF_IP_LOCAL_OUT hook触发 ——————&gt; raw,mangle,nat,filter,security,nat(源)</li>\n<li>POSTROUTING: 由 NF_IP_POST_ROUTING hook触发 ——————&gt; mangle，nat(源)</li>\n</ul>\n<p>chain使管理员可以控制在包的传输路径上哪个点应用策略。因为每个table有多个chain，因此一个 table可以在处理过程中的多个地方施加影响。特定类型的规则只在协议栈的特定点有意义，因此并不是每个table都会在内核的每个hook注册chain。可以看出raw table只有两个链prerouting和output，分别在对应的hook点发挥作用。</p>\n<p><img src=\"https://github.com/WenDeng/Picture_markdown/blob/master/picture/1.jpg?raw=true\" alt=\"image\"></p>\n<h3 id=\"4、从IP协议栈入手\"><a href=\"#4、从IP协议栈入手\" class=\"headerlink\" title=\"4、从IP协议栈入手\"></a>4、从IP协议栈入手</h3><p>要想理解Netfilter的工作原理，必须从对Linux IP报文处理流程的分析开始，Netfilter正是将自己紧密地构建在这一流程之中的。</p>\n<p><img src=\"https://github.com/WenDeng/Picture_markdown/blob/master/picture/2.jpg?raw=true\" alt=\"image\"></p>\n<h4 id=\"4-1-接收中断\"><a href=\"#4-1-接收中断\" class=\"headerlink\" title=\"4.1 接收中断\"></a>4.1 接收中断</h4><p>如果网卡收到一个和自己MAC地址匹配或链路层广播的以太网帧，它就会产生一个中断。此网卡的驱动程序会处理此中断做入下处理：</p>\n<ul>\n<li>从DMA/PIO或其他地方得到分组数据，写到内存里去；</li>\n<li>接着，会分配一个新的套接字缓冲区skb，并调用与协议无关的、网络设备均支持的通用网络接收处理函数netif_rx(skb)。netif_rx()函数让内核准备进一步处理skb。</li>\n<li>然后，skb会进入到达队列以便CPU处理（对于多核CPU而言，每个CPU维护一个队列）。如果FIFO队列已满，就会丢弃此分组。在skb排队后，调用__cpu_raise_softirq()标记NET_RX_SOFTIRQ 软中断，等待 CPU 执行。</li>\n<li>至此， netif_rx() 函数调用结束，返回调用者状况信息（成功还是失败等）。此时，中断上下文进程完成任务，数据分组继续被上层协议栈处理。</li>\n</ul>\n<p>流程：网卡收到一帧————&gt;引发中断————&gt;cpu调用相应的中断处理函数（指向此网卡驱动中的相应的处理函数）（把此packet读到ram中）————&gt;呼叫netif_rx函数来打上timestamp，并把此skb放入到cpu设置的队列中————&gt;标记软中断（__cpu_raise_softirq）————&gt;中断完成。 </p>\n<h4 id=\"4-2-softirq\"><a href=\"#4-2-softirq\" class=\"headerlink\" title=\"4.2 softirq\"></a>4.2 softirq</h4><p>内核2.4以后，整个协议栈不再使用bottom half，而是被软中断softirq取代。软中断 softirq优势明显，可以同时在多个CPU上执行；而bottom half一次只能在一个CPU上执行，即在多个CPU执行时严格保持串行。</p>\n<p>整个softirq机制的设计与实现中自始自终都贯彻了一个思想：“谁触发，谁执行 ”，也即触发软中断的那个CPU负责执行它所触发的软中断，而且每个CPU都由它自己的软中断触发与控制机制。这个设计思想也使得softirq机制充分利用了SMP系统的性能和特点。</p>\n<h4 id=\"4-3-NET-RX-SOFTIRQ-网络接收软中断\"><a href=\"#4-3-NET-RX-SOFTIRQ-网络接收软中断\" class=\"headerlink\" title=\"4.3 NET_RX_SOFTIRQ 网络接收软中断\"></a>4.3 NET_RX_SOFTIRQ 网络接收软中断</h4><p>这一阶段会根据协议的不同来处理数据分组。 CPU开始处理软中断do_softirq()，接着 net_rx_action() 处理前面标记的NET_RX_SOFTIRQ ，把出对列的skb送入相应列表处理（根据协议不同到不同的列表）。比如，IP分组交给 ip_rcv()处理， ARP分组交给arp_rcv()处理等。</p>\n<h4 id=\"4-4-处理IPv4分组\"><a href=\"#4-4-处理IPv4分组\" class=\"headerlink\" title=\"4.4 处理IPv4分组\"></a>4.4 处理IPv4分组</h4><p>下面讲讲数据包到达网络层后所做的处理，整理流程如下图，从图中可以看到netfilter起作用的5个hooks。</p>\n<p><img src=\"https://github.com/WenDeng/Picture_markdown/blob/master/picture/3.jpg?raw=true\" alt=\"image\"></p>\n<h5 id=\"4-4-1-上述处理的详细过程如下：\"><a href=\"#4-4-1-上述处理的详细过程如下：\" class=\"headerlink\" title=\"4.4.1 上述处理的详细过程如下：\"></a>4.4.1 上述处理的详细过程如下：</h5><ul>\n<li>ip_rcv()函数验证IP分组，比如目的地址是否本机地址，校验和是否正确等。若正确，<strong>则交给netfilter的NF_IP_PRE_ROUTING钩子</strong>,否则丢弃。</li>\n<li>到了ip_rcv_finish()函数，数据包就要根据skb结构的目的或路由信息各奔东西了。<strong>ip_local_deliver</strong>()处理到本机的数据分组、<strong>ip_forward</strong>()处理需要转发的数据分组、<strong>ip_mr_input</strong>()转发组播数据包。如果是转发的数据包，还需要找出出口设备和下一跳。ip_rcv_finish()函数最后执行dst_input()，决定数据包的下一步的处理。</li>\n</ul>\n<h5 id=\"4-4-2-转发数据包\"><a href=\"#4-4-2-转发数据包\" class=\"headerlink\" title=\"4.4.2 转发数据包\"></a>4.4.2 转发数据包</h5><p>转发数据包的主要流程如下：</p>\n<ul>\n<li>处理IP头选项。如果需要的话，会记录本地IP地址和时间戳；</li>\n<li>确认分组可以被转发；</li>\n<li>将TTL减一，如果TTL为0 ，则丢弃分组；</li>\n<li>根据 MTU 大小和路由信息，对数据分组进行分片，如果需要的话；</li>\n<li>将数据分组送往外出设备。</li>\n</ul>\n<p>如果由于某种原因，数据分组不能被转发，那么就回应 ICMP 消息来说明不能转发的原因。在对转发的分组进行各种检查无误后，执行 ip_forward_finish ，准备发送。然后执行dst_output(skb) 。无论是转发的分组，还是本地产生的分组，都要经过dst_output(skb) 到达目的主机。 IP 头在此时已经完成就绪。dst_output(skb) 函数要执行虚函数 output（单播的话为ip_output ，多播为ip_mc_output）。最后，ip_finish_output 进入邻居子系统。</p>\n<h5 id=\"4-4-3-数据包本地处理\"><a href=\"#4-4-3-数据包本地处理\" class=\"headerlink\" title=\"4.4.3 数据包本地处理\"></a>4.4.3 数据包本地处理</h5><p>数据包交给netfilter的IP_LOCAL_INPUT钩子,作相应处理，然后交给上层比如TCP进行下一步处理。TCP的处理过程如下：</p>\n<p><img src=\"https://github.com/WenDeng/Picture_markdown/blob/master/picture/5.jpg?raw=true\" alt=\"image\"></p>\n<p>ip_queue_xmit检查socket结构体中是否含有路由信息，如果没有则执行 ip_route_output_flow查找，并存储到sk数据结构中。如果找不到，则丢弃数据包。</p>\n<p>数据最终到达驱动层，然后网卡再将数据发送出去。</p>\n<h3 id=\"5、Netfilter-hook深入\"><a href=\"#5、Netfilter-hook深入\" class=\"headerlink\" title=\"5、Netfilter hook深入\"></a>5、Netfilter hook深入</h3><p>Netfilter的主要工作其实将iptable对应的规则转换成对应nf_hoo_ops变量，然后进行注册从而发挥作用，接下来我们看一下具体过程。</p>\n<h4 id=\"5-1-注册和注销Netfilter-hook\"><a href=\"#5-1-注册和注销Netfilter-hook\" class=\"headerlink\" title=\"5.1 注册和注销Netfilter hook\"></a>5.1 注册和注销Netfilter hook</h4><p>注册一个hook函数是围绕nf_hook_ops数据结构的一个非常简单的操作，nf_hook_ops数据结构在linux/netfilter.h中定义，该数据结构的定义如下：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nf_hook_ops</span> &#123;</span>                    </span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">list_head</span> <span class=\"title\">list</span>;</span>  </span><br><span class=\"line\">        <span class=\"comment\">/* User fills in from here down. */</span></span><br><span class=\"line\">        nf_hookfn *hook;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">module</span> *<span class=\"title\">owner</span>;</span>   </span><br><span class=\"line\">        <span class=\"keyword\">u_int8_t</span> pf;    </span><br><span class=\"line\">        <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> hooknum;</span><br><span class=\"line\">        <span class=\"comment\">/* Hooks are ordered in ascending priority. */</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> priority;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>该数据结构中的list成员用于维护Netfilter hook的列表，并且不是用户在注册hook时需要关心的重点。</li>\n<li>hook成员是一个指向nf_hookfn类型的函数的指针，该函数是这个hook被调用时执行的函数。nf_hookfn同样在linux/netfilter.h中定义。</li>\n<li>pf这个成员用于指定协议族。有效的协议族在linux/socket.h中列出，但对于IPv4我们希望使用协议族PF_INET。</li>\n<li>hooknum这个成员用于指定安装的这个函数对应的具体的hook类型，其值为NF_IP_PRE_ROUTING等。</li>\n<li>priority这个成员用于指定在执行的顺序中，这个hook函数应当在被放在什么地方。对于IPv4，可用的值在linux/netfilter_ipv4.h的 nf_ip_hook_priorities 枚举中定义。出于示范的目的，在后面的模块中我们将使用NF_IP_PRI_FIRST。</li>\n</ul>\n<p>注册一个Netfilter hook需要调用nf_register_hook()函数，以及用到一个nf_hook_ops数据结构。nf_register_hook()函数以一个nf_hook_ops数据结构的地址作为参数并且返回一个整型的值。以下提供的是一个示例代码，该示例代码简单的注册了一个丢弃所有到达的数据包的函数。该代码同时展示了Netfilter的返回值如何被解析。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/kernel.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/init.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/module.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/version.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/skbuff.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/netfilter.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/netfilter_ipv4.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\">MODULE_LICENSE(<span class=\"string\">\"GPL\"</span>);</span><br><span class=\"line\">MODULE_AUTHOR(<span class=\"string\">\"xsc\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">nf_hook_ops</span> <span class=\"title\">nfho</span>;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> <span class=\"title\">hook_func</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> hooknum,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                       struct sk_buff *skb,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                       <span class=\"keyword\">const</span> struct net_device *in,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                       <span class=\"keyword\">const</span> struct net_device *out,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                       <span class=\"keyword\">int</span> (*okfn)(struct sk_buff *))</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> NF_DROP;<span class=\"comment\">//丢弃所有数据包</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">kexec_test_init</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    printk(<span class=\"string\">\"kexec test start ...\\n\"</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    nfho.hook = hook_func;</span><br><span class=\"line\">    nfho.owner = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    nfho.pf = PF_INET;</span><br><span class=\"line\">    nfho.hooknum = NF_INET_LOCAL_OUT;</span><br><span class=\"line\">    nfho.priority = NF_IP_PRI_FIRST;</span><br><span class=\"line\">    </span><br><span class=\"line\">    nf_register_hook(&amp;nfho);<span class=\"comment\">// 注册一个钩子函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">kexec_test_exit</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    printk(<span class=\"string\">\"kexec test exit ...\\n\"</span>);</span><br><span class=\"line\">    nf_unregister_hook(&amp;nfho); <span class=\"comment\">//注销钩子函数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">module_init(kexec_test_init); <span class=\"comment\">//初始化</span></span><br><span class=\"line\">module_exit(kexec_test_exit); <span class=\"comment\">//退出处理</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5-2-hook函数实现\"><a href=\"#5-2-hook函数实现\" class=\"headerlink\" title=\"5.2 hook函数实现\"></a>5.2 hook函数实现</h4><p>hook函数原型在linux/netfilter.h中给出，如下：<br><figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef unsigned int nf_hookfn(unsigned int hooknum,</span><br><span class=\"line\">                               struct sk_buff *skb,</span><br><span class=\"line\">                               <span class=\"keyword\">const</span> struct net_device *<span class=\"keyword\">in</span>,</span><br><span class=\"line\">                               <span class=\"keyword\">const</span> struct net_device *<span class=\"keyword\">out</span>,</span><br><span class=\"line\">                               int <span class=\"comment\">(*okfn)(struct sk_buff *)</span>);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>skb之后的两个参数是指向net_device数据结构的指针，net_device数据结构被Linux内核用于描述所有类型的网络接口。这两个参数中的第一个in，用于描述数据包到达的接口，毫无疑问，参数out用于描述数据包离开的接口。必须明白，在通常情况下，这两个参数中将只有一个被提供。例如：参数in只用于NF_IP_PRE_ROUTING和NF_IP_LOCAL_IN hook，参数out只用于NF_IP_LOCAL_OUT和NF_IP_POST_ROUTING hook。</li>\n<li>sk_buff数据结构中最有用的部分可能就是那三个描述传输层包头（例如：UDP, TCP, ICMP, SPX）、网络层包头（例如：IPv4/6, IPX, RAW）以及链路层包头（例如：以太网或者RAW）的联合(union)了。这三个联合的名字分别是h、nh以及mac。这些联合包含了几个结构，依赖于具体的数据包中使用的协议。</li>\n<li>传递给hook函数的最后一个参数是一个命名为okfn函数指针，该函数以一个sk_buff数据结构作为它唯一的参数，并且返回一个整型的值。</li>\n</ul>\n<h4 id=\"5-3-Netfilter报过滤技术实现\"><a href=\"#5-3-Netfilter报过滤技术实现\" class=\"headerlink\" title=\"5.3 Netfilter报过滤技术实现\"></a>5.3 Netfilter报过滤技术实现</h4><p>介绍几种过滤技术的实现：</p>\n<ul>\n<li><strong>基于接口进行过滤</strong>:使用相应的net_device数据结构的name这个成员，你就可以根据数据包的源接口和目的接口来选择是否丢弃它。如果想丢弃所有到达接口eth0的数据包，你需要做的仅仅是将in-&gt;name 的值与”eth0”做比较，如果名字匹配，那么hook函数简单的返回NF_DROP即可，数据包会被自动销毁。</li>\n<li><strong>基于地址进行过滤</strong>:基于数据包的源或目的IP地址进行过滤也同样可以实现， 获取一个数据包的IP头通过使用sk_buff数据结构中的网络层包头来完成。这个头位于一个联合中，可以通过sk_buff-&gt;nh.iph这样的方式来访问。如果数据包的源地址与我们设定的丢弃数据包的地址匹配，那么该数据包将被丢弃。</li>\n<li><strong>基于TCP端口进行过滤</strong>:获取一个TCP头的指针是一件简单的事情,而可以分配一个tcphdr数据结构(在linux/tcp.h中定义)的指针，并将它指向我们的数据包中IP头之后的数据。如下代码：</li>\n</ul>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> int check_tcp_packet(<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sk_buff</span></span> *skb)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sk_buff</span></span> *sk = skb_copy(skb, <span class=\"number\">1</span>);  </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tcphdr</span></span> *tcph = NULL;  </span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">iphdr</span></span> *iph = NULL;  </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">iphdr</span></span> *ip;  </span><br><span class=\"line\">    __be16 dport;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!skb)  </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> NF_ACCEPT;  </span><br><span class=\"line\">    ip = ip_hdr(sk);                                               </span><br><span class=\"line\">    iph = ip_hdr(skb);  </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ip-&gt;protocol == IPPROTO_TCP)       <span class=\"comment\">// TCP 协议</span></span><br><span class=\"line\">    &#123;           </span><br><span class=\"line\">        tcph = (void *) iph + iph-&gt;ihl * <span class=\"number\">4</span>;  <span class=\"comment\">// TCP 包头  </span></span><br><span class=\"line\">        dport = tcph-&gt;dest;                  <span class=\"comment\">// 目标端口  </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ntohs(dport) == <span class=\"number\">25</span> )</span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> NF_DROP;  </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> NF_ACCEPT;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> NF_ACCEPT;  \t\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6、下一步延伸\"><a href=\"#6、下一步延伸\" class=\"headerlink\" title=\"6、下一步延伸\"></a>6、下一步延伸</h3><p>更多更深的内容需要进一步学习linux内核，这里就不再细述了，关于Netfilter的hook攻击技术以及libpcap的通信隐藏等都挺有意思的，有时间不妨深入去实践一下。</p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p>1.<a href=\"https://arthurchiao.github.io/blog/deep-dive-into-iptables-and-netfilter-arch-zh/\" target=\"_blank\" rel=\"noopener\">https://arthurchiao.github.io/blog/deep-dive-into-iptables-and-netfilter-arch-zh/</a><br>2.<a href=\"https://www.ibm.com/developerworks/cn/linux/l-ntflt/index.html\" target=\"_blank\" rel=\"noopener\">https://www.ibm.com/developerworks/cn/linux/l-ntflt/index.html</a><br>3.<a href=\"https://blog.csdn.net/cheng_fangang/article/details/8966242\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/cheng_fangang/article/details/8966242</a><br>4.<a href=\"https://blog.csdn.net/XscKernel/article/details/8186679\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/XscKernel/article/details/8186679</a>    </p>"},{"title":"git中的仓库崩溃后的如何恢复","date":"2019-05-16T08:44:12.000Z","toc":true,"comments":1,"_content":"\n# 解决git仓库崩溃问题\n----------------------------------------------------------------\n> 不知道是不是虚拟机的问题，最近修改代码后git仓库总崩溃，导致的结果就是很多时候自己刚修改的代码不得不放弃，最近找到一种比较好的解决方式，链接如下：https://stackoverflow.com/questions/11706215/how-to-fix-git-error-object-file-is-empty\n\n### 1.git仓库崩溃表现\n```\ndengwen@ubuntu:~/project_DW/selog$ git status\nerror: object file .git/objects/a9/761932a220991b0490c2715f218f814d39b876 is empty\nerror: object file .git/objects/a9/761932a220991b0490c2715f218f814d39b876 is empty\nfatal: loose object a9761932a220991b0490c2715f218f814d39b876 (stored in .git/objects/a9/761932a220991b0490c2715f218f814d39b876) is corrupt\n```\n### 2.常规解决方案\ngit仓库崩溃后，常规的解决方案是在其他目录git clone之前版本的项目，然后将\n当前版本的项目拷贝过去进行覆盖，再进行提交，但是这样做的结果就是可能会丢失部分git commit信息，除此之外基本没什么问题。\n\n\n### 3.推荐方法\n这种方法的好处在于可以恢复git log信息，同时也不用重新clone项目、切换分支、替换等操作，相对来说，git管理的完整度和效率会更高，具体步骤如下：\n* （1）删除全部空文件: **注意在.git目录下进行**\n```\ndengwen@ubuntu:~/project_DW/selog/.git$ find . -type f -empty -delete -print\n./objects/0d/e32d3b8d0399414c0c8fc47a56069e9821615a\n./objects/14/540f9dda3c30044e2dbe4629d22c715145f212\n./objects/19/b98c74bc6c2e372887af410301a0a80495725c\n./objects/55/14f9022e0e39a29d0e25cdf15cecac1f2f479c\n./objects/84/0103bdd9538473baab19520eda11b88b40c953\n./FETCH_HEAD\n```\n* （2）获取最后两条reflog：注意自己要恢复的分支，此处为develop\n```\ndengwen@ubuntu:~/project_DW/selog$ tail -n 2 .git/logs/refs/heads/develop\n41867ca4ab8d60979e804ee7f4640a2e9231d96b f815821a9c4e4833be898dace675916f3cad0124 dengwen <15680482464@163.com> 1539335482 +0800        commit: add manage\n```\n* （3）恢复对应的日志   \n  由上一步我们知道最新的日志节点为f815821a9c4e4833be898dace675916f3cad0124，我们可以查看这个节点的信息：\n```\ndengwen@ubuntu:~/project_DW/selog$ git show f815821a9c4e4833be898dace675916f3cad0124\ncommit f815821a9c4e4833be898dace675916f3cad0124\nAuthor: dengwen <15680482464@163.com>\nDate:   Fri Oct 12 17:11:22 2018 +0800\n\n    add manage\n```\n接下来要做的就是恢复日志,同样，需要注意分支和日志节点。\n```\ndengwen@ubuntu:~/project_DW/selog$ git update-ref develop f815821a9c4e4833be898dace675916f3cad0124\n```\n\n* （4）提交最新的git log\n  执行上述步骤后，用git status可以查看仓库的状态了，也就意味着git仓库恢复成功了。","source":"_posts/项目工具/git中的仓库崩溃后的如何恢复.md","raw":"---\ntitle: git中的仓库崩溃后的如何恢复\ndate: 2019-05-16 16:44:12\ntoc: true\ncomments: true\ntags:\n  - git使用\ncategories:\n  - 项目工具\n---\n\n# 解决git仓库崩溃问题\n----------------------------------------------------------------\n> 不知道是不是虚拟机的问题，最近修改代码后git仓库总崩溃，导致的结果就是很多时候自己刚修改的代码不得不放弃，最近找到一种比较好的解决方式，链接如下：https://stackoverflow.com/questions/11706215/how-to-fix-git-error-object-file-is-empty\n\n### 1.git仓库崩溃表现\n```\ndengwen@ubuntu:~/project_DW/selog$ git status\nerror: object file .git/objects/a9/761932a220991b0490c2715f218f814d39b876 is empty\nerror: object file .git/objects/a9/761932a220991b0490c2715f218f814d39b876 is empty\nfatal: loose object a9761932a220991b0490c2715f218f814d39b876 (stored in .git/objects/a9/761932a220991b0490c2715f218f814d39b876) is corrupt\n```\n### 2.常规解决方案\ngit仓库崩溃后，常规的解决方案是在其他目录git clone之前版本的项目，然后将\n当前版本的项目拷贝过去进行覆盖，再进行提交，但是这样做的结果就是可能会丢失部分git commit信息，除此之外基本没什么问题。\n\n\n### 3.推荐方法\n这种方法的好处在于可以恢复git log信息，同时也不用重新clone项目、切换分支、替换等操作，相对来说，git管理的完整度和效率会更高，具体步骤如下：\n* （1）删除全部空文件: **注意在.git目录下进行**\n```\ndengwen@ubuntu:~/project_DW/selog/.git$ find . -type f -empty -delete -print\n./objects/0d/e32d3b8d0399414c0c8fc47a56069e9821615a\n./objects/14/540f9dda3c30044e2dbe4629d22c715145f212\n./objects/19/b98c74bc6c2e372887af410301a0a80495725c\n./objects/55/14f9022e0e39a29d0e25cdf15cecac1f2f479c\n./objects/84/0103bdd9538473baab19520eda11b88b40c953\n./FETCH_HEAD\n```\n* （2）获取最后两条reflog：注意自己要恢复的分支，此处为develop\n```\ndengwen@ubuntu:~/project_DW/selog$ tail -n 2 .git/logs/refs/heads/develop\n41867ca4ab8d60979e804ee7f4640a2e9231d96b f815821a9c4e4833be898dace675916f3cad0124 dengwen <15680482464@163.com> 1539335482 +0800        commit: add manage\n```\n* （3）恢复对应的日志   \n  由上一步我们知道最新的日志节点为f815821a9c4e4833be898dace675916f3cad0124，我们可以查看这个节点的信息：\n```\ndengwen@ubuntu:~/project_DW/selog$ git show f815821a9c4e4833be898dace675916f3cad0124\ncommit f815821a9c4e4833be898dace675916f3cad0124\nAuthor: dengwen <15680482464@163.com>\nDate:   Fri Oct 12 17:11:22 2018 +0800\n\n    add manage\n```\n接下来要做的就是恢复日志,同样，需要注意分支和日志节点。\n```\ndengwen@ubuntu:~/project_DW/selog$ git update-ref develop f815821a9c4e4833be898dace675916f3cad0124\n```\n\n* （4）提交最新的git log\n  执行上述步骤后，用git status可以查看仓库的状态了，也就意味着git仓库恢复成功了。","slug":"项目工具/git中的仓库崩溃后的如何恢复","published":1,"updated":"2019-05-16T09:20:55.998Z","layout":"post","photos":[],"link":"","_id":"cjvqga0qv000x79jx7gtd3aps","content":"<h1 id=\"解决git仓库崩溃问题\"><a href=\"#解决git仓库崩溃问题\" class=\"headerlink\" title=\"解决git仓库崩溃问题\"></a>解决git仓库崩溃问题</h1><hr>\n<blockquote>\n<p>不知道是不是虚拟机的问题，最近修改代码后git仓库总崩溃，导致的结果就是很多时候自己刚修改的代码不得不放弃，最近找到一种比较好的解决方式，链接如下：<a href=\"https://stackoverflow.com/questions/11706215/how-to-fix-git-error-object-file-is-empty\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/11706215/how-to-fix-git-error-object-file-is-empty</a></p>\n</blockquote>\n<h3 id=\"1-git仓库崩溃表现\"><a href=\"#1-git仓库崩溃表现\" class=\"headerlink\" title=\"1.git仓库崩溃表现\"></a>1.git仓库崩溃表现</h3><figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dengwen@ubuntu:~/project_DW/selog$ git status</span><br><span class=\"line\"><span class=\"keyword\">error: </span>object file .git/objects/a9/761932a220991b0490c2715f218f814d39b876 is empty</span><br><span class=\"line\"><span class=\"keyword\">error: </span>object file .git/objects/a9/761932a220991b0490c2715f218f814d39b876 is empty</span><br><span class=\"line\">fatal: loose object a9761932a220991b0490c2715f218f814d39b876 (stored in .git/objects/a9/761932a220991b0490c2715f218f814d39b876) is corrupt</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-常规解决方案\"><a href=\"#2-常规解决方案\" class=\"headerlink\" title=\"2.常规解决方案\"></a>2.常规解决方案</h3><p>git仓库崩溃后，常规的解决方案是在其他目录git clone之前版本的项目，然后将<br>当前版本的项目拷贝过去进行覆盖，再进行提交，但是这样做的结果就是可能会丢失部分git commit信息，除此之外基本没什么问题。</p>\n<h3 id=\"3-推荐方法\"><a href=\"#3-推荐方法\" class=\"headerlink\" title=\"3.推荐方法\"></a>3.推荐方法</h3><p>这种方法的好处在于可以恢复git log信息，同时也不用重新clone项目、切换分支、替换等操作，相对来说，git管理的完整度和效率会更高，具体步骤如下：</p>\n<ul>\n<li><p>（1）删除全部空文件: <strong>注意在.git目录下进行</strong></p>\n<figure class=\"highlight llvm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dengwen<span class=\"title\">@ubuntu</span>:~/project_DW/selog/.git$ find . -<span class=\"keyword\">type</span> f -empty -delete -print</span><br><span class=\"line\">./objects/<span class=\"number\">0</span>d/e<span class=\"number\">32</span>d<span class=\"number\">3</span>b<span class=\"number\">8</span>d<span class=\"number\">0399414</span><span class=\"keyword\">c</span><span class=\"number\">0</span><span class=\"keyword\">c</span><span class=\"number\">8</span>fc<span class=\"number\">47</span>a<span class=\"number\">56069e9821615</span>a</span><br><span class=\"line\">./objects/<span class=\"number\">14</span>/<span class=\"number\">540</span>f<span class=\"number\">9</span>dda<span class=\"number\">3</span><span class=\"keyword\">c</span><span class=\"number\">30044e2</span>dbe<span class=\"number\">4629</span>d<span class=\"number\">22</span><span class=\"keyword\">c</span><span class=\"number\">715145</span>f<span class=\"number\">212</span></span><br><span class=\"line\">./objects/<span class=\"number\">19</span>/b<span class=\"number\">98</span><span class=\"keyword\">c</span><span class=\"number\">74</span>bc<span class=\"number\">6</span><span class=\"keyword\">c</span><span class=\"number\">2e372887</span>af<span class=\"number\">410301</span>a<span class=\"number\">0</span>a<span class=\"number\">80495725</span><span class=\"keyword\">c</span></span><br><span class=\"line\">./objects/<span class=\"number\">55</span>/<span class=\"number\">14</span>f<span class=\"number\">9022e0</span>e<span class=\"number\">39</span>a<span class=\"number\">29</span>d<span class=\"number\">0e25</span>cdf<span class=\"number\">15</span>cecac<span class=\"number\">1</span>f<span class=\"number\">2</span>f<span class=\"number\">479</span><span class=\"keyword\">c</span></span><br><span class=\"line\">./objects/<span class=\"number\">84</span>/<span class=\"number\">0103</span>bdd<span class=\"number\">9538473</span>baab<span class=\"number\">19520</span>eda<span class=\"number\">11</span>b<span class=\"number\">88</span>b<span class=\"number\">40</span><span class=\"keyword\">c</span><span class=\"number\">953</span></span><br><span class=\"line\">./FETCH_HEAD</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>（2）获取最后两条reflog：注意自己要恢复的分支，此处为develop</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dengwen<span class=\"variable\">@ubuntu</span><span class=\"symbol\">:~/project_DW/selog</span><span class=\"variable\">$ </span>tail -n <span class=\"number\">2</span> .git/logs/refs/heads/develop</span><br><span class=\"line\"><span class=\"number\">41867</span>ca4ab8d60979e804ee7f4640a2e9231d96b f815821a9c4e4833be898dace675916f3cad0124 dengwen &lt;<span class=\"number\">15680482464</span><span class=\"variable\">@163</span>.com&gt; <span class=\"number\">1539335482</span> +080<span class=\"number\">0</span>        <span class=\"symbol\">commit:</span> add manage</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>（3）恢复对应的日志<br>由上一步我们知道最新的日志节点为f815821a9c4e4833be898dace675916f3cad0124，我们可以查看这个节点的信息：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dengwen<span class=\"variable\">@ubuntu</span><span class=\"symbol\">:~/project_DW/selog</span><span class=\"variable\">$ </span>git show f815821a9c4e4833be898dace675916f3cad0124</span><br><span class=\"line\">commit f815821a9c4e4833be898dace675916f3cad0124</span><br><span class=\"line\"><span class=\"symbol\">Author:</span> dengwen &lt;<span class=\"number\">15680482464</span><span class=\"variable\">@163</span>.com&gt;</span><br><span class=\"line\"><span class=\"symbol\">Date:</span>   Fri Oct <span class=\"number\">12</span> <span class=\"number\">17</span><span class=\"symbol\">:</span><span class=\"number\">11</span><span class=\"symbol\">:</span><span class=\"number\">22</span> <span class=\"number\">2018</span> +080<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    add manage</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>接下来要做的就是恢复日志,同样，需要注意分支和日志节点。<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dengwen<span class=\"variable\">@ubuntu</span><span class=\"symbol\">:~/project_DW/selog</span><span class=\"variable\">$ </span>git update-ref develop f815821a9c4e4833be898dace675916f3cad0124</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>（4）提交最新的git log<br>执行上述步骤后，用git status可以查看仓库的状态了，也就意味着git仓库恢复成功了。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"解决git仓库崩溃问题\"><a href=\"#解决git仓库崩溃问题\" class=\"headerlink\" title=\"解决git仓库崩溃问题\"></a>解决git仓库崩溃问题</h1><hr>\n<blockquote>\n<p>不知道是不是虚拟机的问题，最近修改代码后git仓库总崩溃，导致的结果就是很多时候自己刚修改的代码不得不放弃，最近找到一种比较好的解决方式，链接如下：<a href=\"https://stackoverflow.com/questions/11706215/how-to-fix-git-error-object-file-is-empty\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/11706215/how-to-fix-git-error-object-file-is-empty</a></p>\n</blockquote>\n<h3 id=\"1-git仓库崩溃表现\"><a href=\"#1-git仓库崩溃表现\" class=\"headerlink\" title=\"1.git仓库崩溃表现\"></a>1.git仓库崩溃表现</h3><figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dengwen@ubuntu:~/project_DW/selog$ git status</span><br><span class=\"line\"><span class=\"keyword\">error: </span>object file .git/objects/a9/761932a220991b0490c2715f218f814d39b876 is empty</span><br><span class=\"line\"><span class=\"keyword\">error: </span>object file .git/objects/a9/761932a220991b0490c2715f218f814d39b876 is empty</span><br><span class=\"line\">fatal: loose object a9761932a220991b0490c2715f218f814d39b876 (stored in .git/objects/a9/761932a220991b0490c2715f218f814d39b876) is corrupt</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-常规解决方案\"><a href=\"#2-常规解决方案\" class=\"headerlink\" title=\"2.常规解决方案\"></a>2.常规解决方案</h3><p>git仓库崩溃后，常规的解决方案是在其他目录git clone之前版本的项目，然后将<br>当前版本的项目拷贝过去进行覆盖，再进行提交，但是这样做的结果就是可能会丢失部分git commit信息，除此之外基本没什么问题。</p>\n<h3 id=\"3-推荐方法\"><a href=\"#3-推荐方法\" class=\"headerlink\" title=\"3.推荐方法\"></a>3.推荐方法</h3><p>这种方法的好处在于可以恢复git log信息，同时也不用重新clone项目、切换分支、替换等操作，相对来说，git管理的完整度和效率会更高，具体步骤如下：</p>\n<ul>\n<li><p>（1）删除全部空文件: <strong>注意在.git目录下进行</strong></p>\n<figure class=\"highlight llvm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dengwen<span class=\"title\">@ubuntu</span>:~/project_DW/selog/.git$ find . -<span class=\"keyword\">type</span> f -empty -delete -print</span><br><span class=\"line\">./objects/<span class=\"number\">0</span>d/e<span class=\"number\">32</span>d<span class=\"number\">3</span>b<span class=\"number\">8</span>d<span class=\"number\">0399414</span><span class=\"keyword\">c</span><span class=\"number\">0</span><span class=\"keyword\">c</span><span class=\"number\">8</span>fc<span class=\"number\">47</span>a<span class=\"number\">56069e9821615</span>a</span><br><span class=\"line\">./objects/<span class=\"number\">14</span>/<span class=\"number\">540</span>f<span class=\"number\">9</span>dda<span class=\"number\">3</span><span class=\"keyword\">c</span><span class=\"number\">30044e2</span>dbe<span class=\"number\">4629</span>d<span class=\"number\">22</span><span class=\"keyword\">c</span><span class=\"number\">715145</span>f<span class=\"number\">212</span></span><br><span class=\"line\">./objects/<span class=\"number\">19</span>/b<span class=\"number\">98</span><span class=\"keyword\">c</span><span class=\"number\">74</span>bc<span class=\"number\">6</span><span class=\"keyword\">c</span><span class=\"number\">2e372887</span>af<span class=\"number\">410301</span>a<span class=\"number\">0</span>a<span class=\"number\">80495725</span><span class=\"keyword\">c</span></span><br><span class=\"line\">./objects/<span class=\"number\">55</span>/<span class=\"number\">14</span>f<span class=\"number\">9022e0</span>e<span class=\"number\">39</span>a<span class=\"number\">29</span>d<span class=\"number\">0e25</span>cdf<span class=\"number\">15</span>cecac<span class=\"number\">1</span>f<span class=\"number\">2</span>f<span class=\"number\">479</span><span class=\"keyword\">c</span></span><br><span class=\"line\">./objects/<span class=\"number\">84</span>/<span class=\"number\">0103</span>bdd<span class=\"number\">9538473</span>baab<span class=\"number\">19520</span>eda<span class=\"number\">11</span>b<span class=\"number\">88</span>b<span class=\"number\">40</span><span class=\"keyword\">c</span><span class=\"number\">953</span></span><br><span class=\"line\">./FETCH_HEAD</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>（2）获取最后两条reflog：注意自己要恢复的分支，此处为develop</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dengwen<span class=\"variable\">@ubuntu</span><span class=\"symbol\">:~/project_DW/selog</span><span class=\"variable\">$ </span>tail -n <span class=\"number\">2</span> .git/logs/refs/heads/develop</span><br><span class=\"line\"><span class=\"number\">41867</span>ca4ab8d60979e804ee7f4640a2e9231d96b f815821a9c4e4833be898dace675916f3cad0124 dengwen &lt;<span class=\"number\">15680482464</span><span class=\"variable\">@163</span>.com&gt; <span class=\"number\">1539335482</span> +080<span class=\"number\">0</span>        <span class=\"symbol\">commit:</span> add manage</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>（3）恢复对应的日志<br>由上一步我们知道最新的日志节点为f815821a9c4e4833be898dace675916f3cad0124，我们可以查看这个节点的信息：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dengwen<span class=\"variable\">@ubuntu</span><span class=\"symbol\">:~/project_DW/selog</span><span class=\"variable\">$ </span>git show f815821a9c4e4833be898dace675916f3cad0124</span><br><span class=\"line\">commit f815821a9c4e4833be898dace675916f3cad0124</span><br><span class=\"line\"><span class=\"symbol\">Author:</span> dengwen &lt;<span class=\"number\">15680482464</span><span class=\"variable\">@163</span>.com&gt;</span><br><span class=\"line\"><span class=\"symbol\">Date:</span>   Fri Oct <span class=\"number\">12</span> <span class=\"number\">17</span><span class=\"symbol\">:</span><span class=\"number\">11</span><span class=\"symbol\">:</span><span class=\"number\">22</span> <span class=\"number\">2018</span> +080<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    add manage</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>接下来要做的就是恢复日志,同样，需要注意分支和日志节点。<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dengwen<span class=\"variable\">@ubuntu</span><span class=\"symbol\">:~/project_DW/selog</span><span class=\"variable\">$ </span>git update-ref develop f815821a9c4e4833be898dace675916f3cad0124</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>（4）提交最新的git log<br>执行上述步骤后，用git status可以查看仓库的状态了，也就意味着git仓库恢复成功了。</li>\n</ul>\n"},{"title":"Git 中的SSH key的生成","date":"2019-05-16T08:44:12.000Z","toc":true,"comments":1,"_content":"\n## **Git 中的SSH key的生成**  \n     \n#### 1.1&emsp;安装git：  \n&emsp; &emsp;windows下安装git很方便，github上提供了安装包，链接： [http://msysgit.github.com/](http://msysgit.github.com/) \n\n#### 1.2&emsp;查看是否经有SSH key：  \n```\n    cat ~/.ssh/id_rsa.pub //git bash中输入这个命令\n```\n\n#### 1.3&emsp;生成SSH key：\n```\n    ssh-keygen -t rsa -C \"your.email@example.com\" -b 4096 //git bash中输入这个命令，修改对应的邮箱\n```\n  \n  \n  ***如果已经存在SSH key,则直接复制即可，否则需要重新生成。***   \n  ***生成SSH key时需要设置对应的文件存放路径和密码，为了方便，直接回车默认即可。***   \n  \n  #### 1.3&emsp;查看生成的SSH key，复制到git中即可：\n  ```\n    xclip -sel clip < ~/.ssh/id_rsa.pub //GNU/Linux (requires the xclip package)\n    cat ~/.ssh/id_rsa.pub | clip //Git Bash on Windows / Windows PowerShell\n    type %userprofile%\\.ssh\\id_rsa.pub | clip //Windows Command Line\n```","source":"_posts/项目工具/git之生成ssh key.md","raw":"---\ntitle: Git 中的SSH key的生成\ndate: 2019-05-16 16:44:12\ntoc: true\ncomments: true\ntags:\n  - git使用\ncategories:\n  - 项目工具\n---\n\n## **Git 中的SSH key的生成**  \n     \n#### 1.1&emsp;安装git：  \n&emsp; &emsp;windows下安装git很方便，github上提供了安装包，链接： [http://msysgit.github.com/](http://msysgit.github.com/) \n\n#### 1.2&emsp;查看是否经有SSH key：  \n```\n    cat ~/.ssh/id_rsa.pub //git bash中输入这个命令\n```\n\n#### 1.3&emsp;生成SSH key：\n```\n    ssh-keygen -t rsa -C \"your.email@example.com\" -b 4096 //git bash中输入这个命令，修改对应的邮箱\n```\n  \n  \n  ***如果已经存在SSH key,则直接复制即可，否则需要重新生成。***   \n  ***生成SSH key时需要设置对应的文件存放路径和密码，为了方便，直接回车默认即可。***   \n  \n  #### 1.3&emsp;查看生成的SSH key，复制到git中即可：\n  ```\n    xclip -sel clip < ~/.ssh/id_rsa.pub //GNU/Linux (requires the xclip package)\n    cat ~/.ssh/id_rsa.pub | clip //Git Bash on Windows / Windows PowerShell\n    type %userprofile%\\.ssh\\id_rsa.pub | clip //Windows Command Line\n```","slug":"项目工具/git之生成ssh key","published":1,"updated":"2019-05-16T09:21:25.938Z","layout":"post","photos":[],"link":"","_id":"cjvqga0qw001279jxvw4kor8d","content":"<h2 id=\"Git-中的SSH-key的生成\"><a href=\"#Git-中的SSH-key的生成\" class=\"headerlink\" title=\"Git 中的SSH key的生成\"></a><strong>Git 中的SSH key的生成</strong></h2><h4 id=\"1-1-emsp-安装git：\"><a href=\"#1-1-emsp-安装git：\" class=\"headerlink\" title=\"1.1&emsp;安装git：\"></a>1.1&emsp;安装git：</h4><p>&emsp; &emsp;windows下安装git很方便，github上提供了安装包，链接： <a href=\"http://msysgit.github.com/\" target=\"_blank\" rel=\"noopener\">http://msysgit.github.com/</a> </p>\n<h4 id=\"1-2-emsp-查看是否经有SSH-key：\"><a href=\"#1-2-emsp-查看是否经有SSH-key：\" class=\"headerlink\" title=\"1.2&emsp;查看是否经有SSH key：\"></a>1.2&emsp;查看是否经有SSH key：</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ~/.ssh/id_rsa<span class=\"selector-class\">.pub</span> <span class=\"comment\">//git bash中输入这个命令</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"1-3-emsp-生成SSH-key：\"><a href=\"#1-3-emsp-生成SSH-key：\" class=\"headerlink\" title=\"1.3&emsp;生成SSH key：\"></a>1.3&emsp;生成SSH key：</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">\"your.email@example.com\"</span> -<span class=\"selector-tag\">b</span> <span class=\"number\">4096</span> <span class=\"comment\">//git bash中输入这个命令，修改对应的邮箱</span></span><br></pre></td></tr></table></figure>\n<p>  <strong><em>如果已经存在SSH key,则直接复制即可，否则需要重新生成。</em></strong><br>  <strong><em>生成SSH key时需要设置对应的文件存放路径和密码，为了方便，直接回车默认即可。</em></strong>   </p>\n<h4 id=\"1-3-emsp-查看生成的SSH-key，复制到git中即可：\"><a href=\"#1-3-emsp-查看生成的SSH-key，复制到git中即可：\" class=\"headerlink\" title=\"1.3&emsp;查看生成的SSH key，复制到git中即可：\"></a>1.3&emsp;查看生成的SSH key，复制到git中即可：</h4>  <figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xclip -sel <span class=\"keyword\">clip</span> &lt; ~/.ssh/id_rsa.pub <span class=\"comment\">//GNU/Linux (requires the xclip package)</span></span><br><span class=\"line\">cat ~/.ssh/id_rsa.pub | <span class=\"keyword\">clip</span> <span class=\"comment\">//Git Bash on Windows / Windows PowerShell</span></span><br><span class=\"line\">type %userprofile%\\.ssh\\id_rsa.pub | <span class=\"keyword\">clip</span> <span class=\"comment\">//Windows Command Line</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Git-中的SSH-key的生成\"><a href=\"#Git-中的SSH-key的生成\" class=\"headerlink\" title=\"Git 中的SSH key的生成\"></a><strong>Git 中的SSH key的生成</strong></h2><h4 id=\"1-1-emsp-安装git：\"><a href=\"#1-1-emsp-安装git：\" class=\"headerlink\" title=\"1.1&emsp;安装git：\"></a>1.1&emsp;安装git：</h4><p>&emsp; &emsp;windows下安装git很方便，github上提供了安装包，链接： <a href=\"http://msysgit.github.com/\" target=\"_blank\" rel=\"noopener\">http://msysgit.github.com/</a> </p>\n<h4 id=\"1-2-emsp-查看是否经有SSH-key：\"><a href=\"#1-2-emsp-查看是否经有SSH-key：\" class=\"headerlink\" title=\"1.2&emsp;查看是否经有SSH key：\"></a>1.2&emsp;查看是否经有SSH key：</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ~/.ssh/id_rsa<span class=\"selector-class\">.pub</span> <span class=\"comment\">//git bash中输入这个命令</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"1-3-emsp-生成SSH-key：\"><a href=\"#1-3-emsp-生成SSH-key：\" class=\"headerlink\" title=\"1.3&emsp;生成SSH key：\"></a>1.3&emsp;生成SSH key：</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">\"your.email@example.com\"</span> -<span class=\"selector-tag\">b</span> <span class=\"number\">4096</span> <span class=\"comment\">//git bash中输入这个命令，修改对应的邮箱</span></span><br></pre></td></tr></table></figure>\n<p>  <strong><em>如果已经存在SSH key,则直接复制即可，否则需要重新生成。</em></strong><br>  <strong><em>生成SSH key时需要设置对应的文件存放路径和密码，为了方便，直接回车默认即可。</em></strong>   </p>\n<h4 id=\"1-3-emsp-查看生成的SSH-key，复制到git中即可：\"><a href=\"#1-3-emsp-查看生成的SSH-key，复制到git中即可：\" class=\"headerlink\" title=\"1.3&emsp;查看生成的SSH key，复制到git中即可：\"></a>1.3&emsp;查看生成的SSH key，复制到git中即可：</h4>  <figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xclip -sel <span class=\"keyword\">clip</span> &lt; ~/.ssh/id_rsa.pub <span class=\"comment\">//GNU/Linux (requires the xclip package)</span></span><br><span class=\"line\">cat ~/.ssh/id_rsa.pub | <span class=\"keyword\">clip</span> <span class=\"comment\">//Git Bash on Windows / Windows PowerShell</span></span><br><span class=\"line\">type %userprofile%\\.ssh\\id_rsa.pub | <span class=\"keyword\">clip</span> <span class=\"comment\">//Windows Command Line</span></span><br></pre></td></tr></table></figure>"},{"title":"Git基本命令详解","date":"2019-05-16T08:44:12.000Z","toc":true,"comments":1,"_content":"\n\n最近刚开始学习git，总结一下git的各个命令，方便以后查阅。  \n学习环境：windows10   \n **参考链接：**\n>* Pro Git（中文版）[http://git.oschina.net/progit/](http://git.oschina.net/progit/)\n> * 沉浸式学 Git[http://igit.linuxtoy.org/contents.html](http://igit.linuxtoy.org/contents.html)\n\n## **1. git的安装及初始配置**  \n### **1.1 git 安装**   \n&emsp; &emsp;windows下安装git很方便，github上提供了安装包，链接： [http://msysgit.github.com/](http://msysgit.github.com/)   \n\n### **1.2 git 初始化配置**\n&emsp; &emsp; 1.2.1&emsp;配置用户名和户邮箱：\n```\n    git config --global user.name \"deng wen\" \n\tgit config --global user.email 156XXXXXXX@163.com \n```\n&emsp; &emsp; 1.2.2&emsp;查看初始配置：\n```\n    git config --list \n```\n## **2.git的基础命令**\n### **2.1 新建仓库**\n&emsp; Git 新建项目仓库的方法有两种。分别为：  \n&emsp; &emsp;  2.1.1&emsp; 第一种：在现存的目录下，用如下命令得到一个.git仓库目录，资源对应添加到其中：\n```\n    git init\n```\n&emsp; &emsp;  2.1.2&emsp; 第二种：从已有的 Git 仓库克隆出一个新的镜像仓库来。[URL]       如：http://uestclab307.kmdns.net:808/dengwen/SAIC_SecMonitor.git，mygitname可省略：\n```\n    git clone [URL] mygitname\n```\n### **2.2 文件基本处理**\n&emsp; &emsp;  2.2.1&emsp;检查当前文件状态：\n```\n    git status\n``` \n &emsp; &emsp;  2.2.2&emsp; 将新文件或更新文件加入跟踪：\n```\n    git add  filename\n    git add  —A //将所有新文件一次加入跟踪\n    git checkout -- filename // 对所做的更改进行忽略\n    git reset HEAD filename //撤销加入跟踪的文件 \n```  \n &emsp; &emsp;  2.2.3&emsp; 文件提交：\n```\n    git commit  —m  \"your comment\" //-m表示注释\n    git commit --amend //撤销刚做的提交\n    git commit  —a  //所有跟踪文件一次提交\n```  \n &emsp; &emsp;  2.2.4&emsp; 删除文件：\n```\n    git rm --cached filename //跟踪目录删除、本地不删除\n    git rm -f filename //跟踪目录、本地目录皆删除：\n```  \n &emsp; &emsp;  2.2.5&emsp; 在仓库中移动文件：\n```\n    git mv file_from file_to\n```  \n &emsp; &emsp;  2.2.6&emsp; 查看提交历史，- -pretty按固定格式显示,--graph 选项用 ASCII 字符串形象地展示了每个提交所在的分支及其分化衍合情况：\n```\n    git log\n    git log --pretty=format:\"%h - %an, %ar : %s\"\n    git log --pretty=format:\"%h %s\" --graph\n```  \n>**选项 说明**\n    %H 提交对象（commit）的完整哈希字串\n    %h 提交对象的简短哈希字串\n    %T 树对象（tree）的完整哈希字串\n    %t 树对象的简短哈希字串\n    %P 父对象（parent）的完整哈希字串\n    %p 父对象的简短哈希字串\n    %an 作者（author）的名字\n    %ae 作者的电子邮件地址\n    %ad 作者修订日期（可以用 -date= 选项定制格式）\n    %ar 作者修订日期，按多久以前的方式显示\n    %cn 提交者(committer)的名字\n    %ce 提交者的电子邮件地址\n    %cd 提交日期\n    %cr 提交日期，按多久以前的方式显示\n    %s 提交说明\n    \n### **2.3 远程仓库的使用**\n &emsp; &emsp;  2.3.1&emsp; 查看当前的远程库,-v 选项显示对应的克隆地址：\n```\n    git remote //查看当前仓库对应的远程库,一般为origin\n    git remote -v //查看当前仓库对应的远程库及相应地址\n``` \n &emsp; &emsp;  2.3.2&emsp;远程仓库处理：\n```\n    git remote add yourname [url] //yourname是你的本地仓库名，相当于赋值yourname为URL\n    git fetch yourname  //从远程仓库抓取数据到本地，到如果要查看需要合并到当前分支\n    git remote show [remote-name] //查看远程仓库信息，如显示了有哪些远端分支还没有同步到本地等\n    git remote rename old-name new-name //重命名\n    git remote rm paul //删除\n``` \n### **2.4 标签**\n &emsp; &emsp;  2.4.1&emsp; 新建标签：\n```\n    git tag //查看已有标签\n    git tag -a yourtagname -m 'your comment' //打标签\n    git show yourtagname //查看版本信息 \n    git tag -a yourtagname hist //后期加标签,hist表校验和\n```\n &emsp; &emsp;  2.4.2&emsp; 标签远程共享：\n```\n    git push origin yourtagname //推送标签\n    git push origin --tags //推送所有标签\n```\n### **2.5 Git 命令别名**\n &emsp; &emsp;  2.5.1&emsp; 简写git命令：\n```\n     git config --global alias.shortname gitcommandname \n     eg: git config --global alias.unstage 'reset HEAD'\n         git unstage filename //撤销加入跟踪的文件 \n```\n\n## **3.git分支处理**\n### **3.1 Git 查看分支**\n &emsp; &emsp;  3.1.1&emsp; 查看分支：\n```\n     git branch \n     git branch -a //查看所有分支，包括远程分支\n     git branch -v //查看分支最后一个提交对象的信息\n     git branch --merged/--no--merge //查看已经（或尚未）合并的分支\n```\n### **3.2 Git 分支切换、合并和删除**\n &emsp; &emsp;  3.2.1&emsp; 切换分支：\n```\n     git branch branchname  //在当前分支下创建分支\n     git checkout branchname //切换到已有的分支\n     git checkout -b 'branchname' //创建分支并切换\n```\n &emsp; &emsp;  3.2.2&emsp; 合并分支：\n```\n     git merge branchname //将分支合并到当前分支\n```\n\n &emsp; &emsp;  3.2.3&emsp; 删除分支：\n```\n     git branch -d branchname  //删除分支\n```\n### **3.3 Git 远程分支处理**\n &emsp; &emsp;  3.3.1&emsp;跟踪远程分支：\n```\n     git checkout -b [分支名] [远程仓库名]/[分支名]  //跟踪分支是一种和某个远程分支有直接联系的本地分支\n     git pull  //新建跟踪分支后用该命令直接将远程分支合并进来\n     git push  //将本地跟踪分支推送到远程分支\n     git push --set-upstream [远程仓库名] [分支名]  //将当前的分支设置为跟踪某个远程分支\n\n```\n &emsp; &emsp;  3.3.2&emsp;抓取和合并远程分支：\n```\n     git fetch origin  //同步远程origin/master数据到本地，指针移到它最新的位置上。\n     git merge origin/remotename  //将远程分支的内容合并到当前分支，用于远程分支已同步而又不能直接访问时。\n```\n\n &emsp; &emsp;  3.3.3&emsp;推送分支和删除远程分支：\n```\n     git push origin name1:name2  //把本地分支name1推送到远程分支name2中，如果远程仓库没有这个分支，会生成这样一个新的分支。用这种方式可以远程创建分支。  \n     git push origin name //将本地分支推到远程同名分支。\n     git push origin :remotename //把空白远程远程分支，即删除远程分支。\n\n```\n\n<br>\n<br>\n  \n***这些就是基本的git命令，更多待进一步学习***","source":"_posts/项目工具/git基本命令详解.md","raw":"---\ntitle: Git基本命令详解\ndate: 2019-05-16 16:44:12\ntoc: true\ncomments: true\ntags:\n  - git使用\ncategories:\n  - 项目工具\n---\n\n\n最近刚开始学习git，总结一下git的各个命令，方便以后查阅。  \n学习环境：windows10   \n **参考链接：**\n>* Pro Git（中文版）[http://git.oschina.net/progit/](http://git.oschina.net/progit/)\n> * 沉浸式学 Git[http://igit.linuxtoy.org/contents.html](http://igit.linuxtoy.org/contents.html)\n\n## **1. git的安装及初始配置**  \n### **1.1 git 安装**   \n&emsp; &emsp;windows下安装git很方便，github上提供了安装包，链接： [http://msysgit.github.com/](http://msysgit.github.com/)   \n\n### **1.2 git 初始化配置**\n&emsp; &emsp; 1.2.1&emsp;配置用户名和户邮箱：\n```\n    git config --global user.name \"deng wen\" \n\tgit config --global user.email 156XXXXXXX@163.com \n```\n&emsp; &emsp; 1.2.2&emsp;查看初始配置：\n```\n    git config --list \n```\n## **2.git的基础命令**\n### **2.1 新建仓库**\n&emsp; Git 新建项目仓库的方法有两种。分别为：  \n&emsp; &emsp;  2.1.1&emsp; 第一种：在现存的目录下，用如下命令得到一个.git仓库目录，资源对应添加到其中：\n```\n    git init\n```\n&emsp; &emsp;  2.1.2&emsp; 第二种：从已有的 Git 仓库克隆出一个新的镜像仓库来。[URL]       如：http://uestclab307.kmdns.net:808/dengwen/SAIC_SecMonitor.git，mygitname可省略：\n```\n    git clone [URL] mygitname\n```\n### **2.2 文件基本处理**\n&emsp; &emsp;  2.2.1&emsp;检查当前文件状态：\n```\n    git status\n``` \n &emsp; &emsp;  2.2.2&emsp; 将新文件或更新文件加入跟踪：\n```\n    git add  filename\n    git add  —A //将所有新文件一次加入跟踪\n    git checkout -- filename // 对所做的更改进行忽略\n    git reset HEAD filename //撤销加入跟踪的文件 \n```  \n &emsp; &emsp;  2.2.3&emsp; 文件提交：\n```\n    git commit  —m  \"your comment\" //-m表示注释\n    git commit --amend //撤销刚做的提交\n    git commit  —a  //所有跟踪文件一次提交\n```  \n &emsp; &emsp;  2.2.4&emsp; 删除文件：\n```\n    git rm --cached filename //跟踪目录删除、本地不删除\n    git rm -f filename //跟踪目录、本地目录皆删除：\n```  \n &emsp; &emsp;  2.2.5&emsp; 在仓库中移动文件：\n```\n    git mv file_from file_to\n```  \n &emsp; &emsp;  2.2.6&emsp; 查看提交历史，- -pretty按固定格式显示,--graph 选项用 ASCII 字符串形象地展示了每个提交所在的分支及其分化衍合情况：\n```\n    git log\n    git log --pretty=format:\"%h - %an, %ar : %s\"\n    git log --pretty=format:\"%h %s\" --graph\n```  \n>**选项 说明**\n    %H 提交对象（commit）的完整哈希字串\n    %h 提交对象的简短哈希字串\n    %T 树对象（tree）的完整哈希字串\n    %t 树对象的简短哈希字串\n    %P 父对象（parent）的完整哈希字串\n    %p 父对象的简短哈希字串\n    %an 作者（author）的名字\n    %ae 作者的电子邮件地址\n    %ad 作者修订日期（可以用 -date= 选项定制格式）\n    %ar 作者修订日期，按多久以前的方式显示\n    %cn 提交者(committer)的名字\n    %ce 提交者的电子邮件地址\n    %cd 提交日期\n    %cr 提交日期，按多久以前的方式显示\n    %s 提交说明\n    \n### **2.3 远程仓库的使用**\n &emsp; &emsp;  2.3.1&emsp; 查看当前的远程库,-v 选项显示对应的克隆地址：\n```\n    git remote //查看当前仓库对应的远程库,一般为origin\n    git remote -v //查看当前仓库对应的远程库及相应地址\n``` \n &emsp; &emsp;  2.3.2&emsp;远程仓库处理：\n```\n    git remote add yourname [url] //yourname是你的本地仓库名，相当于赋值yourname为URL\n    git fetch yourname  //从远程仓库抓取数据到本地，到如果要查看需要合并到当前分支\n    git remote show [remote-name] //查看远程仓库信息，如显示了有哪些远端分支还没有同步到本地等\n    git remote rename old-name new-name //重命名\n    git remote rm paul //删除\n``` \n### **2.4 标签**\n &emsp; &emsp;  2.4.1&emsp; 新建标签：\n```\n    git tag //查看已有标签\n    git tag -a yourtagname -m 'your comment' //打标签\n    git show yourtagname //查看版本信息 \n    git tag -a yourtagname hist //后期加标签,hist表校验和\n```\n &emsp; &emsp;  2.4.2&emsp; 标签远程共享：\n```\n    git push origin yourtagname //推送标签\n    git push origin --tags //推送所有标签\n```\n### **2.5 Git 命令别名**\n &emsp; &emsp;  2.5.1&emsp; 简写git命令：\n```\n     git config --global alias.shortname gitcommandname \n     eg: git config --global alias.unstage 'reset HEAD'\n         git unstage filename //撤销加入跟踪的文件 \n```\n\n## **3.git分支处理**\n### **3.1 Git 查看分支**\n &emsp; &emsp;  3.1.1&emsp; 查看分支：\n```\n     git branch \n     git branch -a //查看所有分支，包括远程分支\n     git branch -v //查看分支最后一个提交对象的信息\n     git branch --merged/--no--merge //查看已经（或尚未）合并的分支\n```\n### **3.2 Git 分支切换、合并和删除**\n &emsp; &emsp;  3.2.1&emsp; 切换分支：\n```\n     git branch branchname  //在当前分支下创建分支\n     git checkout branchname //切换到已有的分支\n     git checkout -b 'branchname' //创建分支并切换\n```\n &emsp; &emsp;  3.2.2&emsp; 合并分支：\n```\n     git merge branchname //将分支合并到当前分支\n```\n\n &emsp; &emsp;  3.2.3&emsp; 删除分支：\n```\n     git branch -d branchname  //删除分支\n```\n### **3.3 Git 远程分支处理**\n &emsp; &emsp;  3.3.1&emsp;跟踪远程分支：\n```\n     git checkout -b [分支名] [远程仓库名]/[分支名]  //跟踪分支是一种和某个远程分支有直接联系的本地分支\n     git pull  //新建跟踪分支后用该命令直接将远程分支合并进来\n     git push  //将本地跟踪分支推送到远程分支\n     git push --set-upstream [远程仓库名] [分支名]  //将当前的分支设置为跟踪某个远程分支\n\n```\n &emsp; &emsp;  3.3.2&emsp;抓取和合并远程分支：\n```\n     git fetch origin  //同步远程origin/master数据到本地，指针移到它最新的位置上。\n     git merge origin/remotename  //将远程分支的内容合并到当前分支，用于远程分支已同步而又不能直接访问时。\n```\n\n &emsp; &emsp;  3.3.3&emsp;推送分支和删除远程分支：\n```\n     git push origin name1:name2  //把本地分支name1推送到远程分支name2中，如果远程仓库没有这个分支，会生成这样一个新的分支。用这种方式可以远程创建分支。  \n     git push origin name //将本地分支推到远程同名分支。\n     git push origin :remotename //把空白远程远程分支，即删除远程分支。\n\n```\n\n<br>\n<br>\n  \n***这些就是基本的git命令，更多待进一步学习***","slug":"项目工具/git基本命令详解","published":1,"updated":"2019-05-16T09:21:59.278Z","layout":"post","photos":[],"link":"","_id":"cjvqga0qx001479jxkcxrqm4b","content":"<p>最近刚开始学习git，总结一下git的各个命令，方便以后查阅。<br>学习环境：windows10<br> <strong>参考链接：</strong></p>\n<blockquote>\n<ul>\n<li>Pro Git（中文版）<a href=\"http://git.oschina.net/progit/\" target=\"_blank\" rel=\"noopener\">http://git.oschina.net/progit/</a></li>\n<li>沉浸式学 Git<a href=\"http://igit.linuxtoy.org/contents.html\" target=\"_blank\" rel=\"noopener\">http://igit.linuxtoy.org/contents.html</a></li>\n</ul>\n</blockquote>\n<h2 id=\"1-git的安装及初始配置\"><a href=\"#1-git的安装及初始配置\" class=\"headerlink\" title=\"1. git的安装及初始配置\"></a><strong>1. git的安装及初始配置</strong></h2><h3 id=\"1-1-git-安装\"><a href=\"#1-1-git-安装\" class=\"headerlink\" title=\"1.1 git 安装\"></a><strong>1.1 git 安装</strong></h3><p>&emsp; &emsp;windows下安装git很方便，github上提供了安装包，链接： <a href=\"http://msysgit.github.com/\" target=\"_blank\" rel=\"noopener\">http://msysgit.github.com/</a>   </p>\n<h3 id=\"1-2-git-初始化配置\"><a href=\"#1-2-git-初始化配置\" class=\"headerlink\" title=\"1.2 git 初始化配置\"></a><strong>1.2 git 初始化配置</strong></h3><p>&emsp; &emsp; 1.2.1&emsp;配置用户名和户邮箱：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   git<span class=\"built_in\"> config </span>--global user.name <span class=\"string\">\"deng wen\"</span> </span><br><span class=\"line\">git<span class=\"built_in\"> config </span>--global user.email 156XXXXXXX@163.com</span><br></pre></td></tr></table></figure></p>\n<p>&emsp; &emsp; 1.2.2&emsp;查看初始配置：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git<span class=\"built_in\"> config </span>--list</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-git的基础命令\"><a href=\"#2-git的基础命令\" class=\"headerlink\" title=\"2.git的基础命令\"></a><strong>2.git的基础命令</strong></h2><h3 id=\"2-1-新建仓库\"><a href=\"#2-1-新建仓库\" class=\"headerlink\" title=\"2.1 新建仓库\"></a><strong>2.1 新建仓库</strong></h3><p>&emsp; Git 新建项目仓库的方法有两种。分别为：<br>&emsp; &emsp;  2.1.1&emsp; 第一种：在现存的目录下，用如下命令得到一个.git仓库目录，资源对应添加到其中：<br><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">git init</span></span><br></pre></td></tr></table></figure></p>\n<p>&emsp; &emsp;  2.1.2&emsp; 第二种：从已有的 Git 仓库克隆出一个新的镜像仓库来。[URL]       如：<a href=\"http://uestclab307.kmdns.net:808/dengwen/SAIC_SecMonitor.git，mygitname可省略：\" target=\"_blank\" rel=\"noopener\">http://uestclab307.kmdns.net:808/dengwen/SAIC_SecMonitor.git，mygitname可省略：</a><br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">clone</span> <span class=\"title\">[URL</span>] mygitname</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-2-文件基本处理\"><a href=\"#2-2-文件基本处理\" class=\"headerlink\" title=\"2.2 文件基本处理\"></a><strong>2.2 文件基本处理</strong></h3><p>&emsp; &emsp;  2.2.1&emsp;检查当前文件状态：<br><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    git status</span><br><span class=\"line\">``` </span><br><span class=\"line\"> <span class=\"variable\">&amp;emsp</span>; <span class=\"variable\">&amp;emsp</span>;  <span class=\"number\">2.2</span><span class=\"number\">.2</span><span class=\"variable\">&amp;emsp</span>; 将新文件或更新文件加入跟踪：</span><br></pre></td></tr></table></figure></p>\n<pre><code>git add  filename\ngit add  —A //将所有新文件一次加入跟踪\ngit checkout -- filename // 对所做的更改进行忽略\ngit reset HEAD filename //撤销加入跟踪的文件 \n</code></pre><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">&amp;emsp</span>; <span class=\"variable\">&amp;emsp</span>;  <span class=\"number\">2.2</span><span class=\"number\">.3</span><span class=\"variable\">&amp;emsp</span>; 文件提交：</span><br></pre></td></tr></table></figure>\n<pre><code>git commit  —m  &quot;your comment&quot; //-m表示注释\ngit commit --amend //撤销刚做的提交\ngit commit  —a  //所有跟踪文件一次提交\n</code></pre><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">&amp;emsp</span>; <span class=\"variable\">&amp;emsp</span>;  <span class=\"number\">2.2</span><span class=\"number\">.4</span><span class=\"variable\">&amp;emsp</span>; 删除文件：</span><br></pre></td></tr></table></figure>\n<pre><code>git rm --cached filename //跟踪目录删除、本地不删除\ngit rm -f filename //跟踪目录、本地目录皆删除：\n</code></pre><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">&amp;emsp</span>; <span class=\"variable\">&amp;emsp</span>;  <span class=\"number\">2.2</span><span class=\"number\">.5</span><span class=\"variable\">&amp;emsp</span>; 在仓库中移动文件：</span><br></pre></td></tr></table></figure>\n<pre><code>git mv file_from file_to\n</code></pre><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">&amp;emsp</span>; <span class=\"variable\">&amp;emsp</span>;  <span class=\"number\">2.2</span><span class=\"number\">.6</span><span class=\"variable\">&amp;emsp</span>; 查看提交历史，- -pretty按固定格式显示,--graph 选项用 ASCII 字符串形象地展示了每个提交所在的分支及其分化衍合情况：</span><br></pre></td></tr></table></figure>\n<pre><code>git log\ngit log --pretty=format:&quot;%h - %an, %ar : %s&quot;\ngit log --pretty=format:&quot;%h %s&quot; --graph\n</code></pre><figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;**选项 说明**</span><br><span class=\"line\"><span class=\"tag\">    %<span class=\"selector-tag\">H</span></span> 提交对象（commit）的完整哈希字串</span><br><span class=\"line\"><span class=\"tag\">    %<span class=\"selector-tag\">h</span></span> 提交对象的简短哈希字串</span><br><span class=\"line\"><span class=\"tag\">    %<span class=\"selector-tag\">T</span></span> 树对象（tree）的完整哈希字串</span><br><span class=\"line\"><span class=\"tag\">    %<span class=\"selector-tag\">t</span></span> 树对象的简短哈希字串</span><br><span class=\"line\"><span class=\"tag\">    %<span class=\"selector-tag\">P</span></span> 父对象（parent）的完整哈希字串</span><br><span class=\"line\"><span class=\"tag\">    %<span class=\"selector-tag\">p</span></span> 父对象的简短哈希字串</span><br><span class=\"line\"><span class=\"tag\">    %<span class=\"selector-tag\">an</span></span> 作者（author）的名字</span><br><span class=\"line\"><span class=\"tag\">    %<span class=\"selector-tag\">ae</span></span> 作者的电子邮件地址</span><br><span class=\"line\"><span class=\"tag\">    %<span class=\"selector-tag\">ad</span></span> 作者修订日期（可以用 -date= 选项定制格式）</span><br><span class=\"line\"><span class=\"tag\">    %<span class=\"selector-tag\">ar</span></span> 作者修订日期，按多久以前的方式显示</span><br><span class=\"line\"><span class=\"tag\">    %<span class=\"selector-tag\">cn</span></span> 提交者(committer)的名字</span><br><span class=\"line\"><span class=\"tag\">    %<span class=\"selector-tag\">ce</span></span> 提交者的电子邮件地址</span><br><span class=\"line\"><span class=\"tag\">    %<span class=\"selector-tag\">cd</span></span> 提交日期</span><br><span class=\"line\"><span class=\"tag\">    %<span class=\"selector-tag\">cr</span></span> 提交日期，按多久以前的方式显示</span><br><span class=\"line\"><span class=\"tag\">    %<span class=\"selector-tag\">s</span></span> 提交说明</span><br><span class=\"line\">    </span><br><span class=\"line\">### **2.3 远程仓库的使用**</span><br><span class=\"line\"> &amp;emsp; &amp;emsp;  2.3.1&amp;emsp; 查看当前的远程库,-v 选项显示对应的克隆地址：</span><br></pre></td></tr></table></figure>\n<pre><code>git remote //查看当前仓库对应的远程库,一般为origin\ngit remote -v //查看当前仓库对应的远程库及相应地址\n</code></pre><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">&amp;emsp</span>; <span class=\"variable\">&amp;emsp</span>;  <span class=\"number\">2.3</span><span class=\"number\">.2</span><span class=\"variable\">&amp;emsp</span>;远程仓库处理：</span><br></pre></td></tr></table></figure>\n<pre><code>git remote add yourname [url] //yourname是你的本地仓库名，相当于赋值yourname为URL\ngit fetch yourname  //从远程仓库抓取数据到本地，到如果要查看需要合并到当前分支\ngit remote show [remote-name] //查看远程仓库信息，如显示了有哪些远端分支还没有同步到本地等\ngit remote rename old-name new-name //重命名\ngit remote rm paul //删除\n</code></pre><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">### **2.4 标签**</span></span><br><span class=\"line\"> <span class=\"variable\">&amp;emsp</span>; <span class=\"variable\">&amp;emsp</span>;  <span class=\"number\">2.4</span><span class=\"number\">.1</span><span class=\"variable\">&amp;emsp</span>; 新建标签：</span><br></pre></td></tr></table></figure>\n<pre><code>git tag //查看已有标签\ngit tag -a yourtagname -m &apos;your comment&apos; //打标签\ngit show yourtagname //查看版本信息 \ngit tag -a yourtagname hist //后期加标签,hist表校验和\n</code></pre><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">&amp;emsp</span>; <span class=\"variable\">&amp;emsp</span>;  <span class=\"number\">2.4</span><span class=\"number\">.2</span><span class=\"variable\">&amp;emsp</span>; 标签远程共享：</span><br></pre></td></tr></table></figure>\n<pre><code>git push origin yourtagname //推送标签\ngit push origin --tags //推送所有标签\n</code></pre><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">### **2.5 Git 命令别名**</span></span><br><span class=\"line\"> <span class=\"variable\">&amp;emsp</span>; <span class=\"variable\">&amp;emsp</span>;  <span class=\"number\">2.5</span><span class=\"number\">.1</span><span class=\"variable\">&amp;emsp</span>; 简写git命令：</span><br></pre></td></tr></table></figure>\n<pre><code>git config --global alias.shortname gitcommandname \neg: git config --global alias.unstage &apos;reset HEAD&apos;\n    git unstage filename //撤销加入跟踪的文件 \n</code></pre><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## **<span class=\"number\">3.</span>git分支处理**</span><br><span class=\"line\">### **<span class=\"number\">3.1</span> Git 查看分支**</span><br><span class=\"line\"> &amp;emsp; &amp;emsp;  <span class=\"number\">3.1</span><span class=\"number\">.1</span>&amp;emsp; 查看分支：</span><br></pre></td></tr></table></figure>\n<pre><code>git branch \ngit branch -a //查看所有分支，包括远程分支\ngit branch -v //查看分支最后一个提交对象的信息\ngit branch --merged/--no--merge //查看已经（或尚未）合并的分支\n</code></pre><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">### **3.2 Git 分支切换、合并和删除**</span></span><br><span class=\"line\"> <span class=\"variable\">&amp;emsp</span>; <span class=\"variable\">&amp;emsp</span>;  <span class=\"number\">3.2</span><span class=\"number\">.1</span><span class=\"variable\">&amp;emsp</span>; 切换分支：</span><br></pre></td></tr></table></figure>\n<pre><code>git branch branchname  //在当前分支下创建分支\ngit checkout branchname //切换到已有的分支\ngit checkout -b &apos;branchname&apos; //创建分支并切换\n</code></pre><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">&amp;emsp</span>; <span class=\"variable\">&amp;emsp</span>;  <span class=\"number\">3.2</span><span class=\"number\">.2</span><span class=\"variable\">&amp;emsp</span>; 合并分支：</span><br></pre></td></tr></table></figure>\n<pre><code>git merge branchname //将分支合并到当前分支\n</code></pre><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">&amp;emsp</span>; <span class=\"variable\">&amp;emsp</span>;  <span class=\"number\">3.2</span><span class=\"number\">.3</span><span class=\"variable\">&amp;emsp</span>; 删除分支：</span><br></pre></td></tr></table></figure>\n<pre><code>git branch -d branchname  //删除分支\n</code></pre><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">### **3.3 Git 远程分支处理**</span></span><br><span class=\"line\"> <span class=\"variable\">&amp;emsp</span>; <span class=\"variable\">&amp;emsp</span>;  <span class=\"number\">3.3</span><span class=\"number\">.1</span><span class=\"variable\">&amp;emsp</span>;跟踪远程分支：</span><br></pre></td></tr></table></figure>\n<pre><code>git checkout -b [分支名] [远程仓库名]/[分支名]  //跟踪分支是一种和某个远程分支有直接联系的本地分支\ngit pull  //新建跟踪分支后用该命令直接将远程分支合并进来\ngit push  //将本地跟踪分支推送到远程分支\ngit push --set-upstream [远程仓库名] [分支名]  //将当前的分支设置为跟踪某个远程分支\n</code></pre><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">&amp;emsp</span>; <span class=\"variable\">&amp;emsp</span>;  <span class=\"number\">3.3</span><span class=\"number\">.2</span><span class=\"variable\">&amp;emsp</span>;抓取和合并远程分支：</span><br></pre></td></tr></table></figure>\n<pre><code>git fetch origin  //同步远程origin/master数据到本地，指针移到它最新的位置上。\ngit merge origin/remotename  //将远程分支的内容合并到当前分支，用于远程分支已同步而又不能直接访问时。\n</code></pre><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">&amp;emsp</span>; <span class=\"variable\">&amp;emsp</span>;  <span class=\"number\">3.3</span><span class=\"number\">.3</span><span class=\"variable\">&amp;emsp</span>;推送分支和删除远程分支：</span><br></pre></td></tr></table></figure>\n<pre><code>git push origin name1:name2  //把本地分支name1推送到远程分支name2中，如果远程仓库没有这个分支，会生成这样一个新的分支。用这种方式可以远程创建分支。  \ngit push origin name //将本地分支推到远程同名分支。\ngit push origin :remotename //把空白远程远程分支，即删除远程分支。\n</code></pre><p><code>`</code></p>\n<p><br><br><br></p>\n<p><strong><em>这些就是基本的git命令，更多待进一步学习</em></strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近刚开始学习git，总结一下git的各个命令，方便以后查阅。<br>学习环境：windows10<br> <strong>参考链接：</strong></p>\n<blockquote>\n<ul>\n<li>Pro Git（中文版）<a href=\"http://git.oschina.net/progit/\" target=\"_blank\" rel=\"noopener\">http://git.oschina.net/progit/</a></li>\n<li>沉浸式学 Git<a href=\"http://igit.linuxtoy.org/contents.html\" target=\"_blank\" rel=\"noopener\">http://igit.linuxtoy.org/contents.html</a></li>\n</ul>\n</blockquote>\n<h2 id=\"1-git的安装及初始配置\"><a href=\"#1-git的安装及初始配置\" class=\"headerlink\" title=\"1. git的安装及初始配置\"></a><strong>1. git的安装及初始配置</strong></h2><h3 id=\"1-1-git-安装\"><a href=\"#1-1-git-安装\" class=\"headerlink\" title=\"1.1 git 安装\"></a><strong>1.1 git 安装</strong></h3><p>&emsp; &emsp;windows下安装git很方便，github上提供了安装包，链接： <a href=\"http://msysgit.github.com/\" target=\"_blank\" rel=\"noopener\">http://msysgit.github.com/</a>   </p>\n<h3 id=\"1-2-git-初始化配置\"><a href=\"#1-2-git-初始化配置\" class=\"headerlink\" title=\"1.2 git 初始化配置\"></a><strong>1.2 git 初始化配置</strong></h3><p>&emsp; &emsp; 1.2.1&emsp;配置用户名和户邮箱：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   git<span class=\"built_in\"> config </span>--global user.name <span class=\"string\">\"deng wen\"</span> </span><br><span class=\"line\">git<span class=\"built_in\"> config </span>--global user.email 156XXXXXXX@163.com</span><br></pre></td></tr></table></figure></p>\n<p>&emsp; &emsp; 1.2.2&emsp;查看初始配置：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git<span class=\"built_in\"> config </span>--list</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-git的基础命令\"><a href=\"#2-git的基础命令\" class=\"headerlink\" title=\"2.git的基础命令\"></a><strong>2.git的基础命令</strong></h2><h3 id=\"2-1-新建仓库\"><a href=\"#2-1-新建仓库\" class=\"headerlink\" title=\"2.1 新建仓库\"></a><strong>2.1 新建仓库</strong></h3><p>&emsp; Git 新建项目仓库的方法有两种。分别为：<br>&emsp; &emsp;  2.1.1&emsp; 第一种：在现存的目录下，用如下命令得到一个.git仓库目录，资源对应添加到其中：<br><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">git init</span></span><br></pre></td></tr></table></figure></p>\n<p>&emsp; &emsp;  2.1.2&emsp; 第二种：从已有的 Git 仓库克隆出一个新的镜像仓库来。[URL]       如：<a href=\"http://uestclab307.kmdns.net:808/dengwen/SAIC_SecMonitor.git，mygitname可省略：\" target=\"_blank\" rel=\"noopener\">http://uestclab307.kmdns.net:808/dengwen/SAIC_SecMonitor.git，mygitname可省略：</a><br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">clone</span> <span class=\"title\">[URL</span>] mygitname</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-2-文件基本处理\"><a href=\"#2-2-文件基本处理\" class=\"headerlink\" title=\"2.2 文件基本处理\"></a><strong>2.2 文件基本处理</strong></h3><p>&emsp; &emsp;  2.2.1&emsp;检查当前文件状态：<br><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    git status</span><br><span class=\"line\">``` </span><br><span class=\"line\"> <span class=\"variable\">&amp;emsp</span>; <span class=\"variable\">&amp;emsp</span>;  <span class=\"number\">2.2</span><span class=\"number\">.2</span><span class=\"variable\">&amp;emsp</span>; 将新文件或更新文件加入跟踪：</span><br></pre></td></tr></table></figure></p>\n<pre><code>git add  filename\ngit add  —A //将所有新文件一次加入跟踪\ngit checkout -- filename // 对所做的更改进行忽略\ngit reset HEAD filename //撤销加入跟踪的文件 \n</code></pre><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">&amp;emsp</span>; <span class=\"variable\">&amp;emsp</span>;  <span class=\"number\">2.2</span><span class=\"number\">.3</span><span class=\"variable\">&amp;emsp</span>; 文件提交：</span><br></pre></td></tr></table></figure>\n<pre><code>git commit  —m  &quot;your comment&quot; //-m表示注释\ngit commit --amend //撤销刚做的提交\ngit commit  —a  //所有跟踪文件一次提交\n</code></pre><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">&amp;emsp</span>; <span class=\"variable\">&amp;emsp</span>;  <span class=\"number\">2.2</span><span class=\"number\">.4</span><span class=\"variable\">&amp;emsp</span>; 删除文件：</span><br></pre></td></tr></table></figure>\n<pre><code>git rm --cached filename //跟踪目录删除、本地不删除\ngit rm -f filename //跟踪目录、本地目录皆删除：\n</code></pre><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">&amp;emsp</span>; <span class=\"variable\">&amp;emsp</span>;  <span class=\"number\">2.2</span><span class=\"number\">.5</span><span class=\"variable\">&amp;emsp</span>; 在仓库中移动文件：</span><br></pre></td></tr></table></figure>\n<pre><code>git mv file_from file_to\n</code></pre><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">&amp;emsp</span>; <span class=\"variable\">&amp;emsp</span>;  <span class=\"number\">2.2</span><span class=\"number\">.6</span><span class=\"variable\">&amp;emsp</span>; 查看提交历史，- -pretty按固定格式显示,--graph 选项用 ASCII 字符串形象地展示了每个提交所在的分支及其分化衍合情况：</span><br></pre></td></tr></table></figure>\n<pre><code>git log\ngit log --pretty=format:&quot;%h - %an, %ar : %s&quot;\ngit log --pretty=format:&quot;%h %s&quot; --graph\n</code></pre><figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;**选项 说明**</span><br><span class=\"line\"><span class=\"tag\">    %<span class=\"selector-tag\">H</span></span> 提交对象（commit）的完整哈希字串</span><br><span class=\"line\"><span class=\"tag\">    %<span class=\"selector-tag\">h</span></span> 提交对象的简短哈希字串</span><br><span class=\"line\"><span class=\"tag\">    %<span class=\"selector-tag\">T</span></span> 树对象（tree）的完整哈希字串</span><br><span class=\"line\"><span class=\"tag\">    %<span class=\"selector-tag\">t</span></span> 树对象的简短哈希字串</span><br><span class=\"line\"><span class=\"tag\">    %<span class=\"selector-tag\">P</span></span> 父对象（parent）的完整哈希字串</span><br><span class=\"line\"><span class=\"tag\">    %<span class=\"selector-tag\">p</span></span> 父对象的简短哈希字串</span><br><span class=\"line\"><span class=\"tag\">    %<span class=\"selector-tag\">an</span></span> 作者（author）的名字</span><br><span class=\"line\"><span class=\"tag\">    %<span class=\"selector-tag\">ae</span></span> 作者的电子邮件地址</span><br><span class=\"line\"><span class=\"tag\">    %<span class=\"selector-tag\">ad</span></span> 作者修订日期（可以用 -date= 选项定制格式）</span><br><span class=\"line\"><span class=\"tag\">    %<span class=\"selector-tag\">ar</span></span> 作者修订日期，按多久以前的方式显示</span><br><span class=\"line\"><span class=\"tag\">    %<span class=\"selector-tag\">cn</span></span> 提交者(committer)的名字</span><br><span class=\"line\"><span class=\"tag\">    %<span class=\"selector-tag\">ce</span></span> 提交者的电子邮件地址</span><br><span class=\"line\"><span class=\"tag\">    %<span class=\"selector-tag\">cd</span></span> 提交日期</span><br><span class=\"line\"><span class=\"tag\">    %<span class=\"selector-tag\">cr</span></span> 提交日期，按多久以前的方式显示</span><br><span class=\"line\"><span class=\"tag\">    %<span class=\"selector-tag\">s</span></span> 提交说明</span><br><span class=\"line\">    </span><br><span class=\"line\">### **2.3 远程仓库的使用**</span><br><span class=\"line\"> &amp;emsp; &amp;emsp;  2.3.1&amp;emsp; 查看当前的远程库,-v 选项显示对应的克隆地址：</span><br></pre></td></tr></table></figure>\n<pre><code>git remote //查看当前仓库对应的远程库,一般为origin\ngit remote -v //查看当前仓库对应的远程库及相应地址\n</code></pre><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">&amp;emsp</span>; <span class=\"variable\">&amp;emsp</span>;  <span class=\"number\">2.3</span><span class=\"number\">.2</span><span class=\"variable\">&amp;emsp</span>;远程仓库处理：</span><br></pre></td></tr></table></figure>\n<pre><code>git remote add yourname [url] //yourname是你的本地仓库名，相当于赋值yourname为URL\ngit fetch yourname  //从远程仓库抓取数据到本地，到如果要查看需要合并到当前分支\ngit remote show [remote-name] //查看远程仓库信息，如显示了有哪些远端分支还没有同步到本地等\ngit remote rename old-name new-name //重命名\ngit remote rm paul //删除\n</code></pre><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">### **2.4 标签**</span></span><br><span class=\"line\"> <span class=\"variable\">&amp;emsp</span>; <span class=\"variable\">&amp;emsp</span>;  <span class=\"number\">2.4</span><span class=\"number\">.1</span><span class=\"variable\">&amp;emsp</span>; 新建标签：</span><br></pre></td></tr></table></figure>\n<pre><code>git tag //查看已有标签\ngit tag -a yourtagname -m &apos;your comment&apos; //打标签\ngit show yourtagname //查看版本信息 \ngit tag -a yourtagname hist //后期加标签,hist表校验和\n</code></pre><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">&amp;emsp</span>; <span class=\"variable\">&amp;emsp</span>;  <span class=\"number\">2.4</span><span class=\"number\">.2</span><span class=\"variable\">&amp;emsp</span>; 标签远程共享：</span><br></pre></td></tr></table></figure>\n<pre><code>git push origin yourtagname //推送标签\ngit push origin --tags //推送所有标签\n</code></pre><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">### **2.5 Git 命令别名**</span></span><br><span class=\"line\"> <span class=\"variable\">&amp;emsp</span>; <span class=\"variable\">&amp;emsp</span>;  <span class=\"number\">2.5</span><span class=\"number\">.1</span><span class=\"variable\">&amp;emsp</span>; 简写git命令：</span><br></pre></td></tr></table></figure>\n<pre><code>git config --global alias.shortname gitcommandname \neg: git config --global alias.unstage &apos;reset HEAD&apos;\n    git unstage filename //撤销加入跟踪的文件 \n</code></pre><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## **<span class=\"number\">3.</span>git分支处理**</span><br><span class=\"line\">### **<span class=\"number\">3.1</span> Git 查看分支**</span><br><span class=\"line\"> &amp;emsp; &amp;emsp;  <span class=\"number\">3.1</span><span class=\"number\">.1</span>&amp;emsp; 查看分支：</span><br></pre></td></tr></table></figure>\n<pre><code>git branch \ngit branch -a //查看所有分支，包括远程分支\ngit branch -v //查看分支最后一个提交对象的信息\ngit branch --merged/--no--merge //查看已经（或尚未）合并的分支\n</code></pre><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">### **3.2 Git 分支切换、合并和删除**</span></span><br><span class=\"line\"> <span class=\"variable\">&amp;emsp</span>; <span class=\"variable\">&amp;emsp</span>;  <span class=\"number\">3.2</span><span class=\"number\">.1</span><span class=\"variable\">&amp;emsp</span>; 切换分支：</span><br></pre></td></tr></table></figure>\n<pre><code>git branch branchname  //在当前分支下创建分支\ngit checkout branchname //切换到已有的分支\ngit checkout -b &apos;branchname&apos; //创建分支并切换\n</code></pre><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">&amp;emsp</span>; <span class=\"variable\">&amp;emsp</span>;  <span class=\"number\">3.2</span><span class=\"number\">.2</span><span class=\"variable\">&amp;emsp</span>; 合并分支：</span><br></pre></td></tr></table></figure>\n<pre><code>git merge branchname //将分支合并到当前分支\n</code></pre><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">&amp;emsp</span>; <span class=\"variable\">&amp;emsp</span>;  <span class=\"number\">3.2</span><span class=\"number\">.3</span><span class=\"variable\">&amp;emsp</span>; 删除分支：</span><br></pre></td></tr></table></figure>\n<pre><code>git branch -d branchname  //删除分支\n</code></pre><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">### **3.3 Git 远程分支处理**</span></span><br><span class=\"line\"> <span class=\"variable\">&amp;emsp</span>; <span class=\"variable\">&amp;emsp</span>;  <span class=\"number\">3.3</span><span class=\"number\">.1</span><span class=\"variable\">&amp;emsp</span>;跟踪远程分支：</span><br></pre></td></tr></table></figure>\n<pre><code>git checkout -b [分支名] [远程仓库名]/[分支名]  //跟踪分支是一种和某个远程分支有直接联系的本地分支\ngit pull  //新建跟踪分支后用该命令直接将远程分支合并进来\ngit push  //将本地跟踪分支推送到远程分支\ngit push --set-upstream [远程仓库名] [分支名]  //将当前的分支设置为跟踪某个远程分支\n</code></pre><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">&amp;emsp</span>; <span class=\"variable\">&amp;emsp</span>;  <span class=\"number\">3.3</span><span class=\"number\">.2</span><span class=\"variable\">&amp;emsp</span>;抓取和合并远程分支：</span><br></pre></td></tr></table></figure>\n<pre><code>git fetch origin  //同步远程origin/master数据到本地，指针移到它最新的位置上。\ngit merge origin/remotename  //将远程分支的内容合并到当前分支，用于远程分支已同步而又不能直接访问时。\n</code></pre><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">&amp;emsp</span>; <span class=\"variable\">&amp;emsp</span>;  <span class=\"number\">3.3</span><span class=\"number\">.3</span><span class=\"variable\">&amp;emsp</span>;推送分支和删除远程分支：</span><br></pre></td></tr></table></figure>\n<pre><code>git push origin name1:name2  //把本地分支name1推送到远程分支name2中，如果远程仓库没有这个分支，会生成这样一个新的分支。用这种方式可以远程创建分支。  \ngit push origin name //将本地分支推到远程同名分支。\ngit push origin :remotename //把空白远程远程分支，即删除远程分支。\n</code></pre><p><code>`</code></p>\n<p><br><br><br></p>\n<p><strong><em>这些就是基本的git命令，更多待进一步学习</em></strong></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjvqga0qg000779jxigvuv1ac","category_id":"cjvqga0qd000479jxrp0brmc1","_id":"cjvqga0qo000f79jxjcu2cz35"},{"post_id":"cjvqga0q7000279jx476yv24s","category_id":"cjvqga0qd000479jxrp0brmc1","_id":"cjvqga0qq000k79jxo3beb09i"},{"post_id":"cjvqga0qh000879jx85hwoc76","category_id":"cjvqga0qd000479jxrp0brmc1","_id":"cjvqga0qr000n79jxm90sitcu"},{"post_id":"cjvqga0qk000c79jxxlu53r90","category_id":"cjvqga0qd000479jxrp0brmc1","_id":"cjvqga0qt000s79jxul7xo4xn"},{"post_id":"cjvqga0qb000379jxauh63p1x","category_id":"cjvqga0qd000479jxrp0brmc1","_id":"cjvqga0qu000v79jxyrk95hu7"},{"post_id":"cjvqga0ql000e79jx29yeaosu","category_id":"cjvqga0qd000479jxrp0brmc1","_id":"cjvqga0qw001079jx0h1ckp3j"},{"post_id":"cjvqga0qf000679jxy6kddpp1","category_id":"cjvqga0qd000479jxrp0brmc1","_id":"cjvqga0qx001379jxwksebceb"},{"post_id":"cjvqga0qp000j79jxpzfsz3np","category_id":"cjvqga0qs000o79jxc7w08edc","_id":"cjvqga0qy001679jx7cq875p6"},{"post_id":"cjvqga0qr000m79jxzxayk2ww","category_id":"cjvqga0qs000o79jxc7w08edc","_id":"cjvqga0qz001979jxwjojh5t0"},{"post_id":"cjvqga0qs000r79jxgms617t1","category_id":"cjvqga0qs000o79jxc7w08edc","_id":"cjvqga0r0001c79jx0hj3hnax"},{"post_id":"cjvqga0qt000u79jxt1cfab0n","category_id":"cjvqga0qz001879jxgrh1zwni","_id":"cjvqga0r1001g79jxh2csknnc"},{"post_id":"cjvqga0qv000x79jx7gtd3aps","category_id":"cjvqga0r0001d79jxilfk2y62","_id":"cjvqga0r2001m79jxft99o0vy"},{"post_id":"cjvqga0qw001279jxvw4kor8d","category_id":"cjvqga0r0001d79jxilfk2y62","_id":"cjvqga0r3001o79jx6a22xe8y"},{"post_id":"cjvqga0qx001479jxkcxrqm4b","category_id":"cjvqga0r0001d79jxilfk2y62","_id":"cjvqga0r4001r79jxbxna4pnh"}],"PostTag":[{"post_id":"cjvqga0qg000779jxigvuv1ac","tag_id":"cjvqga0qe000579jxty5kbhjg","_id":"cjvqga0qk000b79jxcmstm98g"},{"post_id":"cjvqga0q7000279jx476yv24s","tag_id":"cjvqga0qe000579jxty5kbhjg","_id":"cjvqga0ql000d79jxodv3mmg8"},{"post_id":"cjvqga0qh000879jx85hwoc76","tag_id":"cjvqga0qe000579jxty5kbhjg","_id":"cjvqga0qp000i79jxpigvi5vw"},{"post_id":"cjvqga0qk000c79jxxlu53r90","tag_id":"cjvqga0qe000579jxty5kbhjg","_id":"cjvqga0qr000l79jx9u3125wa"},{"post_id":"cjvqga0qb000379jxauh63p1x","tag_id":"cjvqga0qe000579jxty5kbhjg","_id":"cjvqga0qs000q79jxh3k1wg93"},{"post_id":"cjvqga0ql000e79jx29yeaosu","tag_id":"cjvqga0qe000579jxty5kbhjg","_id":"cjvqga0qt000t79jxigm4qnxc"},{"post_id":"cjvqga0qf000679jxy6kddpp1","tag_id":"cjvqga0qe000579jxty5kbhjg","_id":"cjvqga0qv000w79jxld3l0zya"},{"post_id":"cjvqga0qp000j79jxpzfsz3np","tag_id":"cjvqga0qs000p79jxnqse8qtp","_id":"cjvqga0qw001179jxw68sf8it"},{"post_id":"cjvqga0qr000m79jxzxayk2ww","tag_id":"cjvqga0qw000z79jxblct2t7b","_id":"cjvqga0r0001b79jxq7mzzlns"},{"post_id":"cjvqga0qr000m79jxzxayk2ww","tag_id":"cjvqga0qz001779jxnz0q22ca","_id":"cjvqga0r0001e79jxe6sqg735"},{"post_id":"cjvqga0qs000r79jxgms617t1","tag_id":"cjvqga0qw000z79jxblct2t7b","_id":"cjvqga0r2001j79jx58c2m6in"},{"post_id":"cjvqga0qs000r79jxgms617t1","tag_id":"cjvqga0qz001779jxnz0q22ca","_id":"cjvqga0r2001k79jxpnxaqfbp"},{"post_id":"cjvqga0qt000u79jxt1cfab0n","tag_id":"cjvqga0r1001i79jxdeyaolzj","_id":"cjvqga0r4001q79jxboe3lqg5"},{"post_id":"cjvqga0qt000u79jxt1cfab0n","tag_id":"cjvqga0r3001n79jxd7yz4fzk","_id":"cjvqga0r4001s79jxzro72ps9"},{"post_id":"cjvqga0qv000x79jx7gtd3aps","tag_id":"cjvqga0r3001p79jx0fqvo8t0","_id":"cjvqga0r4001u79jxbpsgkyes"},{"post_id":"cjvqga0qw001279jxvw4kor8d","tag_id":"cjvqga0r3001p79jx0fqvo8t0","_id":"cjvqga0r5001w79jxp1xw29jt"},{"post_id":"cjvqga0qx001479jxkcxrqm4b","tag_id":"cjvqga0r3001p79jx0fqvo8t0","_id":"cjvqga0r6001x79jxjnovx1p0"}],"Tag":[{"name":"C++基础","_id":"cjvqga0qe000579jxty5kbhjg"},{"name":"动态规划","_id":"cjvqga0qs000p79jxnqse8qtp"},{"name":"字典树","_id":"cjvqga0qw000z79jxblct2t7b"},{"name":"trie树","_id":"cjvqga0qz001779jxnz0q22ca"},{"name":"Iptabls","_id":"cjvqga0r1001i79jxdeyaolzj"},{"name":"Netfilter","_id":"cjvqga0r3001n79jxd7yz4fzk"},{"name":"git使用","_id":"cjvqga0r3001p79jx0fqvo8t0"}]}}